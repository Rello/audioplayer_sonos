# Run these steps to update this file:
sed -i 's/ *"\*\*\/Tests\/"//' composer.json
composer u -o
SYMFONY_PATCH_TYPE_DECLARATIONS='force=2&php=8.1' php .github/patch-types.php
head=$(sed '/^diff /Q' .github/expected-missing-return-types.diff)
git checkout src/Symfony/Contracts/Service/ResetInterface.php
(echo "$head" && echo && git diff -U2 src/) > .github/expected-missing-return-types.diff
git checkout composer.json src/

diff --git a/src/Symfony/Bridge/Doctrine/DataCollector/DoctrineDataCollector.php b/src/Symfony/Bridge/Doctrine/DataCollector/DoctrineDataCollector.php
index ada5fcbd49..51af652f08 100644
--- a/src/Symfony/Bridge/Doctrine/DataCollector/DoctrineDataCollector.php
+++ b/src/Symfony/Bridge/Doctrine/DataCollector/DoctrineDataCollector.php
@@ -51,5 +51,5 @@ class DoctrineDataCollector extends DataCollector
      * @return void
      */
-    public function addLogger(string $name, DebugStack $logger)
+    public function addLogger(string $name, DebugStack $logger): void
     {
         $this->loggers[$name] = $logger;
@@ -59,5 +59,5 @@ class DoctrineDataCollector extends DataCollector
      * @return void
      */
-    public function collect(Request $request, Response $response, \Throwable $exception = null)
+    public function collect(Request $request, Response $response, \Throwable $exception = null): void
     {
         $this->data = [
@@ -90,5 +90,5 @@ class DoctrineDataCollector extends DataCollector
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->data = [];
@@ -119,5 +119,5 @@ class DoctrineDataCollector extends DataCollector
      * @return int
      */
-    public function getQueryCount()
+    public function getQueryCount(): int
     {
         return array_sum(array_map('count', $this->data['queries']));
diff --git a/src/Symfony/Bridge/Doctrine/DataFixtures/ContainerAwareLoader.php b/src/Symfony/Bridge/Doctrine/DataFixtures/ContainerAwareLoader.php
index 4fa5057fe2..9e111adac5 100644
--- a/src/Symfony/Bridge/Doctrine/DataFixtures/ContainerAwareLoader.php
+++ b/src/Symfony/Bridge/Doctrine/DataFixtures/ContainerAwareLoader.php
@@ -36,5 +36,5 @@ class ContainerAwareLoader extends Loader
      * @return void
      */
-    public function addFixture(FixtureInterface $fixture)
+    public function addFixture(FixtureInterface $fixture): void
     {
         if ($fixture instanceof ContainerAwareInterface) {
diff --git a/src/Symfony/Bridge/Doctrine/DependencyInjection/AbstractDoctrineExtension.php b/src/Symfony/Bridge/Doctrine/DependencyInjection/AbstractDoctrineExtension.php
index 1ce0ffd40c..585265fb38 100644
--- a/src/Symfony/Bridge/Doctrine/DependencyInjection/AbstractDoctrineExtension.php
+++ b/src/Symfony/Bridge/Doctrine/DependencyInjection/AbstractDoctrineExtension.php
@@ -43,5 +43,5 @@ abstract class AbstractDoctrineExtension extends Extension
      * @throws \InvalidArgumentException
      */
-    protected function loadMappingInformation(array $objectManager, ContainerBuilder $container)
+    protected function loadMappingInformation(array $objectManager, ContainerBuilder $container): void
     {
         if ($objectManager['auto_mapping']) {
@@ -111,5 +111,5 @@ abstract class AbstractDoctrineExtension extends Extension
      * @return void
      */
-    protected function setMappingDriverAlias(array $mappingConfig, string $mappingName)
+    protected function setMappingDriverAlias(array $mappingConfig, string $mappingName): void
     {
         if (isset($mappingConfig['alias'])) {
@@ -127,5 +127,5 @@ abstract class AbstractDoctrineExtension extends Extension
      * @throws \InvalidArgumentException
      */
-    protected function setMappingDriverConfig(array $mappingConfig, string $mappingName)
+    protected function setMappingDriverConfig(array $mappingConfig, string $mappingName): void
     {
         $mappingDirectory = $mappingConfig['dir'];
@@ -182,5 +182,5 @@ abstract class AbstractDoctrineExtension extends Extension
      * @return void
      */
-    protected function registerMappingDrivers(array $objectManager, ContainerBuilder $container)
+    protected function registerMappingDrivers(array $objectManager, ContainerBuilder $container): void
     {
         // configure metadata driver for each bundle based on the type of mapping files found
@@ -240,5 +240,5 @@ abstract class AbstractDoctrineExtension extends Extension
      * @throws \InvalidArgumentException
      */
-    protected function assertValidMappingConfiguration(array $mappingConfig, string $objectManagerName)
+    protected function assertValidMappingConfiguration(array $mappingConfig, string $objectManagerName): void
     {
         if (!$mappingConfig['type'] || !$mappingConfig['dir'] || !$mappingConfig['prefix']) {
@@ -330,5 +330,5 @@ abstract class AbstractDoctrineExtension extends Extension
      * @throws \InvalidArgumentException in case of unknown driver type
      */
-    protected function loadObjectManagerCacheDriver(array $objectManager, ContainerBuilder $container, string $cacheName)
+    protected function loadObjectManagerCacheDriver(array $objectManager, ContainerBuilder $container, string $cacheName): void
     {
         $this->loadCacheDriver($cacheName, $objectManager['name'], $objectManager[$cacheName.'_driver'], $container);
diff --git a/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/DoctrineValidationPass.php b/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/DoctrineValidationPass.php
index 83bfffaf27..acbd7e4bc7 100644
--- a/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/DoctrineValidationPass.php
+++ b/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/DoctrineValidationPass.php
@@ -32,5 +32,5 @@ class DoctrineValidationPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->updateValidatorMappingFiles($container, 'xml', 'xml');
diff --git a/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterEventListenersAndSubscribersPass.php b/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterEventListenersAndSubscribersPass.php
index b6946cc4de..5b3ba9f915 100644
--- a/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterEventListenersAndSubscribersPass.php
+++ b/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterEventListenersAndSubscribersPass.php
@@ -54,5 +54,5 @@ class RegisterEventListenersAndSubscribersPass implements CompilerPassInterface
     }
 
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasParameter($this->connectionsParameter)) {
diff --git a/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterMappingsPass.php b/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterMappingsPass.php
index 1a3f227c6d..daf6634922 100644
--- a/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterMappingsPass.php
+++ b/src/Symfony/Bridge/Doctrine/DependencyInjection/CompilerPass/RegisterMappingsPass.php
@@ -134,5 +134,5 @@ abstract class RegisterMappingsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$this->enabled($container)) {
diff --git a/src/Symfony/Bridge/Doctrine/DependencyInjection/Security/UserProvider/EntityFactory.php b/src/Symfony/Bridge/Doctrine/DependencyInjection/Security/UserProvider/EntityFactory.php
index 80ee258438..e2c51954d0 100644
--- a/src/Symfony/Bridge/Doctrine/DependencyInjection/Security/UserProvider/EntityFactory.php
+++ b/src/Symfony/Bridge/Doctrine/DependencyInjection/Security/UserProvider/EntityFactory.php
@@ -37,5 +37,5 @@ class EntityFactory implements UserProviderFactoryInterface
      * @return void
      */
-    public function create(ContainerBuilder $container, string $id, array $config)
+    public function create(ContainerBuilder $container, string $id, array $config): void
     {
         $container
@@ -50,5 +50,5 @@ class EntityFactory implements UserProviderFactoryInterface
      * @return string
      */
-    public function getKey()
+    public function getKey(): string
     {
         return $this->key;
@@ -58,5 +58,5 @@ class EntityFactory implements UserProviderFactoryInterface
      * @return void
      */
-    public function addConfiguration(NodeDefinition $node)
+    public function addConfiguration(NodeDefinition $node): void
     {
         $node
diff --git a/src/Symfony/Bridge/Doctrine/Form/EventListener/MergeDoctrineCollectionListener.php b/src/Symfony/Bridge/Doctrine/Form/EventListener/MergeDoctrineCollectionListener.php
index cff8b3b156..51e1f32e97 100644
--- a/src/Symfony/Bridge/Doctrine/Form/EventListener/MergeDoctrineCollectionListener.php
+++ b/src/Symfony/Bridge/Doctrine/Form/EventListener/MergeDoctrineCollectionListener.php
@@ -42,5 +42,5 @@ class MergeDoctrineCollectionListener implements EventSubscriberInterface
      * @return void
      */
-    public function onSubmit(FormEvent $event)
+    public function onSubmit(FormEvent $event): void
     {
         $collection = $event->getForm()->getData();
diff --git a/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php b/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php
index d1d72ef75a..68a437e8d7 100644
--- a/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php
+++ b/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php
@@ -101,5 +101,5 @@ abstract class DoctrineType extends AbstractType implements ResetInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if ($options['multiple'] && interface_exists(Collection::class)) {
@@ -114,5 +114,5 @@ abstract class DoctrineType extends AbstractType implements ResetInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $choiceLoader = function (Options $options) {
@@ -242,5 +242,5 @@ abstract class DoctrineType extends AbstractType implements ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->idReaders = [];
diff --git a/src/Symfony/Bridge/Doctrine/Form/Type/EntityType.php b/src/Symfony/Bridge/Doctrine/Form/Type/EntityType.php
index c096b558db..8d584900a9 100644
--- a/src/Symfony/Bridge/Doctrine/Form/Type/EntityType.php
+++ b/src/Symfony/Bridge/Doctrine/Form/Type/EntityType.php
@@ -25,5 +25,5 @@ class EntityType extends DoctrineType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         parent::configureOptions($resolver);
diff --git a/src/Symfony/Bridge/Doctrine/Logger/DbalLogger.php b/src/Symfony/Bridge/Doctrine/Logger/DbalLogger.php
index b2369e95d6..c33484608e 100644
--- a/src/Symfony/Bridge/Doctrine/Logger/DbalLogger.php
+++ b/src/Symfony/Bridge/Doctrine/Logger/DbalLogger.php
@@ -52,5 +52,5 @@ class DbalLogger implements SQLLogger
      * @return void
      */
-    protected function log(string $message, array $params)
+    protected function log(string $message, array $params): void
     {
         $this->logger->debug($message, $params);
diff --git a/src/Symfony/Bridge/Doctrine/Messenger/DoctrineClearEntityManagerWorkerSubscriber.php b/src/Symfony/Bridge/Doctrine/Messenger/DoctrineClearEntityManagerWorkerSubscriber.php
index 38618fc15e..eb599eb0b4 100644
--- a/src/Symfony/Bridge/Doctrine/Messenger/DoctrineClearEntityManagerWorkerSubscriber.php
+++ b/src/Symfony/Bridge/Doctrine/Messenger/DoctrineClearEntityManagerWorkerSubscriber.php
@@ -34,5 +34,5 @@ class DoctrineClearEntityManagerWorkerSubscriber implements EventSubscriberInter
      * @return void
      */
-    public function onWorkerMessageHandled()
+    public function onWorkerMessageHandled(): void
     {
         $this->clearEntityManagers();
@@ -42,5 +42,5 @@ class DoctrineClearEntityManagerWorkerSubscriber implements EventSubscriberInter
      * @return void
      */
-    public function onWorkerMessageFailed()
+    public function onWorkerMessageFailed(): void
     {
         $this->clearEntityManagers();
diff --git a/src/Symfony/Bridge/Doctrine/Security/RememberMe/DoctrineTokenProvider.php b/src/Symfony/Bridge/Doctrine/Security/RememberMe/DoctrineTokenProvider.php
index 9d61be61bd..e89985de26 100644
--- a/src/Symfony/Bridge/Doctrine/Security/RememberMe/DoctrineTokenProvider.php
+++ b/src/Symfony/Bridge/Doctrine/Security/RememberMe/DoctrineTokenProvider.php
@@ -70,5 +70,5 @@ class DoctrineTokenProvider implements TokenProviderInterface, TokenVerifierInte
      * @return void
      */
-    public function deleteTokenBySeries(string $series)
+    public function deleteTokenBySeries(string $series): void
     {
         $sql = 'DELETE FROM rememberme_token WHERE series=:series';
@@ -85,5 +85,5 @@ class DoctrineTokenProvider implements TokenProviderInterface, TokenVerifierInte
      * @return void
      */
-    public function updateToken(string $series, #[\SensitiveParameter] string $tokenValue, \DateTime $lastUsed)
+    public function updateToken(string $series, #[\SensitiveParameter] string $tokenValue, \DateTime $lastUsed): void
     {
         $sql = 'UPDATE rememberme_token SET value=:value, lastUsed=:lastUsed WHERE series=:series';
@@ -111,5 +111,5 @@ class DoctrineTokenProvider implements TokenProviderInterface, TokenVerifierInte
      * @return void
      */
-    public function createNewToken(PersistentTokenInterface $token)
+    public function createNewToken(PersistentTokenInterface $token): void
     {
         $sql = 'INSERT INTO rememberme_token (class, username, series, value, lastUsed) VALUES (:class, :username, :series, :value, :lastUsed)';
diff --git a/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntityValidator.php b/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntityValidator.php
index a69bcad8ef..fba98b3cfb 100644
--- a/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntityValidator.php
+++ b/src/Symfony/Bridge/Doctrine/Validator/Constraints/UniqueEntityValidator.php
@@ -43,5 +43,5 @@ class UniqueEntityValidator extends ConstraintValidator
      * @throws ConstraintDefinitionException
      */
-    public function validate(mixed $entity, Constraint $constraint)
+    public function validate(mixed $entity, Constraint $constraint): void
     {
         if (!$constraint instanceof UniqueEntity) {
diff --git a/src/Symfony/Bridge/Doctrine/Validator/DoctrineInitializer.php b/src/Symfony/Bridge/Doctrine/Validator/DoctrineInitializer.php
index bf8a5feb9f..e346c8b17c 100644
--- a/src/Symfony/Bridge/Doctrine/Validator/DoctrineInitializer.php
+++ b/src/Symfony/Bridge/Doctrine/Validator/DoctrineInitializer.php
@@ -32,5 +32,5 @@ class DoctrineInitializer implements ObjectInitializerInterface
      * @return void
      */
-    public function initialize(object $object)
+    public function initialize(object $object): void
     {
         $this->registry->getManagerForClass($object::class)?->initializeObject($object);
diff --git a/src/Symfony/Bridge/Monolog/Command/ServerLogCommand.php b/src/Symfony/Bridge/Monolog/Command/ServerLogCommand.php
index 5210e8eefa..0e842abb76 100644
--- a/src/Symfony/Bridge/Monolog/Command/ServerLogCommand.php
+++ b/src/Symfony/Bridge/Monolog/Command/ServerLogCommand.php
@@ -54,5 +54,5 @@ class ServerLogCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         if (!class_exists(ConsoleFormatter::class)) {
diff --git a/src/Symfony/Bridge/Monolog/Handler/MailerHandler.php b/src/Symfony/Bridge/Monolog/Handler/MailerHandler.php
index 718be59c13..091f24a8f8 100644
--- a/src/Symfony/Bridge/Monolog/Handler/MailerHandler.php
+++ b/src/Symfony/Bridge/Monolog/Handler/MailerHandler.php
@@ -81,5 +81,5 @@ class MailerHandler extends AbstractProcessingHandler
      * @return void
      */
-    protected function send(string $content, array $records)
+    protected function send(string $content, array $records): void
     {
         $this->mailer->send($this->buildMessage($content, $records));
diff --git a/src/Symfony/Bridge/Monolog/Logger.php b/src/Symfony/Bridge/Monolog/Logger.php
index 367b3351ff..fb603e74ba 100644
--- a/src/Symfony/Bridge/Monolog/Logger.php
+++ b/src/Symfony/Bridge/Monolog/Logger.php
@@ -44,5 +44,5 @@ class Logger extends BaseLogger implements DebugLoggerInterface, ResetInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         if ($logger = $this->getDebugLogger()) {
@@ -63,5 +63,5 @@ class Logger extends BaseLogger implements DebugLoggerInterface, ResetInterface
      * @return void
      */
-    public function removeDebugLogger()
+    public function removeDebugLogger(): void
     {
         foreach ($this->processors as $k => $processor) {
diff --git a/src/Symfony/Bridge/Monolog/Processor/ConsoleCommandProcessor.php b/src/Symfony/Bridge/Monolog/Processor/ConsoleCommandProcessor.php
index df2a718720..2ccab3649f 100644
--- a/src/Symfony/Bridge/Monolog/Processor/ConsoleCommandProcessor.php
+++ b/src/Symfony/Bridge/Monolog/Processor/ConsoleCommandProcessor.php
@@ -51,5 +51,5 @@ class ConsoleCommandProcessor implements EventSubscriberInterface, ResetInterfac
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         unset($this->commandData);
@@ -59,5 +59,5 @@ class ConsoleCommandProcessor implements EventSubscriberInterface, ResetInterfac
      * @return void
      */
-    public function addCommandData(ConsoleEvent $event)
+    public function addCommandData(ConsoleEvent $event): void
     {
         $this->commandData = [
diff --git a/src/Symfony/Bridge/Monolog/Processor/DebugProcessor.php b/src/Symfony/Bridge/Monolog/Processor/DebugProcessor.php
index c1ce2898da..7a9bf04e18 100644
--- a/src/Symfony/Bridge/Monolog/Processor/DebugProcessor.php
+++ b/src/Symfony/Bridge/Monolog/Processor/DebugProcessor.php
@@ -94,5 +94,5 @@ class DebugProcessor implements DebugLoggerInterface, ResetInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->records = [];
@@ -103,5 +103,5 @@ class DebugProcessor implements DebugLoggerInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->clear();
diff --git a/src/Symfony/Bridge/Twig/AppVariable.php b/src/Symfony/Bridge/Twig/AppVariable.php
index 8bfaa0a22c..745ba6aff3 100644
--- a/src/Symfony/Bridge/Twig/AppVariable.php
+++ b/src/Symfony/Bridge/Twig/AppVariable.php
@@ -36,5 +36,5 @@ class AppVariable
      * @return void
      */
-    public function setTokenStorage(TokenStorageInterface $tokenStorage)
+    public function setTokenStorage(TokenStorageInterface $tokenStorage): void
     {
         $this->tokenStorage = $tokenStorage;
@@ -44,5 +44,5 @@ class AppVariable
      * @return void
      */
-    public function setRequestStack(RequestStack $requestStack)
+    public function setRequestStack(RequestStack $requestStack): void
     {
         $this->requestStack = $requestStack;
@@ -52,5 +52,5 @@ class AppVariable
      * @return void
      */
-    public function setEnvironment(string $environment)
+    public function setEnvironment(string $environment): void
     {
         $this->environment = $environment;
@@ -60,5 +60,5 @@ class AppVariable
      * @return void
      */
-    public function setDebug(bool $debug)
+    public function setDebug(bool $debug): void
     {
         $this->debug = $debug;
diff --git a/src/Symfony/Bridge/Twig/Command/DebugCommand.php b/src/Symfony/Bridge/Twig/Command/DebugCommand.php
index 43e4d9c9f1..ea0116870b 100644
--- a/src/Symfony/Bridge/Twig/Command/DebugCommand.php
+++ b/src/Symfony/Bridge/Twig/Command/DebugCommand.php
@@ -63,5 +63,5 @@ class DebugCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Bridge/Twig/Command/LintCommand.php b/src/Symfony/Bridge/Twig/Command/LintCommand.php
index e059740a13..e7d6fbdd05 100644
--- a/src/Symfony/Bridge/Twig/Command/LintCommand.php
+++ b/src/Symfony/Bridge/Twig/Command/LintCommand.php
@@ -52,5 +52,5 @@ class LintCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Bridge/Twig/EventListener/TemplateAttributeListener.php b/src/Symfony/Bridge/Twig/EventListener/TemplateAttributeListener.php
index ef0f9ba954..16240deb4a 100644
--- a/src/Symfony/Bridge/Twig/EventListener/TemplateAttributeListener.php
+++ b/src/Symfony/Bridge/Twig/EventListener/TemplateAttributeListener.php
@@ -32,5 +32,5 @@ class TemplateAttributeListener implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelView(ViewEvent $event)
+    public function onKernelView(ViewEvent $event): void
     {
         $parameters = $event->getControllerResult();
diff --git a/src/Symfony/Bridge/Twig/Form/TwigRendererEngine.php b/src/Symfony/Bridge/Twig/Form/TwigRendererEngine.php
index fbe8e0b3e4..6e7fefc70d 100644
--- a/src/Symfony/Bridge/Twig/Form/TwigRendererEngine.php
+++ b/src/Symfony/Bridge/Twig/Form/TwigRendererEngine.php
@@ -136,5 +136,5 @@ class TwigRendererEngine extends AbstractRendererEngine
      * @return void
      */
-    protected function loadResourcesFromTheme(string $cacheKey, mixed &$theme)
+    protected function loadResourcesFromTheme(string $cacheKey, mixed &$theme): void
     {
         if (!$theme instanceof Template) {
diff --git a/src/Symfony/Bridge/Twig/Translation/TwigExtractor.php b/src/Symfony/Bridge/Twig/Translation/TwigExtractor.php
index 2b44c5ef8d..05b4428490 100644
--- a/src/Symfony/Bridge/Twig/Translation/TwigExtractor.php
+++ b/src/Symfony/Bridge/Twig/Translation/TwigExtractor.php
@@ -49,5 +49,5 @@ class TwigExtractor extends AbstractFileExtractor implements ExtractorInterface
      * @return void
      */
-    public function extract($resource, MessageCatalogue $catalogue)
+    public function extract($resource, MessageCatalogue $catalogue): void
     {
         foreach ($this->extractFiles($resource) as $file) {
@@ -63,5 +63,5 @@ class TwigExtractor extends AbstractFileExtractor implements ExtractorInterface
      * @return void
      */
-    public function setPrefix(string $prefix)
+    public function setPrefix(string $prefix): void
     {
         $this->prefix = $prefix;
@@ -71,5 +71,5 @@ class TwigExtractor extends AbstractFileExtractor implements ExtractorInterface
      * @return void
      */
-    protected function extractTemplate(string $template, MessageCatalogue $catalogue)
+    protected function extractTemplate(string $template, MessageCatalogue $catalogue): void
     {
         $visitor = $this->twig->getExtension(TranslationExtension::class)->getTranslationNodeVisitor();
diff --git a/src/Symfony/Bundle/DebugBundle/DebugBundle.php b/src/Symfony/Bundle/DebugBundle/DebugBundle.php
index 9782bf8e39..83090e6ed5 100644
--- a/src/Symfony/Bundle/DebugBundle/DebugBundle.php
+++ b/src/Symfony/Bundle/DebugBundle/DebugBundle.php
@@ -26,5 +26,5 @@ class DebugBundle extends Bundle
      * @return void
      */
-    public function boot()
+    public function boot(): void
     {
         if ($this->container->getParameter('kernel.debug')) {
@@ -56,5 +56,5 @@ class DebugBundle extends Bundle
      * @return void
      */
-    public function build(ContainerBuilder $container)
+    public function build(ContainerBuilder $container): void
     {
         parent::build($container);
@@ -66,5 +66,5 @@ class DebugBundle extends Bundle
      * @return void
      */
-    public function registerCommands(Application $application)
+    public function registerCommands(Application $application): void
     {
         // noop
diff --git a/src/Symfony/Bundle/DebugBundle/DependencyInjection/Compiler/DumpDataCollectorPass.php b/src/Symfony/Bundle/DebugBundle/DependencyInjection/Compiler/DumpDataCollectorPass.php
index cecce87c4a..7c6d738481 100644
--- a/src/Symfony/Bundle/DebugBundle/DependencyInjection/Compiler/DumpDataCollectorPass.php
+++ b/src/Symfony/Bundle/DebugBundle/DependencyInjection/Compiler/DumpDataCollectorPass.php
@@ -26,5 +26,5 @@ class DumpDataCollectorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('data_collector.dump')) {
diff --git a/src/Symfony/Bundle/DebugBundle/DependencyInjection/DebugExtension.php b/src/Symfony/Bundle/DebugBundle/DependencyInjection/DebugExtension.php
index eadeafba55..4f1ca3bfef 100644
--- a/src/Symfony/Bundle/DebugBundle/DependencyInjection/DebugExtension.php
+++ b/src/Symfony/Bundle/DebugBundle/DependencyInjection/DebugExtension.php
@@ -33,5 +33,5 @@ class DebugExtension extends Extension
      * @return void
      */
-    public function load(array $configs, ContainerBuilder $container)
+    public function load(array $configs, ContainerBuilder $container): void
     {
         $configuration = new Configuration();
diff --git a/src/Symfony/Bundle/FrameworkBundle/Console/Application.php b/src/Symfony/Bundle/FrameworkBundle/Console/Application.php
index cdbb90a3a9..b137a12012 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Console/Application.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Console/Application.php
@@ -56,5 +56,5 @@ class Application extends BaseApplication
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         if ($this->kernel->getContainer()->has('services_resetter')) {
@@ -144,5 +144,5 @@ class Application extends BaseApplication
      * @return void
      */
-    protected function registerCommands()
+    protected function registerCommands(): void
     {
         if ($this->commandsRegistered) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DataCollector/RouterDataCollector.php b/src/Symfony/Bundle/FrameworkBundle/DataCollector/RouterDataCollector.php
index ccb61b1286..700d0f22d4 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DataCollector/RouterDataCollector.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DataCollector/RouterDataCollector.php
@@ -23,5 +23,5 @@ use Symfony\Component\HttpKernel\DataCollector\RouterDataCollector as BaseRouter
 class RouterDataCollector extends BaseRouterDataCollector
 {
-    public function guessRoute(Request $request, mixed $controller)
+    public function guessRoute(Request $request, mixed $controller): string
     {
         if (\is_array($controller)) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddDebugLogProcessorPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddDebugLogProcessorPass.php
index d0aca7a06b..aee4af1a43 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddDebugLogProcessorPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddDebugLogProcessorPass.php
@@ -21,5 +21,5 @@ class AddDebugLogProcessorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('profiler')) {
@@ -41,5 +41,5 @@ class AddDebugLogProcessorPass implements CompilerPassInterface
      * @return void
      */
-    public static function configureLogger(mixed $logger)
+    public static function configureLogger(mixed $logger): void
     {
         if (\is_object($logger) && method_exists($logger, 'removeDebugLogger') && \in_array(\PHP_SAPI, ['cli', 'phpdbg'], true)) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php
index 5442b27734..9ed6cf284c 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php
@@ -26,5 +26,5 @@ class AddExpressionLanguageProvidersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         // routing
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AssetsContextPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AssetsContextPass.php
index e8c2ad3a0e..d8b3b64f5d 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AssetsContextPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/AssetsContextPass.php
@@ -22,5 +22,5 @@ class AssetsContextPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('assets.context')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ContainerBuilderDebugDumpPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ContainerBuilderDebugDumpPass.php
index 1e08ef3149..530bbdc4cd 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ContainerBuilderDebugDumpPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ContainerBuilderDebugDumpPass.php
@@ -29,5 +29,5 @@ class ContainerBuilderDebugDumpPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->getParameter('debug.container.dump')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/DataCollectorTranslatorPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/DataCollectorTranslatorPass.php
index e66e98b451..7714d62f3e 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/DataCollectorTranslatorPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/DataCollectorTranslatorPass.php
@@ -24,5 +24,5 @@ class DataCollectorTranslatorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->has('translator')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/LoggingTranslatorPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/LoggingTranslatorPass.php
index b7cb920bf7..76b5dace0f 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/LoggingTranslatorPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/LoggingTranslatorPass.php
@@ -26,5 +26,5 @@ class LoggingTranslatorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasAlias('logger') || !$container->hasAlias('translator')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ProfilerPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ProfilerPass.php
index c2d669fe1c..322f3eaeee 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ProfilerPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/ProfilerPass.php
@@ -28,5 +28,5 @@ class ProfilerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (false === $container->hasDefinition('profiler')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/RemoveUnusedSessionMarshallingHandlerPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/RemoveUnusedSessionMarshallingHandlerPass.php
index fedc30d06e..bb934fe1f6 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/RemoveUnusedSessionMarshallingHandlerPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/RemoveUnusedSessionMarshallingHandlerPass.php
@@ -23,5 +23,5 @@ class RemoveUnusedSessionMarshallingHandlerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('session.marshalling_handler')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerRealRefPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerRealRefPass.php
index 09f272daa9..1fd0608bde 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerRealRefPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerRealRefPass.php
@@ -25,5 +25,5 @@ class TestServiceContainerRealRefPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('test.private_services_locator')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerWeakRefPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerWeakRefPass.php
index 6e7669a710..27517d34ae 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerWeakRefPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/TestServiceContainerWeakRefPass.php
@@ -25,5 +25,5 @@ class TestServiceContainerWeakRefPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('test.private_services_locator')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/UnusedTagsPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/UnusedTagsPass.php
index a76b84ad83..7e71517edb 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/UnusedTagsPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/UnusedTagsPass.php
@@ -109,5 +109,5 @@ class UnusedTagsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $tags = array_unique(array_merge($container->findTags(), self::KNOWN_TAGS));
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/WorkflowGuardListenerPass.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/WorkflowGuardListenerPass.php
index bda9ca9515..c0d1f91339 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/WorkflowGuardListenerPass.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/WorkflowGuardListenerPass.php
@@ -25,5 +25,5 @@ class WorkflowGuardListenerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasParameter('workflow.has_guard_listeners')) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php
index d209d9902b..92b9f508c4 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php
@@ -211,5 +211,5 @@ class FrameworkExtension extends Extension
      * @throws LogicException
      */
-    public function load(array $configs, ContainerBuilder $container)
+    public function load(array $configs, ContainerBuilder $container): void
     {
         $loader = new PhpFileLoader($container, new FileLocator(\dirname(__DIR__).'/Resources/config'));
@@ -2890,5 +2890,5 @@ class FrameworkExtension extends Extension
      * @return void
      */
-    public static function registerRateLimiter(ContainerBuilder $container, string $name, array $limiterConfig)
+    public static function registerRateLimiter(ContainerBuilder $container, string $name, array $limiterConfig): void
     {
         trigger_deprecation('symfony/framework-bundle', '6.2', 'The "%s()" method is deprecated.', __METHOD__);
diff --git a/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php b/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php
index ffb96a23e5..e7f77881c8 100644
--- a/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php
+++ b/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php
@@ -94,5 +94,5 @@ class FrameworkBundle extends Bundle
      * @return void
      */
-    public function boot()
+    public function boot(): void
     {
         $handler = ErrorHandler::register(null, false);
@@ -111,5 +111,5 @@ class FrameworkBundle extends Bundle
      * @return void
      */
-    public function build(ContainerBuilder $container)
+    public function build(ContainerBuilder $container): void
     {
         parent::build($container);
diff --git a/src/Symfony/Bundle/FrameworkBundle/Kernel/MicroKernelTrait.php b/src/Symfony/Bundle/FrameworkBundle/Kernel/MicroKernelTrait.php
index 3ab28a1f81..2ace764149 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Kernel/MicroKernelTrait.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Kernel/MicroKernelTrait.php
@@ -132,5 +132,5 @@ trait MicroKernelTrait
      * @return void
      */
-    public function registerContainerConfiguration(LoaderInterface $loader)
+    public function registerContainerConfiguration(LoaderInterface $loader): void
     {
         $loader->load(function (ContainerBuilder $container) use ($loader) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/KernelBrowser.php b/src/Symfony/Bundle/FrameworkBundle/KernelBrowser.php
index 0379be8f5b..568f30f72d 100644
--- a/src/Symfony/Bundle/FrameworkBundle/KernelBrowser.php
+++ b/src/Symfony/Bundle/FrameworkBundle/KernelBrowser.php
@@ -77,5 +77,5 @@ class KernelBrowser extends HttpKernelBrowser
      * @return void
      */
-    public function enableProfiler()
+    public function enableProfiler(): void
     {
         if ($this->getContainer()->has('profiler')) {
@@ -92,5 +92,5 @@ class KernelBrowser extends HttpKernelBrowser
      * @return void
      */
-    public function disableReboot()
+    public function disableReboot(): void
     {
         $this->reboot = false;
@@ -102,5 +102,5 @@ class KernelBrowser extends HttpKernelBrowser
      * @return void
      */
-    public function enableReboot()
+    public function enableReboot(): void
     {
         $this->reboot = true;
diff --git a/src/Symfony/Bundle/FrameworkBundle/Routing/AnnotatedRouteControllerLoader.php b/src/Symfony/Bundle/FrameworkBundle/Routing/AnnotatedRouteControllerLoader.php
index ec03f84979..498dc24d1c 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Routing/AnnotatedRouteControllerLoader.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Routing/AnnotatedRouteControllerLoader.php
@@ -28,5 +28,5 @@ class AnnotatedRouteControllerLoader extends AnnotationClassLoader
      * @return void
      */
-    protected function configureRoute(Route $route, \ReflectionClass $class, \ReflectionMethod $method, object $annot)
+    protected function configureRoute(Route $route, \ReflectionClass $class, \ReflectionMethod $method, object $annot): void
     {
         if ('__invoke' === $method->getName()) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/Secrets/AbstractVault.php b/src/Symfony/Bundle/FrameworkBundle/Secrets/AbstractVault.php
index b3eb0c6bc3..c47152f219 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Secrets/AbstractVault.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Secrets/AbstractVault.php
@@ -44,5 +44,5 @@ abstract class AbstractVault
      * @return string
      */
-    protected function getPrettyPath(string $path)
+    protected function getPrettyPath(string $path): string
     {
         return str_replace(getcwd().\DIRECTORY_SEPARATOR, '', $path);
diff --git a/src/Symfony/Bundle/FrameworkBundle/Test/KernelTestCase.php b/src/Symfony/Bundle/FrameworkBundle/Test/KernelTestCase.php
index bb5560a7b5..be86cbf98e 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Test/KernelTestCase.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Test/KernelTestCase.php
@@ -88,5 +88,5 @@ abstract class KernelTestCase extends TestCase
      * @return Container
      */
-    protected static function getContainer(): ContainerInterface
+    protected static function getContainer(): Container
     {
         if (!static::$booted) {
diff --git a/src/Symfony/Bundle/FrameworkBundle/Translation/Translator.php b/src/Symfony/Bundle/FrameworkBundle/Translation/Translator.php
index dac3b6394f..d319cb0824 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Translation/Translator.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Translation/Translator.php
@@ -122,5 +122,5 @@ class Translator extends BaseTranslator implements WarmableInterface
      * @return void
      */
-    public function addResource(string $format, mixed $resource, string $locale, string $domain = null)
+    public function addResource(string $format, mixed $resource, string $locale, string $domain = null): void
     {
         if ($this->resourceFiles) {
@@ -133,5 +133,5 @@ class Translator extends BaseTranslator implements WarmableInterface
      * @return void
      */
-    protected function initializeCatalogue(string $locale)
+    protected function initializeCatalogue(string $locale): void
     {
         $this->initialize();
@@ -155,5 +155,5 @@ class Translator extends BaseTranslator implements WarmableInterface
      * @return void
      */
-    protected function initialize()
+    protected function initialize(): void
     {
         if ($this->resourceFiles) {
diff --git a/src/Symfony/Bundle/SecurityBundle/Debug/TraceableFirewallListener.php b/src/Symfony/Bundle/SecurityBundle/Debug/TraceableFirewallListener.php
index bb5fe03096..e756cd7957 100644
--- a/src/Symfony/Bundle/SecurityBundle/Debug/TraceableFirewallListener.php
+++ b/src/Symfony/Bundle/SecurityBundle/Debug/TraceableFirewallListener.php
@@ -32,5 +32,5 @@ final class TraceableFirewallListener extends FirewallListener
      * @return array
      */
-    public function getWrappedListeners()
+    public function getWrappedListeners(): array
     {
         return $this->wrappedListeners;
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php
index 08d7fd9213..8bacecce11 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddExpressionLanguageProvidersPass.php
@@ -26,5 +26,5 @@ class AddExpressionLanguageProvidersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if ($container->has('security.expression_language')) {
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSecurityVotersPass.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSecurityVotersPass.php
index 8a2bad79a1..324fd00970 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSecurityVotersPass.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSecurityVotersPass.php
@@ -33,5 +33,5 @@ class AddSecurityVotersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('security.access.decision_manager')) {
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSessionDomainConstraintPass.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSessionDomainConstraintPass.php
index 9a7a94ca08..bc4baa0f65 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSessionDomainConstraintPass.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/AddSessionDomainConstraintPass.php
@@ -25,5 +25,5 @@ class AddSessionDomainConstraintPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasParameter('session.storage.options') || !$container->has('security.http_utils')) {
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/CleanRememberMeVerifierPass.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/CleanRememberMeVerifierPass.php
index 2041a36b38..d54311d5de 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/CleanRememberMeVerifierPass.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/CleanRememberMeVerifierPass.php
@@ -25,5 +25,5 @@ class CleanRememberMeVerifierPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('cache.system')) {
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/MakeFirewallsEventDispatcherTraceablePass.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/MakeFirewallsEventDispatcherTraceablePass.php
index e7c77d1ec3..419e18f6f0 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/MakeFirewallsEventDispatcherTraceablePass.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/MakeFirewallsEventDispatcherTraceablePass.php
@@ -26,5 +26,5 @@ class MakeFirewallsEventDispatcherTraceablePass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->has('event_dispatcher') || !$container->hasParameter('security.firewalls')) {
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/RegisterEntryPointPass.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/RegisterEntryPointPass.php
index 3ca2a70acb..2ba4a41499 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/RegisterEntryPointPass.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Compiler/RegisterEntryPointPass.php
@@ -27,5 +27,5 @@ class RegisterEntryPointPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasParameter('security.firewalls')) {
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AbstractFactory.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AbstractFactory.php
index 24eb1377c5..6367585643 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AbstractFactory.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AbstractFactory.php
@@ -56,5 +56,5 @@ abstract class AbstractFactory implements AuthenticatorFactoryInterface
      * @return void
      */
-    public function addConfiguration(NodeDefinition $node)
+    public function addConfiguration(NodeDefinition $node): void
     {
         $builder = $node->children();
@@ -79,5 +79,5 @@ abstract class AbstractFactory implements AuthenticatorFactoryInterface
      * @return string
      */
-    protected function createAuthenticationSuccessHandler(ContainerBuilder $container, string $id, array $config)
+    protected function createAuthenticationSuccessHandler(ContainerBuilder $container, string $id, array $config): string
     {
         $successHandlerId = $this->getSuccessHandlerId($id);
@@ -101,5 +101,5 @@ abstract class AbstractFactory implements AuthenticatorFactoryInterface
      * @return string
      */
-    protected function createAuthenticationFailureHandler(ContainerBuilder $container, string $id, array $config)
+    protected function createAuthenticationFailureHandler(ContainerBuilder $container, string $id, array $config): string
     {
         $id = $this->getFailureHandlerId($id);
@@ -121,5 +121,5 @@ abstract class AbstractFactory implements AuthenticatorFactoryInterface
      * @return string
      */
-    protected function getSuccessHandlerId(string $id)
+    protected function getSuccessHandlerId(string $id): string
     {
         return 'security.authentication.success_handler.'.$id.'.'.str_replace('-', '_', $this->getKey());
@@ -129,5 +129,5 @@ abstract class AbstractFactory implements AuthenticatorFactoryInterface
      * @return string
      */
-    protected function getFailureHandlerId(string $id)
+    protected function getFailureHandlerId(string $id): string
     {
         return 'security.authentication.failure_handler.'.$id.'.'.str_replace('-', '_', $this->getKey());
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AuthenticatorFactoryInterface.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AuthenticatorFactoryInterface.php
index 8082b6f352..bd9e1cff26 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AuthenticatorFactoryInterface.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AuthenticatorFactoryInterface.php
@@ -34,5 +34,5 @@ interface AuthenticatorFactoryInterface
      * @return void
      */
-    public function addConfiguration(NodeDefinition $builder);
+    public function addConfiguration(NodeDefinition $builder): void;
 
     /**
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/InMemoryFactory.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/InMemoryFactory.php
index 936f58a084..1a3c89381b 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/InMemoryFactory.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/InMemoryFactory.php
@@ -28,5 +28,5 @@ class InMemoryFactory implements UserProviderFactoryInterface
      * @return void
      */
-    public function create(ContainerBuilder $container, string $id, array $config)
+    public function create(ContainerBuilder $container, string $id, array $config): void
     {
         $definition = $container->setDefinition($id, new ChildDefinition('security.user.provider.in_memory'));
@@ -44,5 +44,5 @@ class InMemoryFactory implements UserProviderFactoryInterface
      * @return string
      */
-    public function getKey()
+    public function getKey(): string
     {
         return 'memory';
@@ -52,5 +52,5 @@ class InMemoryFactory implements UserProviderFactoryInterface
      * @return void
      */
-    public function addConfiguration(NodeDefinition $node)
+    public function addConfiguration(NodeDefinition $node): void
     {
         $node
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/LdapFactory.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/LdapFactory.php
index 2f4dca01d1..ca99ad286f 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/LdapFactory.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/LdapFactory.php
@@ -28,5 +28,5 @@ class LdapFactory implements UserProviderFactoryInterface
      * @return void
      */
-    public function create(ContainerBuilder $container, string $id, array $config)
+    public function create(ContainerBuilder $container, string $id, array $config): void
     {
         $container
@@ -47,5 +47,5 @@ class LdapFactory implements UserProviderFactoryInterface
      * @return string
      */
-    public function getKey()
+    public function getKey(): string
     {
         return 'ldap';
@@ -55,5 +55,5 @@ class LdapFactory implements UserProviderFactoryInterface
      * @return void
      */
-    public function addConfiguration(NodeDefinition $node)
+    public function addConfiguration(NodeDefinition $node): void
     {
         $node
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/UserProviderFactoryInterface.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/UserProviderFactoryInterface.php
index a2c5815e4b..1c9721ccc6 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/UserProviderFactoryInterface.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/UserProviderFactoryInterface.php
@@ -26,14 +26,14 @@ interface UserProviderFactoryInterface
      * @return void
      */
-    public function create(ContainerBuilder $container, string $id, array $config);
+    public function create(ContainerBuilder $container, string $id, array $config): void;
 
     /**
      * @return string
      */
-    public function getKey();
+    public function getKey(): string;
 
     /**
      * @return void
      */
-    public function addConfiguration(NodeDefinition $builder);
+    public function addConfiguration(NodeDefinition $builder): void;
 }
diff --git a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/SecurityExtension.php b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/SecurityExtension.php
index 37978b285f..ca1f5ae517 100644
--- a/src/Symfony/Bundle/SecurityBundle/DependencyInjection/SecurityExtension.php
+++ b/src/Symfony/Bundle/SecurityBundle/DependencyInjection/SecurityExtension.php
@@ -82,5 +82,5 @@ class SecurityExtension extends Extension implements PrependExtensionInterface
      * @return void
      */
-    public function prepend(ContainerBuilder $container)
+    public function prepend(ContainerBuilder $container): void
     {
         foreach ($this->getSortedFactories() as $factory) {
@@ -94,5 +94,5 @@ class SecurityExtension extends Extension implements PrependExtensionInterface
      * @return void
      */
-    public function load(array $configs, ContainerBuilder $container)
+    public function load(array $configs, ContainerBuilder $container): void
     {
         if (!array_filter($configs)) {
diff --git a/src/Symfony/Bundle/SecurityBundle/EventListener/FirewallListener.php b/src/Symfony/Bundle/SecurityBundle/EventListener/FirewallListener.php
index 0c703f79cf..7d9e956580 100644
--- a/src/Symfony/Bundle/SecurityBundle/EventListener/FirewallListener.php
+++ b/src/Symfony/Bundle/SecurityBundle/EventListener/FirewallListener.php
@@ -40,5 +40,5 @@ class FirewallListener extends Firewall
      * @return void
      */
-    public function configureLogoutUrlGenerator(RequestEvent $event)
+    public function configureLogoutUrlGenerator(RequestEvent $event): void
     {
         if (!$event->isMainRequest()) {
@@ -54,5 +54,5 @@ class FirewallListener extends Firewall
      * @return void
      */
-    public function onKernelFinishRequest(FinishRequestEvent $event)
+    public function onKernelFinishRequest(FinishRequestEvent $event): void
     {
         if ($event->isMainRequest()) {
diff --git a/src/Symfony/Bundle/SecurityBundle/Security/FirewallContext.php b/src/Symfony/Bundle/SecurityBundle/Security/FirewallContext.php
index 5077c6768d..bd741840f4 100644
--- a/src/Symfony/Bundle/SecurityBundle/Security/FirewallContext.php
+++ b/src/Symfony/Bundle/SecurityBundle/Security/FirewallContext.php
@@ -42,5 +42,5 @@ class FirewallContext
      * @return FirewallConfig|null
      */
-    public function getConfig()
+    public function getConfig(): ?FirewallConfig
     {
         return $this->config;
@@ -58,5 +58,5 @@ class FirewallContext
      * @return ExceptionListener|null
      */
-    public function getExceptionListener()
+    public function getExceptionListener(): ?ExceptionListener
     {
         return $this->exceptionListener;
@@ -66,5 +66,5 @@ class FirewallContext
      * @return LogoutListener|null
      */
-    public function getLogoutListener()
+    public function getLogoutListener(): ?LogoutListener
     {
         return $this->logoutListener;
diff --git a/src/Symfony/Bundle/SecurityBundle/SecurityBundle.php b/src/Symfony/Bundle/SecurityBundle/SecurityBundle.php
index 2cbca705f9..42cfdb0ff0 100644
--- a/src/Symfony/Bundle/SecurityBundle/SecurityBundle.php
+++ b/src/Symfony/Bundle/SecurityBundle/SecurityBundle.php
@@ -60,5 +60,5 @@ class SecurityBundle extends Bundle
      * @return void
      */
-    public function build(ContainerBuilder $container)
+    public function build(ContainerBuilder $container): void
     {
         parent::build($container);
diff --git a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/ExtensionPass.php b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/ExtensionPass.php
index 63dd68e91b..48889647a1 100644
--- a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/ExtensionPass.php
+++ b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/ExtensionPass.php
@@ -29,5 +29,5 @@ class ExtensionPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!class_exists(Packages::class)) {
diff --git a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/RuntimeLoaderPass.php b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/RuntimeLoaderPass.php
index ecb99ce20e..212ebbc96f 100644
--- a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/RuntimeLoaderPass.php
+++ b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/RuntimeLoaderPass.php
@@ -25,5 +25,5 @@ class RuntimeLoaderPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('twig.runtime_loader')) {
diff --git a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigEnvironmentPass.php b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigEnvironmentPass.php
index 99b975edea..2c9e2d326d 100644
--- a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigEnvironmentPass.php
+++ b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigEnvironmentPass.php
@@ -28,5 +28,5 @@ class TwigEnvironmentPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (false === $container->hasDefinition('twig')) {
diff --git a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigLoaderPass.php b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigLoaderPass.php
index 1da7e86797..eb6df32373 100644
--- a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigLoaderPass.php
+++ b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Compiler/TwigLoaderPass.php
@@ -27,5 +27,5 @@ class TwigLoaderPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (false === $container->hasDefinition('twig')) {
diff --git a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Configurator/EnvironmentConfigurator.php b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Configurator/EnvironmentConfigurator.php
index b3eec9ff60..742be71a64 100644
--- a/src/Symfony/Bundle/TwigBundle/DependencyInjection/Configurator/EnvironmentConfigurator.php
+++ b/src/Symfony/Bundle/TwigBundle/DependencyInjection/Configurator/EnvironmentConfigurator.php
@@ -46,5 +46,5 @@ class EnvironmentConfigurator
      * @return void
      */
-    public function configure(Environment $environment)
+    public function configure(Environment $environment): void
     {
         $environment->getExtension(CoreExtension::class)->setDateFormat($this->dateFormat, $this->intervalFormat);
diff --git a/src/Symfony/Bundle/TwigBundle/DependencyInjection/TwigExtension.php b/src/Symfony/Bundle/TwigBundle/DependencyInjection/TwigExtension.php
index f257f60298..b76392370a 100644
--- a/src/Symfony/Bundle/TwigBundle/DependencyInjection/TwigExtension.php
+++ b/src/Symfony/Bundle/TwigBundle/DependencyInjection/TwigExtension.php
@@ -40,5 +40,5 @@ class TwigExtension extends Extension
      * @return void
      */
-    public function load(array $configs, ContainerBuilder $container)
+    public function load(array $configs, ContainerBuilder $container): void
     {
         $loader = new PhpFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));
diff --git a/src/Symfony/Bundle/TwigBundle/TwigBundle.php b/src/Symfony/Bundle/TwigBundle/TwigBundle.php
index 802cb536d1..d7e1017875 100644
--- a/src/Symfony/Bundle/TwigBundle/TwigBundle.php
+++ b/src/Symfony/Bundle/TwigBundle/TwigBundle.php
@@ -31,5 +31,5 @@ class TwigBundle extends Bundle
      * @return void
      */
-    public function build(ContainerBuilder $container)
+    public function build(ContainerBuilder $container): void
     {
         parent::build($container);
@@ -45,5 +45,5 @@ class TwigBundle extends Bundle
      * @return void
      */
-    public function registerCommands(Application $application)
+    public function registerCommands(Application $application): void
     {
         // noop
diff --git a/src/Symfony/Bundle/WebProfilerBundle/DependencyInjection/WebProfilerExtension.php b/src/Symfony/Bundle/WebProfilerBundle/DependencyInjection/WebProfilerExtension.php
index 16e6db29ee..1420b29c99 100644
--- a/src/Symfony/Bundle/WebProfilerBundle/DependencyInjection/WebProfilerExtension.php
+++ b/src/Symfony/Bundle/WebProfilerBundle/DependencyInjection/WebProfilerExtension.php
@@ -41,5 +41,5 @@ class WebProfilerExtension extends Extension
      * @return void
      */
-    public function load(array $configs, ContainerBuilder $container)
+    public function load(array $configs, ContainerBuilder $container): void
     {
         $configuration = $this->getConfiguration($configs, $container);
diff --git a/src/Symfony/Bundle/WebProfilerBundle/WebProfilerBundle.php b/src/Symfony/Bundle/WebProfilerBundle/WebProfilerBundle.php
index 264b26c925..2dbc40c735 100644
--- a/src/Symfony/Bundle/WebProfilerBundle/WebProfilerBundle.php
+++ b/src/Symfony/Bundle/WebProfilerBundle/WebProfilerBundle.php
@@ -22,5 +22,5 @@ class WebProfilerBundle extends Bundle
      * @return void
      */
-    public function boot()
+    public function boot(): void
     {
         if ('prod' === $this->container->getParameter('kernel.environment')) {
diff --git a/src/Symfony/Component/Asset/Packages.php b/src/Symfony/Component/Asset/Packages.php
index cffea43c49..0645fbd756 100644
--- a/src/Symfony/Component/Asset/Packages.php
+++ b/src/Symfony/Component/Asset/Packages.php
@@ -41,5 +41,5 @@ class Packages
      * @return void
      */
-    public function setDefaultPackage(PackageInterface $defaultPackage)
+    public function setDefaultPackage(PackageInterface $defaultPackage): void
     {
         $this->defaultPackage = $defaultPackage;
@@ -49,5 +49,5 @@ class Packages
      * @return void
      */
-    public function addPackage(string $name, PackageInterface $package)
+    public function addPackage(string $name, PackageInterface $package): void
     {
         $this->packages[$name] = $package;
diff --git a/src/Symfony/Component/BrowserKit/AbstractBrowser.php b/src/Symfony/Component/BrowserKit/AbstractBrowser.php
index 5c263e6fac..3482ed2397 100644
--- a/src/Symfony/Component/BrowserKit/AbstractBrowser.php
+++ b/src/Symfony/Component/BrowserKit/AbstractBrowser.php
@@ -67,5 +67,5 @@ abstract class AbstractBrowser
      * @return void
      */
-    public function followRedirects(bool $followRedirects = true)
+    public function followRedirects(bool $followRedirects = true): void
     {
         $this->followRedirects = $followRedirects;
@@ -77,5 +77,5 @@ abstract class AbstractBrowser
      * @return void
      */
-    public function followMetaRefresh(bool $followMetaRefresh = true)
+    public function followMetaRefresh(bool $followMetaRefresh = true): void
     {
         $this->followMetaRefresh = $followMetaRefresh;
@@ -95,5 +95,5 @@ abstract class AbstractBrowser
      * @return void
      */
-    public function setMaxRedirects(int $maxRedirects)
+    public function setMaxRedirects(int $maxRedirects): void
     {
         $this->maxRedirects = $maxRedirects < 0 ? -1 : $maxRedirects;
@@ -116,5 +116,5 @@ abstract class AbstractBrowser
      * @throws LogicException When Symfony Process Component is not installed
      */
-    public function insulate(bool $insulated = true)
+    public function insulate(bool $insulated = true): void
     {
         if ($insulated && !class_exists(\Symfony\Component\Process\Process::class)) {
@@ -130,5 +130,5 @@ abstract class AbstractBrowser
      * @return void
      */
-    public function setServerParameters(array $server)
+    public function setServerParameters(array $server): void
     {
         $this->server = array_merge([
@@ -142,5 +142,5 @@ abstract class AbstractBrowser
      * @return void
      */
-    public function setServerParameter(string $key, string $value)
+    public function setServerParameter(string $key, string $value): void
     {
         $this->server[$key] = $value;
@@ -441,5 +441,5 @@ abstract class AbstractBrowser
      * @throws \RuntimeException When processing returns exit code
      */
-    protected function doRequestInProcess(object $request)
+    protected function doRequestInProcess(object $request): object
     {
         $deprecationsFile = tempnam(sys_get_temp_dir(), 'deprec');
@@ -474,5 +474,5 @@ abstract class AbstractBrowser
      * @return object
      */
-    abstract protected function doRequest(object $request);
+    abstract protected function doRequest(object $request): object;
 
     /**
@@ -485,5 +485,5 @@ abstract class AbstractBrowser
      * @throws LogicException When this abstract class is not implemented
      */
-    protected function getScript(object $request)
+    protected function getScript(object $request): string
     {
         throw new LogicException('To insulate requests, you need to override the getScript() method.');
@@ -495,5 +495,5 @@ abstract class AbstractBrowser
      * @return object
      */
-    protected function filterRequest(Request $request)
+    protected function filterRequest(Request $request): object
     {
         return $request;
@@ -505,5 +505,5 @@ abstract class AbstractBrowser
      * @return Response
      */
-    protected function filterResponse(object $response)
+    protected function filterResponse(object $response): Response
     {
         return $response;
@@ -630,5 +630,5 @@ abstract class AbstractBrowser
      * @return void
      */
-    public function restart()
+    public function restart(): void
     {
         $this->cookieJar->clear();
diff --git a/src/Symfony/Component/BrowserKit/CookieJar.php b/src/Symfony/Component/BrowserKit/CookieJar.php
index f851f81363..311a9f4eee 100644
--- a/src/Symfony/Component/BrowserKit/CookieJar.php
+++ b/src/Symfony/Component/BrowserKit/CookieJar.php
@@ -26,5 +26,5 @@ class CookieJar
      * @return void
      */
-    public function set(Cookie $cookie)
+    public function set(Cookie $cookie): void
     {
         $this->cookieJar[$cookie->getDomain()][$cookie->getPath()][$cookie->getName()] = $cookie;
@@ -73,5 +73,5 @@ class CookieJar
      * @return void
      */
-    public function expire(string $name, ?string $path = '/', string $domain = null)
+    public function expire(string $name, ?string $path = '/', string $domain = null): void
     {
         $path ??= '/';
@@ -103,5 +103,5 @@ class CookieJar
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->cookieJar = [];
@@ -115,5 +115,5 @@ class CookieJar
      * @return void
      */
-    public function updateFromSetCookie(array $setCookies, string $uri = null)
+    public function updateFromSetCookie(array $setCookies, string $uri = null): void
     {
         $cookies = [];
@@ -143,5 +143,5 @@ class CookieJar
      * @return void
      */
-    public function updateFromResponse(Response $response, string $uri = null)
+    public function updateFromResponse(Response $response, string $uri = null): void
     {
         $this->updateFromSetCookie($response->getHeader('Set-Cookie', false), $uri);
@@ -217,5 +217,5 @@ class CookieJar
      * @return void
      */
-    public function flushExpiredCookies()
+    public function flushExpiredCookies(): void
     {
         foreach ($this->cookieJar as $domain => $pathCookies) {
diff --git a/src/Symfony/Component/BrowserKit/History.php b/src/Symfony/Component/BrowserKit/History.php
index 7fce4e32b0..a7f192c5e3 100644
--- a/src/Symfony/Component/BrowserKit/History.php
+++ b/src/Symfony/Component/BrowserKit/History.php
@@ -29,5 +29,5 @@ class History
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->stack = [];
@@ -40,5 +40,5 @@ class History
      * @return void
      */
-    public function add(Request $request)
+    public function add(Request $request): void
     {
         $this->stack = \array_slice($this->stack, 0, $this->position + 1);
diff --git a/src/Symfony/Component/BrowserKit/Tests/TestClient.php b/src/Symfony/Component/BrowserKit/Tests/TestClient.php
index c98c650298..47c76ad5e5 100644
--- a/src/Symfony/Component/BrowserKit/Tests/TestClient.php
+++ b/src/Symfony/Component/BrowserKit/Tests/TestClient.php
@@ -42,5 +42,5 @@ class TestClient extends AbstractBrowser
     }
 
-    protected function getScript(object $request)
+    protected function getScript(object $request): string
     {
         $r = new \ReflectionClass(Response::class);
diff --git a/src/Symfony/Component/BrowserKit/Tests/TestHttpClient.php b/src/Symfony/Component/BrowserKit/Tests/TestHttpClient.php
index afb0197c91..7a3c9a7ec6 100644
--- a/src/Symfony/Component/BrowserKit/Tests/TestHttpClient.php
+++ b/src/Symfony/Component/BrowserKit/Tests/TestHttpClient.php
@@ -65,5 +65,5 @@ class TestHttpClient extends HttpBrowser
     }
 
-    protected function getScript(object $request)
+    protected function getScript(object $request): string
     {
         $r = new \ReflectionClass(Response::class);
diff --git a/src/Symfony/Component/Cache/Adapter/ApcuAdapter.php b/src/Symfony/Component/Cache/Adapter/ApcuAdapter.php
index 3dc93fd541..8a7df7a19b 100644
--- a/src/Symfony/Component/Cache/Adapter/ApcuAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/ApcuAdapter.php
@@ -51,5 +51,5 @@ class ApcuAdapter extends AbstractAdapter
      * @return bool
      */
-    public static function isSupported()
+    public static function isSupported(): bool
     {
         return \function_exists('apcu_fetch') && filter_var(\ini_get('apc.enabled'), \FILTER_VALIDATE_BOOL);
diff --git a/src/Symfony/Component/Cache/Adapter/ArrayAdapter.php b/src/Symfony/Component/Cache/Adapter/ArrayAdapter.php
index 319dc0487b..6a4f825360 100644
--- a/src/Symfony/Component/Cache/Adapter/ArrayAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/ArrayAdapter.php
@@ -264,5 +264,5 @@ class ArrayAdapter implements AdapterInterface, CacheInterface, LoggerAwareInter
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->clear();
diff --git a/src/Symfony/Component/Cache/Adapter/ChainAdapter.php b/src/Symfony/Component/Cache/Adapter/ChainAdapter.php
index ffaa56f3ed..c63206e18d 100644
--- a/src/Symfony/Component/Cache/Adapter/ChainAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/ChainAdapter.php
@@ -284,5 +284,5 @@ class ChainAdapter implements AdapterInterface, CacheInterface, PruneableInterfa
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         foreach ($this->adapters as $adapter) {
diff --git a/src/Symfony/Component/Cache/Adapter/MemcachedAdapter.php b/src/Symfony/Component/Cache/Adapter/MemcachedAdapter.php
index 054f6d1957..68731fb028 100644
--- a/src/Symfony/Component/Cache/Adapter/MemcachedAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/MemcachedAdapter.php
@@ -71,5 +71,5 @@ class MemcachedAdapter extends AbstractAdapter
      * @return bool
      */
-    public static function isSupported()
+    public static function isSupported(): bool
     {
         return \extension_loaded('memcached') && version_compare(phpversion('memcached'), '3.1.6', '>=');
diff --git a/src/Symfony/Component/Cache/Adapter/PdoAdapter.php b/src/Symfony/Component/Cache/Adapter/PdoAdapter.php
index dfffb3bd13..e4384af6cc 100644
--- a/src/Symfony/Component/Cache/Adapter/PdoAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/PdoAdapter.php
@@ -101,5 +101,5 @@ class PdoAdapter extends AbstractAdapter implements PruneableInterface
      * @throws \DomainException When an unsupported PDO driver is used
      */
-    public function createTable()
+    public function createTable(): void
     {
         // connect if we are not yet
diff --git a/src/Symfony/Component/Cache/Adapter/PhpFilesAdapter.php b/src/Symfony/Component/Cache/Adapter/PhpFilesAdapter.php
index 6e4e1dffa3..bab8a91ca4 100644
--- a/src/Symfony/Component/Cache/Adapter/PhpFilesAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/PhpFilesAdapter.php
@@ -58,5 +58,5 @@ class PhpFilesAdapter extends AbstractAdapter implements PruneableInterface
      * @return bool
      */
-    public static function isSupported()
+    public static function isSupported(): bool
     {
         self::$startTime ??= $_SERVER['REQUEST_TIME'] ?? time();
@@ -281,5 +281,5 @@ class PhpFilesAdapter extends AbstractAdapter implements PruneableInterface
      * @return bool
      */
-    protected function doUnlink(string $file)
+    protected function doUnlink(string $file): bool
     {
         unset(self::$valuesCache[$file]);
diff --git a/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php b/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php
index f64ac99c11..84d32fb424 100644
--- a/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/TagAwareAdapter.php
@@ -283,5 +283,5 @@ class TagAwareAdapter implements TagAwareAdapterInterface, TagAwareCacheInterfac
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->commit();
diff --git a/src/Symfony/Component/Cache/Adapter/TraceableAdapter.php b/src/Symfony/Component/Cache/Adapter/TraceableAdapter.php
index 118b009099..ba388b3ad8 100644
--- a/src/Symfony/Component/Cache/Adapter/TraceableAdapter.php
+++ b/src/Symfony/Component/Cache/Adapter/TraceableAdapter.php
@@ -196,5 +196,5 @@ class TraceableAdapter implements AdapterInterface, CacheInterface, PruneableInt
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         if ($this->pool instanceof ResetInterface) {
@@ -218,5 +218,5 @@ class TraceableAdapter implements AdapterInterface, CacheInterface, PruneableInt
      * @return array
      */
-    public function getCalls()
+    public function getCalls(): array
     {
         return $this->calls;
@@ -226,5 +226,5 @@ class TraceableAdapter implements AdapterInterface, CacheInterface, PruneableInt
      * @return void
      */
-    public function clearCalls()
+    public function clearCalls(): void
     {
         $this->calls = [];
@@ -239,5 +239,5 @@ class TraceableAdapter implements AdapterInterface, CacheInterface, PruneableInt
      * @return TraceableAdapterEvent
      */
-    protected function start(string $name)
+    protected function start(string $name): TraceableAdapterEvent
     {
         $this->calls[] = $event = new TraceableAdapterEvent();
diff --git a/src/Symfony/Component/Cache/DependencyInjection/CacheCollectorPass.php b/src/Symfony/Component/Cache/DependencyInjection/CacheCollectorPass.php
index b50ca12308..6c39f61e89 100644
--- a/src/Symfony/Component/Cache/DependencyInjection/CacheCollectorPass.php
+++ b/src/Symfony/Component/Cache/DependencyInjection/CacheCollectorPass.php
@@ -30,5 +30,5 @@ class CacheCollectorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('data_collector.cache')) {
diff --git a/src/Symfony/Component/Cache/DependencyInjection/CachePoolClearerPass.php b/src/Symfony/Component/Cache/DependencyInjection/CachePoolClearerPass.php
index 6793bea94c..230575ef42 100644
--- a/src/Symfony/Component/Cache/DependencyInjection/CachePoolClearerPass.php
+++ b/src/Symfony/Component/Cache/DependencyInjection/CachePoolClearerPass.php
@@ -24,5 +24,5 @@ class CachePoolClearerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $container->getParameterBag()->remove('cache.prefix.seed');
diff --git a/src/Symfony/Component/Cache/DependencyInjection/CachePoolPass.php b/src/Symfony/Component/Cache/DependencyInjection/CachePoolPass.php
index 5055ba9918..3d92c9844f 100644
--- a/src/Symfony/Component/Cache/DependencyInjection/CachePoolPass.php
+++ b/src/Symfony/Component/Cache/DependencyInjection/CachePoolPass.php
@@ -33,5 +33,5 @@ class CachePoolPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if ($container->hasParameter('cache.prefix.seed')) {
diff --git a/src/Symfony/Component/Cache/DependencyInjection/CachePoolPrunerPass.php b/src/Symfony/Component/Cache/DependencyInjection/CachePoolPrunerPass.php
index 00e912686b..58872ec2bc 100644
--- a/src/Symfony/Component/Cache/DependencyInjection/CachePoolPrunerPass.php
+++ b/src/Symfony/Component/Cache/DependencyInjection/CachePoolPrunerPass.php
@@ -27,5 +27,5 @@ class CachePoolPrunerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('console.command.cache_pool_prune')) {
diff --git a/src/Symfony/Component/Cache/Traits/FilesystemCommonTrait.php b/src/Symfony/Component/Cache/Traits/FilesystemCommonTrait.php
index 200406a564..0bad73fe6a 100644
--- a/src/Symfony/Component/Cache/Traits/FilesystemCommonTrait.php
+++ b/src/Symfony/Component/Cache/Traits/FilesystemCommonTrait.php
@@ -81,5 +81,5 @@ trait FilesystemCommonTrait
      * @return bool
      */
-    protected function doUnlink(string $file)
+    protected function doUnlink(string $file): bool
     {
         return @unlink($file);
diff --git a/src/Symfony/Component/Config/ConfigCacheInterface.php b/src/Symfony/Component/Config/ConfigCacheInterface.php
index be7f0986c3..fa5347e34b 100644
--- a/src/Symfony/Component/Config/ConfigCacheInterface.php
+++ b/src/Symfony/Component/Config/ConfigCacheInterface.php
@@ -44,4 +44,4 @@ interface ConfigCacheInterface
      * @throws \RuntimeException When the cache file cannot be written
      */
-    public function write(string $content, array $metadata = null);
+    public function write(string $content, array $metadata = null): void;
 }
diff --git a/src/Symfony/Component/Config/Definition/ArrayNode.php b/src/Symfony/Component/Config/Definition/ArrayNode.php
index 1448220cdd..12935fb079 100644
--- a/src/Symfony/Component/Config/Definition/ArrayNode.php
+++ b/src/Symfony/Component/Config/Definition/ArrayNode.php
@@ -36,5 +36,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setNormalizeKeys(bool $normalizeKeys)
+    public function setNormalizeKeys(bool $normalizeKeys): void
     {
         $this->normalizeKeys = $normalizeKeys;
@@ -84,5 +84,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setXmlRemappings(array $remappings)
+    public function setXmlRemappings(array $remappings): void
     {
         $this->xmlRemappings = $remappings;
@@ -105,5 +105,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setAddIfNotSet(bool $boolean)
+    public function setAddIfNotSet(bool $boolean): void
     {
         $this->addIfNotSet = $boolean;
@@ -115,5 +115,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setAllowFalse(bool $allow)
+    public function setAllowFalse(bool $allow): void
     {
         $this->allowFalse = $allow;
@@ -125,5 +125,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setAllowNewKeys(bool $allow)
+    public function setAllowNewKeys(bool $allow): void
     {
         $this->allowNewKeys = $allow;
@@ -135,5 +135,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setPerformDeepMerging(bool $boolean)
+    public function setPerformDeepMerging(bool $boolean): void
     {
         $this->performDeepMerging = $boolean;
@@ -148,5 +148,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setIgnoreExtraKeys(bool $boolean, bool $remove = true)
+    public function setIgnoreExtraKeys(bool $boolean, bool $remove = true): void
     {
         $this->ignoreExtraKeys = $boolean;
@@ -165,5 +165,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -199,5 +199,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @throws \InvalidArgumentException when the child node's name is not unique
      */
-    public function addChild(NodeInterface $node)
+    public function addChild(NodeInterface $node): void
     {
         $name = $node->getName();
@@ -262,5 +262,5 @@ class ArrayNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
         if (!\is_array($value) && (!$this->allowFalse || false !== $value)) {
diff --git a/src/Symfony/Component/Config/Definition/BaseNode.php b/src/Symfony/Component/Config/Definition/BaseNode.php
index 85f0f7eebd..f2c3ca0d0d 100644
--- a/src/Symfony/Component/Config/Definition/BaseNode.php
+++ b/src/Symfony/Component/Config/Definition/BaseNode.php
@@ -102,5 +102,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setAttribute(string $key, mixed $value)
+    public function setAttribute(string $key, mixed $value): void
     {
         $this->attributes[$key] = $value;
@@ -125,5 +125,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setAttributes(array $attributes)
+    public function setAttributes(array $attributes): void
     {
         $this->attributes = $attributes;
@@ -133,5 +133,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function removeAttribute(string $key)
+    public function removeAttribute(string $key): void
     {
         unset($this->attributes[$key]);
@@ -143,5 +143,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setInfo(string $info)
+    public function setInfo(string $info): void
     {
         $this->setAttribute('info', $info);
@@ -161,5 +161,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setExample(string|array $example)
+    public function setExample(string|array $example): void
     {
         $this->setAttribute('example', $example);
@@ -179,5 +179,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function addEquivalentValue(mixed $originalValue, mixed $equivalentValue)
+    public function addEquivalentValue(mixed $originalValue, mixed $equivalentValue): void
     {
         $this->equivalentValues[] = [$originalValue, $equivalentValue];
@@ -189,5 +189,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setRequired(bool $boolean)
+    public function setRequired(bool $boolean): void
     {
         $this->required = $boolean;
@@ -206,5 +206,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setDeprecated(string $package, string $version, string $message = 'The child node "%node%" at path "%path%" is deprecated.')
+    public function setDeprecated(string $package, string $version, string $message = 'The child node "%node%" at path "%path%" is deprecated.'): void
     {
         $this->deprecation = [
@@ -220,5 +220,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setAllowOverwrite(bool $allow)
+    public function setAllowOverwrite(bool $allow): void
     {
         $this->allowOverwrite = $allow;
@@ -232,5 +232,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setNormalizationClosures(array $closures)
+    public function setNormalizationClosures(array $closures): void
     {
         $this->normalizationClosures = $closures;
@@ -244,5 +244,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setNormalizedTypes(array $types)
+    public function setNormalizedTypes(array $types): void
     {
         $this->normalizedTypes = $types;
@@ -266,5 +266,5 @@ abstract class BaseNode implements NodeInterface
      * @return void
      */
-    public function setFinalValidationClosures(array $closures)
+    public function setFinalValidationClosures(array $closures): void
     {
         $this->finalValidationClosures = $closures;
@@ -447,5 +447,5 @@ abstract class BaseNode implements NodeInterface
      * @throws InvalidTypeException when the value is invalid
      */
-    abstract protected function validateType(mixed $value);
+    abstract protected function validateType(mixed $value): void;
 
     /**
diff --git a/src/Symfony/Component/Config/Definition/BooleanNode.php b/src/Symfony/Component/Config/Definition/BooleanNode.php
index 7ec903cd67..9a86de2559 100644
--- a/src/Symfony/Component/Config/Definition/BooleanNode.php
+++ b/src/Symfony/Component/Config/Definition/BooleanNode.php
@@ -24,5 +24,5 @@ class BooleanNode extends ScalarNode
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
         if (!\is_bool($value)) {
diff --git a/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php b/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php
index 0110f0502f..a5754c1464 100644
--- a/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php
+++ b/src/Symfony/Component/Config/Definition/Builder/ArrayNodeDefinition.php
@@ -49,5 +49,5 @@ class ArrayNodeDefinition extends NodeDefinition implements ParentNodeDefinition
      * @return void
      */
-    public function setBuilder(NodeBuilder $builder)
+    public function setBuilder(NodeBuilder $builder): void
     {
         $this->nodeBuilder = $builder;
@@ -430,5 +430,5 @@ class ArrayNodeDefinition extends NodeDefinition implements ParentNodeDefinition
      * @throws InvalidDefinitionException
      */
-    protected function validateConcreteNode(ArrayNode $node)
+    protected function validateConcreteNode(ArrayNode $node): void
     {
         $path = $node->getPath();
@@ -462,5 +462,5 @@ class ArrayNodeDefinition extends NodeDefinition implements ParentNodeDefinition
      * @throws InvalidDefinitionException
      */
-    protected function validatePrototypeNode(PrototypedArrayNode $node)
+    protected function validatePrototypeNode(PrototypedArrayNode $node): void
     {
         $path = $node->getPath();
diff --git a/src/Symfony/Component/Config/Definition/Builder/BuilderAwareInterface.php b/src/Symfony/Component/Config/Definition/Builder/BuilderAwareInterface.php
index bb40307e17..998fb85b27 100644
--- a/src/Symfony/Component/Config/Definition/Builder/BuilderAwareInterface.php
+++ b/src/Symfony/Component/Config/Definition/Builder/BuilderAwareInterface.php
@@ -24,4 +24,4 @@ interface BuilderAwareInterface
      * @return void
      */
-    public function setBuilder(NodeBuilder $builder);
+    public function setBuilder(NodeBuilder $builder): void;
 }
diff --git a/src/Symfony/Component/Config/Definition/Builder/NodeBuilder.php b/src/Symfony/Component/Config/Definition/Builder/NodeBuilder.php
index 7cda0bc7d8..b2311826f4 100644
--- a/src/Symfony/Component/Config/Definition/Builder/NodeBuilder.php
+++ b/src/Symfony/Component/Config/Definition/Builder/NodeBuilder.php
@@ -111,5 +111,5 @@ class NodeBuilder implements NodeParentInterface
      * @return NodeDefinition&ParentNodeDefinitionInterface
      */
-    public function end()
+    public function end(): NodeDefinition&ParentNodeDefinitionInterface
     {
         return $this->parent;
diff --git a/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php b/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php
index 4f868f7031..190b720b61 100644
--- a/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php
+++ b/src/Symfony/Component/Config/Definition/Builder/TreeBuilder.php
@@ -55,5 +55,5 @@ class TreeBuilder implements NodeParentInterface
      * @return void
      */
-    public function setPathSeparator(string $separator)
+    public function setPathSeparator(string $separator): void
     {
         // unset last built as changing path separator changes all nodes
diff --git a/src/Symfony/Component/Config/Definition/ConfigurationInterface.php b/src/Symfony/Component/Config/Definition/ConfigurationInterface.php
index 7b5d443fe6..d64ae0d024 100644
--- a/src/Symfony/Component/Config/Definition/ConfigurationInterface.php
+++ b/src/Symfony/Component/Config/Definition/ConfigurationInterface.php
@@ -26,4 +26,4 @@ interface ConfigurationInterface
      * @return TreeBuilder
      */
-    public function getConfigTreeBuilder();
+    public function getConfigTreeBuilder(): TreeBuilder;
 }
diff --git a/src/Symfony/Component/Config/Definition/Dumper/XmlReferenceDumper.php b/src/Symfony/Component/Config/Definition/Dumper/XmlReferenceDumper.php
index 34f93ce07d..0e7f1317d3 100644
--- a/src/Symfony/Component/Config/Definition/Dumper/XmlReferenceDumper.php
+++ b/src/Symfony/Component/Config/Definition/Dumper/XmlReferenceDumper.php
@@ -35,5 +35,5 @@ class XmlReferenceDumper
      * @return string
      */
-    public function dump(ConfigurationInterface $configuration, string $namespace = null)
+    public function dump(ConfigurationInterface $configuration, string $namespace = null): string
     {
         return $this->dumpNode($configuration->getConfigTreeBuilder()->buildTree(), $namespace);
@@ -43,5 +43,5 @@ class XmlReferenceDumper
      * @return string
      */
-    public function dumpNode(NodeInterface $node, string $namespace = null)
+    public function dumpNode(NodeInterface $node, string $namespace = null): string
     {
         $this->reference = '';
diff --git a/src/Symfony/Component/Config/Definition/Dumper/YamlReferenceDumper.php b/src/Symfony/Component/Config/Definition/Dumper/YamlReferenceDumper.php
index 97a391adab..1a59318a40 100644
--- a/src/Symfony/Component/Config/Definition/Dumper/YamlReferenceDumper.php
+++ b/src/Symfony/Component/Config/Definition/Dumper/YamlReferenceDumper.php
@@ -34,5 +34,5 @@ class YamlReferenceDumper
      * @return string
      */
-    public function dump(ConfigurationInterface $configuration)
+    public function dump(ConfigurationInterface $configuration): string
     {
         return $this->dumpNode($configuration->getConfigTreeBuilder()->buildTree());
@@ -42,5 +42,5 @@ class YamlReferenceDumper
      * @return string
      */
-    public function dumpAtPath(ConfigurationInterface $configuration, string $path)
+    public function dumpAtPath(ConfigurationInterface $configuration, string $path): string
     {
         $rootNode = $node = $configuration->getConfigTreeBuilder()->buildTree();
@@ -71,5 +71,5 @@ class YamlReferenceDumper
      * @return string
      */
-    public function dumpNode(NodeInterface $node)
+    public function dumpNode(NodeInterface $node): string
     {
         $this->reference = '';
diff --git a/src/Symfony/Component/Config/Definition/EnumNode.php b/src/Symfony/Component/Config/Definition/EnumNode.php
index 4edeae9040..d562308fa2 100644
--- a/src/Symfony/Component/Config/Definition/EnumNode.php
+++ b/src/Symfony/Component/Config/Definition/EnumNode.php
@@ -50,5 +50,5 @@ class EnumNode extends ScalarNode
      * @return array
      */
-    public function getValues()
+    public function getValues(): array
     {
         return $this->values;
@@ -72,5 +72,5 @@ class EnumNode extends ScalarNode
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
         if ($value instanceof \UnitEnum) {
diff --git a/src/Symfony/Component/Config/Definition/Exception/InvalidConfigurationException.php b/src/Symfony/Component/Config/Definition/Exception/InvalidConfigurationException.php
index 794447bf8d..42db1e5a40 100644
--- a/src/Symfony/Component/Config/Definition/Exception/InvalidConfigurationException.php
+++ b/src/Symfony/Component/Config/Definition/Exception/InvalidConfigurationException.php
@@ -26,5 +26,5 @@ class InvalidConfigurationException extends Exception
      * @return void
      */
-    public function setPath(string $path)
+    public function setPath(string $path): void
     {
         $this->path = $path;
@@ -41,5 +41,5 @@ class InvalidConfigurationException extends Exception
      * @return void
      */
-    public function addHint(string $hint)
+    public function addHint(string $hint): void
     {
         if (!$this->containsHints) {
diff --git a/src/Symfony/Component/Config/Definition/FloatNode.php b/src/Symfony/Component/Config/Definition/FloatNode.php
index ce4193e09c..64344cadb6 100644
--- a/src/Symfony/Component/Config/Definition/FloatNode.php
+++ b/src/Symfony/Component/Config/Definition/FloatNode.php
@@ -24,5 +24,5 @@ class FloatNode extends NumericNode
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
         // Integers are also accepted, we just cast them
diff --git a/src/Symfony/Component/Config/Definition/IntegerNode.php b/src/Symfony/Component/Config/Definition/IntegerNode.php
index 4a3e3253ce..09957cd846 100644
--- a/src/Symfony/Component/Config/Definition/IntegerNode.php
+++ b/src/Symfony/Component/Config/Definition/IntegerNode.php
@@ -24,5 +24,5 @@ class IntegerNode extends NumericNode
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
         if (!\is_int($value)) {
diff --git a/src/Symfony/Component/Config/Definition/PrototypeNodeInterface.php b/src/Symfony/Component/Config/Definition/PrototypeNodeInterface.php
index 9dce7444b0..46ab38e3ff 100644
--- a/src/Symfony/Component/Config/Definition/PrototypeNodeInterface.php
+++ b/src/Symfony/Component/Config/Definition/PrototypeNodeInterface.php
@@ -24,4 +24,4 @@ interface PrototypeNodeInterface extends NodeInterface
      * @return void
      */
-    public function setName(string $name);
+    public function setName(string $name): void;
 }
diff --git a/src/Symfony/Component/Config/Definition/PrototypedArrayNode.php b/src/Symfony/Component/Config/Definition/PrototypedArrayNode.php
index c105ac1f30..1ea0880c9b 100644
--- a/src/Symfony/Component/Config/Definition/PrototypedArrayNode.php
+++ b/src/Symfony/Component/Config/Definition/PrototypedArrayNode.php
@@ -41,5 +41,5 @@ class PrototypedArrayNode extends ArrayNode
      * @return void
      */
-    public function setMinNumberOfElements(int $number)
+    public function setMinNumberOfElements(int $number): void
     {
         $this->minNumberOfElements = $number;
@@ -72,5 +72,5 @@ class PrototypedArrayNode extends ArrayNode
      * @return void
      */
-    public function setKeyAttribute(string $attribute, bool $remove = true)
+    public function setKeyAttribute(string $attribute, bool $remove = true): void
     {
         $this->keyAttribute = $attribute;
@@ -91,5 +91,5 @@ class PrototypedArrayNode extends ArrayNode
      * @return void
      */
-    public function setDefaultValue(array $value)
+    public function setDefaultValue(array $value): void
     {
         $this->defaultValue = $value;
@@ -108,5 +108,5 @@ class PrototypedArrayNode extends ArrayNode
      * @return void
      */
-    public function setAddChildrenIfNoneSet(int|string|array|null $children = ['defaults'])
+    public function setAddChildrenIfNoneSet(int|string|array|null $children = ['defaults']): void
     {
         if (null === $children) {
@@ -141,5 +141,5 @@ class PrototypedArrayNode extends ArrayNode
      * @return void
      */
-    public function setPrototype(PrototypeNodeInterface $node)
+    public function setPrototype(PrototypeNodeInterface $node): void
     {
         $this->prototype = $node;
@@ -161,5 +161,5 @@ class PrototypedArrayNode extends ArrayNode
      * @throws Exception
      */
-    public function addChild(NodeInterface $node)
+    public function addChild(NodeInterface $node): never
     {
         throw new Exception('A prototyped array node cannot have concrete children.');
diff --git a/src/Symfony/Component/Config/Definition/ScalarNode.php b/src/Symfony/Component/Config/Definition/ScalarNode.php
index e11fa1ee1c..ee27f874d0 100644
--- a/src/Symfony/Component/Config/Definition/ScalarNode.php
+++ b/src/Symfony/Component/Config/Definition/ScalarNode.php
@@ -31,5 +31,5 @@ class ScalarNode extends VariableNode
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
         if (!\is_scalar($value) && null !== $value) {
diff --git a/src/Symfony/Component/Config/Definition/VariableNode.php b/src/Symfony/Component/Config/Definition/VariableNode.php
index 6bdc65b4e7..c5a3fb4f6f 100644
--- a/src/Symfony/Component/Config/Definition/VariableNode.php
+++ b/src/Symfony/Component/Config/Definition/VariableNode.php
@@ -31,5 +31,5 @@ class VariableNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setDefaultValue(mixed $value)
+    public function setDefaultValue(mixed $value): void
     {
         $this->defaultValueSet = true;
@@ -56,5 +56,5 @@ class VariableNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setAllowEmptyValue(bool $boolean)
+    public function setAllowEmptyValue(bool $boolean): void
     {
         $this->allowEmptyValue = $boolean;
@@ -64,5 +64,5 @@ class VariableNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -72,5 +72,5 @@ class VariableNode extends BaseNode implements PrototypeNodeInterface
      * @return void
      */
-    protected function validateType(mixed $value)
+    protected function validateType(mixed $value): void
     {
     }
diff --git a/src/Symfony/Component/Config/Exception/FileLocatorFileNotFoundException.php b/src/Symfony/Component/Config/Exception/FileLocatorFileNotFoundException.php
index c5173ae580..1f5aa3616e 100644
--- a/src/Symfony/Component/Config/Exception/FileLocatorFileNotFoundException.php
+++ b/src/Symfony/Component/Config/Exception/FileLocatorFileNotFoundException.php
@@ -31,5 +31,5 @@ class FileLocatorFileNotFoundException extends \InvalidArgumentException
      * @return array
      */
-    public function getPaths()
+    public function getPaths(): array
     {
         return $this->paths;
diff --git a/src/Symfony/Component/Config/Exception/LoaderLoadException.php b/src/Symfony/Component/Config/Exception/LoaderLoadException.php
index 57afd6a8db..3d662340ea 100644
--- a/src/Symfony/Component/Config/Exception/LoaderLoadException.php
+++ b/src/Symfony/Component/Config/Exception/LoaderLoadException.php
@@ -80,5 +80,5 @@ class LoaderLoadException extends \Exception
      * @return string
      */
-    protected function varToString(mixed $var)
+    protected function varToString(mixed $var): string
     {
         if (\is_object($var)) {
diff --git a/src/Symfony/Component/Config/FileLocator.php b/src/Symfony/Component/Config/FileLocator.php
index e147d9b1aa..6b0ce493ea 100644
--- a/src/Symfony/Component/Config/FileLocator.php
+++ b/src/Symfony/Component/Config/FileLocator.php
@@ -34,5 +34,5 @@ class FileLocator implements FileLocatorInterface
      * @return string|array
      */
-    public function locate(string $name, string $currentPath = null, bool $first = true)
+    public function locate(string $name, string $currentPath = null, bool $first = true): string|array
     {
         if ('' === $name) {
diff --git a/src/Symfony/Component/Config/FileLocatorInterface.php b/src/Symfony/Component/Config/FileLocatorInterface.php
index e3ca1d49c4..526d350484 100644
--- a/src/Symfony/Component/Config/FileLocatorInterface.php
+++ b/src/Symfony/Component/Config/FileLocatorInterface.php
@@ -31,4 +31,4 @@ interface FileLocatorInterface
      * @throws FileLocatorFileNotFoundException If a file is not found
      */
-    public function locate(string $name, string $currentPath = null, bool $first = true);
+    public function locate(string $name, string $currentPath = null, bool $first = true): string|array;
 }
diff --git a/src/Symfony/Component/Config/Loader/FileLoader.php b/src/Symfony/Component/Config/Loader/FileLoader.php
index 8cfaa23ba2..68a4120506 100644
--- a/src/Symfony/Component/Config/Loader/FileLoader.php
+++ b/src/Symfony/Component/Config/Loader/FileLoader.php
@@ -43,5 +43,5 @@ abstract class FileLoader extends Loader
      * @return void
      */
-    public function setCurrentDir(string $dir)
+    public function setCurrentDir(string $dir): void
     {
         $this->currentDir = $dir;
@@ -71,5 +71,5 @@ abstract class FileLoader extends Loader
      * @throws FileLocatorFileNotFoundException
      */
-    public function import(mixed $resource, string $type = null, bool $ignoreErrors = false, string $sourceResource = null, string|array $exclude = null)
+    public function import(mixed $resource, string $type = null, bool $ignoreErrors = false, string $sourceResource = null, string|array $exclude = null): mixed
     {
         if (\is_string($resource) && \strlen($resource) !== ($i = strcspn($resource, '*?{[')) && !str_contains($resource, "\n")) {
diff --git a/src/Symfony/Component/Config/Loader/Loader.php b/src/Symfony/Component/Config/Loader/Loader.php
index 36e85ad346..bb6d9ca2fe 100644
--- a/src/Symfony/Component/Config/Loader/Loader.php
+++ b/src/Symfony/Component/Config/Loader/Loader.php
@@ -37,5 +37,5 @@ abstract class Loader implements LoaderInterface
      * @return void
      */
-    public function setResolver(LoaderResolverInterface $resolver)
+    public function setResolver(LoaderResolverInterface $resolver): void
     {
         $this->resolver = $resolver;
@@ -47,5 +47,5 @@ abstract class Loader implements LoaderInterface
      * @return mixed
      */
-    public function import(mixed $resource, string $type = null)
+    public function import(mixed $resource, string $type = null): mixed
     {
         return $this->resolve($resource, $type)->load($resource, $type);
diff --git a/src/Symfony/Component/Config/Loader/LoaderInterface.php b/src/Symfony/Component/Config/Loader/LoaderInterface.php
index 4e0746d4d6..c080bd63a9 100644
--- a/src/Symfony/Component/Config/Loader/LoaderInterface.php
+++ b/src/Symfony/Component/Config/Loader/LoaderInterface.php
@@ -26,5 +26,5 @@ interface LoaderInterface
      * @throws \Exception If something went wrong
      */
-    public function load(mixed $resource, string $type = null);
+    public function load(mixed $resource, string $type = null): mixed;
 
     /**
@@ -35,5 +35,5 @@ interface LoaderInterface
      * @return bool
      */
-    public function supports(mixed $resource, string $type = null);
+    public function supports(mixed $resource, string $type = null): bool;
 
     /**
@@ -42,5 +42,5 @@ interface LoaderInterface
      * @return LoaderResolverInterface
      */
-    public function getResolver();
+    public function getResolver(): LoaderResolverInterface;
 
     /**
@@ -49,4 +49,4 @@ interface LoaderInterface
      * @return void
      */
-    public function setResolver(LoaderResolverInterface $resolver);
+    public function setResolver(LoaderResolverInterface $resolver): void;
 }
diff --git a/src/Symfony/Component/Config/Loader/LoaderResolver.php b/src/Symfony/Component/Config/Loader/LoaderResolver.php
index 670e320122..134e4069e7 100644
--- a/src/Symfony/Component/Config/Loader/LoaderResolver.php
+++ b/src/Symfony/Component/Config/Loader/LoaderResolver.php
@@ -51,5 +51,5 @@ class LoaderResolver implements LoaderResolverInterface
      * @return void
      */
-    public function addLoader(LoaderInterface $loader)
+    public function addLoader(LoaderInterface $loader): void
     {
         $this->loaders[] = $loader;
diff --git a/src/Symfony/Component/Config/ResourceCheckerConfigCache.php b/src/Symfony/Component/Config/ResourceCheckerConfigCache.php
index a8478a8cc3..d2ec80ec99 100644
--- a/src/Symfony/Component/Config/ResourceCheckerConfigCache.php
+++ b/src/Symfony/Component/Config/ResourceCheckerConfigCache.php
@@ -110,5 +110,5 @@ class ResourceCheckerConfigCache implements ConfigCacheInterface
      * @throws \RuntimeException When cache file can't be written
      */
-    public function write(string $content, array $metadata = null)
+    public function write(string $content, array $metadata = null): void
     {
         $mode = 0666;
diff --git a/src/Symfony/Component/Config/ResourceCheckerInterface.php b/src/Symfony/Component/Config/ResourceCheckerInterface.php
index 6b1c6c5fbe..bb80ed461e 100644
--- a/src/Symfony/Component/Config/ResourceCheckerInterface.php
+++ b/src/Symfony/Component/Config/ResourceCheckerInterface.php
@@ -33,5 +33,5 @@ interface ResourceCheckerInterface
      * @return bool
      */
-    public function supports(ResourceInterface $metadata);
+    public function supports(ResourceInterface $metadata): bool;
 
     /**
@@ -42,4 +42,4 @@ interface ResourceCheckerInterface
      * @return bool
      */
-    public function isFresh(ResourceInterface $resource, int $timestamp);
+    public function isFresh(ResourceInterface $resource, int $timestamp): bool;
 }
diff --git a/src/Symfony/Component/Config/Util/XmlUtils.php b/src/Symfony/Component/Config/Util/XmlUtils.php
index cc024da461..00b79e915f 100644
--- a/src/Symfony/Component/Config/Util/XmlUtils.php
+++ b/src/Symfony/Component/Config/Util/XmlUtils.php
@@ -242,5 +242,5 @@ class XmlUtils
      * @return array
      */
-    protected static function getXmlErrors(bool $internalErrors)
+    protected static function getXmlErrors(bool $internalErrors): array
     {
         $errors = [];
diff --git a/src/Symfony/Component/Console/Application.php b/src/Symfony/Component/Console/Application.php
index b7aaa6a29e..dd14cf2c5c 100644
--- a/src/Symfony/Component/Console/Application.php
+++ b/src/Symfony/Component/Console/Application.php
@@ -114,5 +114,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setCommandLoader(CommandLoaderInterface $commandLoader)
+    public function setCommandLoader(CommandLoaderInterface $commandLoader): void
     {
         $this->commandLoader = $commandLoader;
@@ -131,5 +131,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setSignalsToDispatchEvent(int ...$signalsToDispatchEvent)
+    public function setSignalsToDispatchEvent(int ...$signalsToDispatchEvent): void
     {
         $this->signalsToDispatchEvent = $signalsToDispatchEvent;
@@ -221,5 +221,5 @@ class Application implements ResetInterface
      * @return int 0 if everything went fine, or an error code
      */
-    public function doRun(InputInterface $input, OutputInterface $output)
+    public function doRun(InputInterface $input, OutputInterface $output): int
     {
         if (true === $input->hasParameterOption(['--version', '-V'], true)) {
@@ -327,5 +327,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
     }
@@ -334,5 +334,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setHelperSet(HelperSet $helperSet)
+    public function setHelperSet(HelperSet $helperSet): void
     {
         $this->helperSet = $helperSet;
@@ -350,5 +350,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setDefinition(InputDefinition $definition)
+    public function setDefinition(InputDefinition $definition): void
     {
         $this->definition = $definition;
@@ -423,5 +423,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setCatchExceptions(bool $boolean)
+    public function setCatchExceptions(bool $boolean): void
     {
         $this->catchExceptions = $boolean;
@@ -441,5 +441,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setAutoExit(bool $boolean)
+    public function setAutoExit(bool $boolean): void
     {
         $this->autoExit = $boolean;
@@ -459,5 +459,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -477,5 +477,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function setVersion(string $version)
+    public function setVersion(string $version): void
     {
         $this->version = $version;
@@ -487,5 +487,5 @@ class Application implements ResetInterface
      * @return string
      */
-    public function getLongVersion()
+    public function getLongVersion(): string
     {
         if ('UNKNOWN' !== $this->getName()) {
@@ -517,5 +517,5 @@ class Application implements ResetInterface
      * @return void
      */
-    public function addCommands(array $commands)
+    public function addCommands(array $commands): void
     {
         foreach ($commands as $command) {
@@ -532,5 +532,5 @@ class Application implements ResetInterface
      * @return Command|null
      */
-    public function add(Command $command)
+    public function add(Command $command): ?Command
     {
         $this->init();
@@ -569,5 +569,5 @@ class Application implements ResetInterface
      * @throws CommandNotFoundException When given command name does not exist
      */
-    public function get(string $name)
+    public function get(string $name): Command
     {
         $this->init();
@@ -676,5 +676,5 @@ class Application implements ResetInterface
      * @throws CommandNotFoundException When command name is incorrect or ambiguous
      */
-    public function find(string $name)
+    public function find(string $name): Command
     {
         $this->init();
@@ -784,5 +784,5 @@ class Application implements ResetInterface
      * @return Command[]
      */
-    public function all(string $namespace = null)
+    public function all(string $namespace = null): array
     {
         $this->init();
@@ -928,5 +928,5 @@ class Application implements ResetInterface
      * @return void
      */
-    protected function configureIO(InputInterface $input, OutputInterface $output)
+    protected function configureIO(InputInterface $input, OutputInterface $output): void
     {
         if (true === $input->hasParameterOption(['--ansi'], true)) {
@@ -993,5 +993,5 @@ class Application implements ResetInterface
      * @return int 0 if everything went fine, or an error code
      */
-    protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output)
+    protected function doRunCommand(Command $command, InputInterface $input, OutputInterface $output): int
     {
         foreach ($command->getHelperSet() as $helper) {
diff --git a/src/Symfony/Component/Console/Command/Command.php b/src/Symfony/Component/Console/Command/Command.php
index 704b112d1a..b296bffcbd 100644
--- a/src/Symfony/Component/Console/Command/Command.php
+++ b/src/Symfony/Component/Console/Command/Command.php
@@ -145,5 +145,5 @@ class Command
      * @return void
      */
-    public function ignoreValidationErrors()
+    public function ignoreValidationErrors(): void
     {
         $this->ignoreValidationErrors = true;
@@ -153,5 +153,5 @@ class Command
      * @return void
      */
-    public function setApplication(Application $application = null)
+    public function setApplication(Application $application = null): void
     {
         if (1 > \func_num_args()) {
@@ -171,5 +171,5 @@ class Command
      * @return void
      */
-    public function setHelperSet(HelperSet $helperSet)
+    public function setHelperSet(HelperSet $helperSet): void
     {
         $this->helperSet = $helperSet;
@@ -200,5 +200,5 @@ class Command
      * @return bool
      */
-    public function isEnabled()
+    public function isEnabled(): bool
     {
         return true;
@@ -210,5 +210,5 @@ class Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
     }
@@ -228,5 +228,5 @@ class Command
      * @see setCode()
      */
-    protected function execute(InputInterface $input, OutputInterface $output)
+    protected function execute(InputInterface $input, OutputInterface $output): int
     {
         throw new LogicException('You must override the execute() method in the concrete command class.');
@@ -242,5 +242,5 @@ class Command
      * @return void
      */
-    protected function interact(InputInterface $input, OutputInterface $output)
+    protected function interact(InputInterface $input, OutputInterface $output): void
     {
     }
@@ -258,5 +258,5 @@ class Command
      * @return void
      */
-    protected function initialize(InputInterface $input, OutputInterface $output)
+    protected function initialize(InputInterface $input, OutputInterface $output): void
     {
     }
@@ -701,5 +701,5 @@ class Command
      * @throws InvalidArgumentException if the helper is not defined
      */
-    public function getHelper(string $name): mixed
+    public function getHelper(string $name): HelperInterface
     {
         if (null === $this->helperSet) {
diff --git a/src/Symfony/Component/Console/Command/HelpCommand.php b/src/Symfony/Component/Console/Command/HelpCommand.php
index e6447b0506..be85331bc3 100644
--- a/src/Symfony/Component/Console/Command/HelpCommand.php
+++ b/src/Symfony/Component/Console/Command/HelpCommand.php
@@ -31,5 +31,5 @@ class HelpCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this->ignoreValidationErrors();
@@ -61,5 +61,5 @@ EOF
      * @return void
      */
-    public function setCommand(Command $command)
+    public function setCommand(Command $command): void
     {
         $this->command = $command;
diff --git a/src/Symfony/Component/Console/Command/ListCommand.php b/src/Symfony/Component/Console/Command/ListCommand.php
index 5850c3d7b8..e2371f88fd 100644
--- a/src/Symfony/Component/Console/Command/ListCommand.php
+++ b/src/Symfony/Component/Console/Command/ListCommand.php
@@ -29,5 +29,5 @@ class ListCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Console/Command/SignalableCommandInterface.php b/src/Symfony/Component/Console/Command/SignalableCommandInterface.php
index 4d0876003d..d33732acb6 100644
--- a/src/Symfony/Component/Console/Command/SignalableCommandInterface.php
+++ b/src/Symfony/Component/Console/Command/SignalableCommandInterface.php
@@ -31,4 +31,4 @@ interface SignalableCommandInterface
      * @return int|false The exit code to return or false to continue the normal execution
      */
-    public function handleSignal(int $signal, /* int|false $previousExitCode = 0 */);
+    public function handleSignal(int $signal, /* int|false $previousExitCode = 0 */): int|false;
 }
diff --git a/src/Symfony/Component/Console/DependencyInjection/AddConsoleCommandPass.php b/src/Symfony/Component/Console/DependencyInjection/AddConsoleCommandPass.php
index 27705ddb63..1b25473f75 100644
--- a/src/Symfony/Component/Console/DependencyInjection/AddConsoleCommandPass.php
+++ b/src/Symfony/Component/Console/DependencyInjection/AddConsoleCommandPass.php
@@ -33,5 +33,5 @@ class AddConsoleCommandPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $commandServices = $container->findTaggedServiceIds('console.command', true);
diff --git a/src/Symfony/Component/Console/Descriptor/DescriptorInterface.php b/src/Symfony/Component/Console/Descriptor/DescriptorInterface.php
index ab468a2562..e20f80d56b 100644
--- a/src/Symfony/Component/Console/Descriptor/DescriptorInterface.php
+++ b/src/Symfony/Component/Console/Descriptor/DescriptorInterface.php
@@ -24,4 +24,4 @@ interface DescriptorInterface
      * @return void
      */
-    public function describe(OutputInterface $output, object $object, array $options = []);
+    public function describe(OutputInterface $output, object $object, array $options = []): void;
 }
diff --git a/src/Symfony/Component/Console/EventListener/ErrorListener.php b/src/Symfony/Component/Console/EventListener/ErrorListener.php
index 9925a5f746..e72fb5fc89 100644
--- a/src/Symfony/Component/Console/EventListener/ErrorListener.php
+++ b/src/Symfony/Component/Console/EventListener/ErrorListener.php
@@ -35,5 +35,5 @@ class ErrorListener implements EventSubscriberInterface
      * @return void
      */
-    public function onConsoleError(ConsoleErrorEvent $event)
+    public function onConsoleError(ConsoleErrorEvent $event): void
     {
         if (null === $this->logger) {
@@ -55,5 +55,5 @@ class ErrorListener implements EventSubscriberInterface
      * @return void
      */
-    public function onConsoleTerminate(ConsoleTerminateEvent $event)
+    public function onConsoleTerminate(ConsoleTerminateEvent $event): void
     {
         if (null === $this->logger) {
diff --git a/src/Symfony/Component/Console/Formatter/OutputFormatter.php b/src/Symfony/Component/Console/Formatter/OutputFormatter.php
index 9cb6310484..327aa3671c 100644
--- a/src/Symfony/Component/Console/Formatter/OutputFormatter.php
+++ b/src/Symfony/Component/Console/Formatter/OutputFormatter.php
@@ -85,5 +85,5 @@ class OutputFormatter implements WrappableOutputFormatterInterface
      * @return void
      */
-    public function setDecorated(bool $decorated)
+    public function setDecorated(bool $decorated): void
     {
         $this->decorated = $decorated;
@@ -98,5 +98,5 @@ class OutputFormatter implements WrappableOutputFormatterInterface
      * @return void
      */
-    public function setStyle(string $name, OutputFormatterStyleInterface $style)
+    public function setStyle(string $name, OutputFormatterStyleInterface $style): void
     {
         $this->styles[strtolower($name)] = $style;
@@ -125,5 +125,5 @@ class OutputFormatter implements WrappableOutputFormatterInterface
      * @return string
      */
-    public function formatAndWrap(?string $message, int $width)
+    public function formatAndWrap(?string $message, int $width): string
     {
         if (null === $message) {
diff --git a/src/Symfony/Component/Console/Formatter/OutputFormatterInterface.php b/src/Symfony/Component/Console/Formatter/OutputFormatterInterface.php
index 433cd41978..02187a7ffc 100644
--- a/src/Symfony/Component/Console/Formatter/OutputFormatterInterface.php
+++ b/src/Symfony/Component/Console/Formatter/OutputFormatterInterface.php
@@ -24,5 +24,5 @@ interface OutputFormatterInterface
      * @return void
      */
-    public function setDecorated(bool $decorated);
+    public function setDecorated(bool $decorated): void;
 
     /**
@@ -36,5 +36,5 @@ interface OutputFormatterInterface
      * @return void
      */
-    public function setStyle(string $name, OutputFormatterStyleInterface $style);
+    public function setStyle(string $name, OutputFormatterStyleInterface $style): void;
 
     /**
diff --git a/src/Symfony/Component/Console/Formatter/OutputFormatterStyle.php b/src/Symfony/Component/Console/Formatter/OutputFormatterStyle.php
index 346a474c61..db3012ced8 100644
--- a/src/Symfony/Component/Console/Formatter/OutputFormatterStyle.php
+++ b/src/Symfony/Component/Console/Formatter/OutputFormatterStyle.php
@@ -42,5 +42,5 @@ class OutputFormatterStyle implements OutputFormatterStyleInterface
      * @return void
      */
-    public function setForeground(string $color = null)
+    public function setForeground(string $color = null): void
     {
         if (1 > \func_num_args()) {
@@ -53,5 +53,5 @@ class OutputFormatterStyle implements OutputFormatterStyleInterface
      * @return void
      */
-    public function setBackground(string $color = null)
+    public function setBackground(string $color = null): void
     {
         if (1 > \func_num_args()) {
@@ -69,5 +69,5 @@ class OutputFormatterStyle implements OutputFormatterStyleInterface
      * @return void
      */
-    public function setOption(string $option)
+    public function setOption(string $option): void
     {
         $this->options[] = $option;
@@ -78,5 +78,5 @@ class OutputFormatterStyle implements OutputFormatterStyleInterface
      * @return void
      */
-    public function unsetOption(string $option)
+    public function unsetOption(string $option): void
     {
         $pos = array_search($option, $this->options);
@@ -91,5 +91,5 @@ class OutputFormatterStyle implements OutputFormatterStyleInterface
      * @return void
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         $this->color = new Color($this->foreground, $this->background, $this->options = $options);
diff --git a/src/Symfony/Component/Console/Formatter/OutputFormatterStyleInterface.php b/src/Symfony/Component/Console/Formatter/OutputFormatterStyleInterface.php
index 3b15098cbe..3f850e129b 100644
--- a/src/Symfony/Component/Console/Formatter/OutputFormatterStyleInterface.php
+++ b/src/Symfony/Component/Console/Formatter/OutputFormatterStyleInterface.php
@@ -24,5 +24,5 @@ interface OutputFormatterStyleInterface
      * @return void
      */
-    public function setForeground(?string $color);
+    public function setForeground(?string $color): void;
 
     /**
@@ -31,5 +31,5 @@ interface OutputFormatterStyleInterface
      * @return void
      */
-    public function setBackground(?string $color);
+    public function setBackground(?string $color): void;
 
     /**
@@ -38,5 +38,5 @@ interface OutputFormatterStyleInterface
      * @return void
      */
-    public function setOption(string $option);
+    public function setOption(string $option): void;
 
     /**
@@ -45,5 +45,5 @@ interface OutputFormatterStyleInterface
      * @return void
      */
-    public function unsetOption(string $option);
+    public function unsetOption(string $option): void;
 
     /**
@@ -52,5 +52,5 @@ interface OutputFormatterStyleInterface
      * @return void
      */
-    public function setOptions(array $options);
+    public function setOptions(array $options): void;
 
     /**
diff --git a/src/Symfony/Component/Console/Formatter/OutputFormatterStyleStack.php b/src/Symfony/Component/Console/Formatter/OutputFormatterStyleStack.php
index f98c2eff7c..5d9c2c246f 100644
--- a/src/Symfony/Component/Console/Formatter/OutputFormatterStyleStack.php
+++ b/src/Symfony/Component/Console/Formatter/OutputFormatterStyleStack.php
@@ -38,5 +38,5 @@ class OutputFormatterStyleStack implements ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->styles = [];
@@ -48,5 +48,5 @@ class OutputFormatterStyleStack implements ResetInterface
      * @return void
      */
-    public function push(OutputFormatterStyleInterface $style)
+    public function push(OutputFormatterStyleInterface $style): void
     {
         $this->styles[] = $style;
diff --git a/src/Symfony/Component/Console/Formatter/WrappableOutputFormatterInterface.php b/src/Symfony/Component/Console/Formatter/WrappableOutputFormatterInterface.php
index 746cd27e79..52c61429cf 100644
--- a/src/Symfony/Component/Console/Formatter/WrappableOutputFormatterInterface.php
+++ b/src/Symfony/Component/Console/Formatter/WrappableOutputFormatterInterface.php
@@ -24,4 +24,4 @@ interface WrappableOutputFormatterInterface extends OutputFormatterInterface
      * @return string
      */
-    public function formatAndWrap(?string $message, int $width);
+    public function formatAndWrap(?string $message, int $width): string;
 }
diff --git a/src/Symfony/Component/Console/Helper/DescriptorHelper.php b/src/Symfony/Component/Console/Helper/DescriptorHelper.php
index eb32bce8fc..57edd56954 100644
--- a/src/Symfony/Component/Console/Helper/DescriptorHelper.php
+++ b/src/Symfony/Component/Console/Helper/DescriptorHelper.php
@@ -55,5 +55,5 @@ class DescriptorHelper extends Helper
      * @throws InvalidArgumentException when the given format is not supported
      */
-    public function describe(OutputInterface $output, ?object $object, array $options = [])
+    public function describe(OutputInterface $output, ?object $object, array $options = []): void
     {
         $options = array_merge([
diff --git a/src/Symfony/Component/Console/Helper/Helper.php b/src/Symfony/Component/Console/Helper/Helper.php
index 3631b30f69..5e4407a591 100644
--- a/src/Symfony/Component/Console/Helper/Helper.php
+++ b/src/Symfony/Component/Console/Helper/Helper.php
@@ -27,5 +27,5 @@ abstract class Helper implements HelperInterface
      * @return void
      */
-    public function setHelperSet(HelperSet $helperSet = null)
+    public function setHelperSet(HelperSet $helperSet = null): void
     {
         if (1 > \func_num_args()) {
@@ -95,5 +95,5 @@ abstract class Helper implements HelperInterface
      * @return string
      */
-    public static function formatTime(int|float $secs)
+    public static function formatTime(int|float $secs): string
     {
         static $timeFormats = [
@@ -127,5 +127,5 @@ abstract class Helper implements HelperInterface
      * @return string
      */
-    public static function formatMemory(int $memory)
+    public static function formatMemory(int $memory): string
     {
         if ($memory >= 1024 * 1024 * 1024) {
@@ -147,5 +147,5 @@ abstract class Helper implements HelperInterface
      * @return string
      */
-    public static function removeDecoration(OutputFormatterInterface $formatter, ?string $string)
+    public static function removeDecoration(OutputFormatterInterface $formatter, ?string $string): string
     {
         $isDecorated = $formatter->isDecorated();
diff --git a/src/Symfony/Component/Console/Helper/HelperInterface.php b/src/Symfony/Component/Console/Helper/HelperInterface.php
index ab626c9385..d9d069d3e5 100644
--- a/src/Symfony/Component/Console/Helper/HelperInterface.php
+++ b/src/Symfony/Component/Console/Helper/HelperInterface.php
@@ -24,5 +24,5 @@ interface HelperInterface
      * @return void
      */
-    public function setHelperSet(?HelperSet $helperSet);
+    public function setHelperSet(?HelperSet $helperSet): void;
 
     /**
@@ -36,4 +36,4 @@ interface HelperInterface
      * @return string
      */
-    public function getName();
+    public function getName(): string;
 }
diff --git a/src/Symfony/Component/Console/Helper/HelperSet.php b/src/Symfony/Component/Console/Helper/HelperSet.php
index dc5d499caa..e19192da81 100644
--- a/src/Symfony/Component/Console/Helper/HelperSet.php
+++ b/src/Symfony/Component/Console/Helper/HelperSet.php
@@ -39,5 +39,5 @@ class HelperSet implements \IteratorAggregate
      * @return void
      */
-    public function set(HelperInterface $helper, string $alias = null)
+    public function set(HelperInterface $helper, string $alias = null): void
     {
         $this->helpers[$helper->getName()] = $helper;
diff --git a/src/Symfony/Component/Console/Helper/InputAwareHelper.php b/src/Symfony/Component/Console/Helper/InputAwareHelper.php
index 6f8225973c..5f3640c346 100644
--- a/src/Symfony/Component/Console/Helper/InputAwareHelper.php
+++ b/src/Symfony/Component/Console/Helper/InputAwareHelper.php
@@ -27,5 +27,5 @@ abstract class InputAwareHelper extends Helper implements InputAwareInterface
      * @return void
      */
-    public function setInput(InputInterface $input)
+    public function setInput(InputInterface $input): void
     {
         $this->input = $input;
diff --git a/src/Symfony/Component/Console/Helper/ProgressIndicator.php b/src/Symfony/Component/Console/Helper/ProgressIndicator.php
index 84dbef950c..5a38c8c28a 100644
--- a/src/Symfony/Component/Console/Helper/ProgressIndicator.php
+++ b/src/Symfony/Component/Console/Helper/ProgressIndicator.php
@@ -74,5 +74,5 @@ class ProgressIndicator
      * @return void
      */
-    public function setMessage(?string $message)
+    public function setMessage(?string $message): void
     {
         $this->message = $message;
@@ -86,5 +86,5 @@ class ProgressIndicator
      * @return void
      */
-    public function start(string $message)
+    public function start(string $message): void
     {
         if ($this->started) {
@@ -106,5 +106,5 @@ class ProgressIndicator
      * @return void
      */
-    public function advance()
+    public function advance(): void
     {
         if (!$this->started) {
@@ -133,5 +133,5 @@ class ProgressIndicator
      * @return void
      */
-    public function finish(string $message)
+    public function finish(string $message): void
     {
         if (!$this->started) {
@@ -160,5 +160,5 @@ class ProgressIndicator
      * @return void
      */
-    public static function setPlaceholderFormatterDefinition(string $name, callable $callable)
+    public static function setPlaceholderFormatterDefinition(string $name, callable $callable): void
     {
         self::$formatters ??= self::initPlaceholderFormatters();
diff --git a/src/Symfony/Component/Console/Helper/QuestionHelper.php b/src/Symfony/Component/Console/Helper/QuestionHelper.php
index d83bee17ef..548be8f3ce 100644
--- a/src/Symfony/Component/Console/Helper/QuestionHelper.php
+++ b/src/Symfony/Component/Console/Helper/QuestionHelper.php
@@ -93,5 +93,5 @@ class QuestionHelper extends Helper
      * @return void
      */
-    public static function disableStty()
+    public static function disableStty(): void
     {
         self::$stty = false;
@@ -183,5 +183,5 @@ class QuestionHelper extends Helper
      * @return void
      */
-    protected function writePrompt(OutputInterface $output, Question $question)
+    protected function writePrompt(OutputInterface $output, Question $question): void
     {
         $message = $question->getQuestion();
@@ -221,5 +221,5 @@ class QuestionHelper extends Helper
      * @return void
      */
-    protected function writeError(OutputInterface $output, \Exception $error)
+    protected function writeError(OutputInterface $output, \Exception $error): void
     {
         if (null !== $this->getHelperSet() && $this->getHelperSet()->has('formatter')) {
diff --git a/src/Symfony/Component/Console/Helper/SymfonyQuestionHelper.php b/src/Symfony/Component/Console/Helper/SymfonyQuestionHelper.php
index 8ebc84376b..4af2691707 100644
--- a/src/Symfony/Component/Console/Helper/SymfonyQuestionHelper.php
+++ b/src/Symfony/Component/Console/Helper/SymfonyQuestionHelper.php
@@ -29,5 +29,5 @@ class SymfonyQuestionHelper extends QuestionHelper
      * @return void
      */
-    protected function writePrompt(OutputInterface $output, Question $question)
+    protected function writePrompt(OutputInterface $output, Question $question): void
     {
         $text = OutputFormatter::escapeTrailingBackslash($question->getQuestion());
@@ -87,5 +87,5 @@ class SymfonyQuestionHelper extends QuestionHelper
      * @return void
      */
-    protected function writeError(OutputInterface $output, \Exception $error)
+    protected function writeError(OutputInterface $output, \Exception $error): void
     {
         if ($output instanceof SymfonyStyle) {
diff --git a/src/Symfony/Component/Console/Helper/Table.php b/src/Symfony/Component/Console/Helper/Table.php
index cf714873f5..e16ffaf97d 100644
--- a/src/Symfony/Component/Console/Helper/Table.php
+++ b/src/Symfony/Component/Console/Helper/Table.php
@@ -70,5 +70,5 @@ class Table
      * @return void
      */
-    public static function setStyleDefinition(string $name, TableStyle $style)
+    public static function setStyleDefinition(string $name, TableStyle $style): void
     {
         self::$styles ??= self::initStyles();
@@ -195,5 +195,5 @@ class Table
      * @return $this
      */
-    public function setRows(array $rows)
+    public function setRows(array $rows): static
     {
         $this->rows = [];
@@ -316,5 +316,5 @@ class Table
      * @return void
      */
-    public function render()
+    public function render(): void
     {
         $divider = new TableSeparator();
diff --git a/src/Symfony/Component/Console/Input/ArgvInput.php b/src/Symfony/Component/Console/Input/ArgvInput.php
index 59f9217ec5..77b402b7d7 100644
--- a/src/Symfony/Component/Console/Input/ArgvInput.php
+++ b/src/Symfony/Component/Console/Input/ArgvInput.php
@@ -59,5 +59,5 @@ class ArgvInput extends Input
      * @return void
      */
-    protected function setTokens(array $tokens)
+    protected function setTokens(array $tokens): void
     {
         $this->tokens = $tokens;
@@ -67,5 +67,5 @@ class ArgvInput extends Input
      * @return void
      */
-    protected function parse()
+    protected function parse(): void
     {
         $parseOptions = true;
diff --git a/src/Symfony/Component/Console/Input/ArrayInput.php b/src/Symfony/Component/Console/Input/ArrayInput.php
index 355de61dd6..c6b82a2886 100644
--- a/src/Symfony/Component/Console/Input/ArrayInput.php
+++ b/src/Symfony/Component/Console/Input/ArrayInput.php
@@ -117,5 +117,5 @@ class ArrayInput extends Input
      * @return void
      */
-    protected function parse()
+    protected function parse(): void
     {
         foreach ($this->parameters as $key => $value) {
diff --git a/src/Symfony/Component/Console/Input/Input.php b/src/Symfony/Component/Console/Input/Input.php
index 0f5617cd17..bdd5dd264f 100644
--- a/src/Symfony/Component/Console/Input/Input.php
+++ b/src/Symfony/Component/Console/Input/Input.php
@@ -47,5 +47,5 @@ abstract class Input implements InputInterface, StreamableInputInterface
      * @return void
      */
-    public function bind(InputDefinition $definition)
+    public function bind(InputDefinition $definition): void
     {
         $this->arguments = [];
@@ -61,10 +61,10 @@ abstract class Input implements InputInterface, StreamableInputInterface
      * @return void
      */
-    abstract protected function parse();
+    abstract protected function parse(): void;
 
     /**
      * @return void
      */
-    public function validate()
+    public function validate(): void
     {
         $definition = $this->definition;
@@ -86,5 +86,5 @@ abstract class Input implements InputInterface, StreamableInputInterface
      * @return void
      */
-    public function setInteractive(bool $interactive)
+    public function setInteractive(bool $interactive): void
     {
         $this->interactive = $interactive;
@@ -108,5 +108,5 @@ abstract class Input implements InputInterface, StreamableInputInterface
      * @return void
      */
-    public function setArgument(string $name, mixed $value)
+    public function setArgument(string $name, mixed $value): void
     {
         if (!$this->definition->hasArgument($name)) {
@@ -147,5 +147,5 @@ abstract class Input implements InputInterface, StreamableInputInterface
      * @return void
      */
-    public function setOption(string $name, mixed $value)
+    public function setOption(string $name, mixed $value): void
     {
         if ($this->definition->hasNegation($name)) {
@@ -178,5 +178,5 @@ abstract class Input implements InputInterface, StreamableInputInterface
      * @return void
      */
-    public function setStream($stream)
+    public function setStream($stream): void
     {
         $this->stream = $stream;
diff --git a/src/Symfony/Component/Console/Input/InputArgument.php b/src/Symfony/Component/Console/Input/InputArgument.php
index 0db0c7709b..5fbca28f99 100644
--- a/src/Symfony/Component/Console/Input/InputArgument.php
+++ b/src/Symfony/Component/Console/Input/InputArgument.php
@@ -96,5 +96,5 @@ class InputArgument
      * @throws LogicException When incorrect default value is given
      */
-    public function setDefault(string|bool|int|float|array $default = null)
+    public function setDefault(string|bool|int|float|array $default = null): void
     {
         if (1 > \func_num_args()) {
diff --git a/src/Symfony/Component/Console/Input/InputAwareInterface.php b/src/Symfony/Component/Console/Input/InputAwareInterface.php
index 0ad27b4558..f5e544930e 100644
--- a/src/Symfony/Component/Console/Input/InputAwareInterface.php
+++ b/src/Symfony/Component/Console/Input/InputAwareInterface.php
@@ -25,4 +25,4 @@ interface InputAwareInterface
      * @return void
      */
-    public function setInput(InputInterface $input);
+    public function setInput(InputInterface $input): void;
 }
diff --git a/src/Symfony/Component/Console/Input/InputDefinition.php b/src/Symfony/Component/Console/Input/InputDefinition.php
index b7162d7706..3d41be7340 100644
--- a/src/Symfony/Component/Console/Input/InputDefinition.php
+++ b/src/Symfony/Component/Console/Input/InputDefinition.php
@@ -50,5 +50,5 @@ class InputDefinition
      * @return void
      */
-    public function setDefinition(array $definition)
+    public function setDefinition(array $definition): void
     {
         $arguments = [];
@@ -73,5 +73,5 @@ class InputDefinition
      * @return void
      */
-    public function setArguments(array $arguments = [])
+    public function setArguments(array $arguments = []): void
     {
         $this->arguments = [];
@@ -89,5 +89,5 @@ class InputDefinition
      * @return void
      */
-    public function addArguments(?array $arguments = [])
+    public function addArguments(?array $arguments = []): void
     {
         if (null !== $arguments) {
@@ -103,5 +103,5 @@ class InputDefinition
      * @throws LogicException When incorrect argument is given
      */
-    public function addArgument(InputArgument $argument)
+    public function addArgument(InputArgument $argument): void
     {
         if (isset($this->arguments[$argument->getName()])) {
@@ -202,5 +202,5 @@ class InputDefinition
      * @return void
      */
-    public function setOptions(array $options = [])
+    public function setOptions(array $options = []): void
     {
         $this->options = [];
@@ -217,5 +217,5 @@ class InputDefinition
      * @return void
      */
-    public function addOptions(array $options = [])
+    public function addOptions(array $options = []): void
     {
         foreach ($options as $option) {
@@ -229,5 +229,5 @@ class InputDefinition
      * @throws LogicException When option given already exist
      */
-    public function addOption(InputOption $option)
+    public function addOption(InputOption $option): void
     {
         if (isset($this->options[$option->getName()]) && !$option->equals($this->options[$option->getName()])) {
diff --git a/src/Symfony/Component/Console/Input/InputInterface.php b/src/Symfony/Component/Console/Input/InputInterface.php
index aaed5fd01d..e7de9bcdec 100644
--- a/src/Symfony/Component/Console/Input/InputInterface.php
+++ b/src/Symfony/Component/Console/Input/InputInterface.php
@@ -57,5 +57,5 @@ interface InputInterface
      * @return mixed
      */
-    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false);
+    public function getParameterOption(string|array $values, string|bool|int|float|array|null $default = false, bool $onlyParams = false): mixed;
 
     /**
@@ -66,5 +66,5 @@ interface InputInterface
      * @throws RuntimeException
      */
-    public function bind(InputDefinition $definition);
+    public function bind(InputDefinition $definition): void;
 
     /**
@@ -75,5 +75,5 @@ interface InputInterface
      * @throws RuntimeException When not enough arguments are given
      */
-    public function validate();
+    public function validate(): void;
 
     /**
@@ -91,5 +91,5 @@ interface InputInterface
      * @throws InvalidArgumentException When argument given doesn't exist
      */
-    public function getArgument(string $name);
+    public function getArgument(string $name): mixed;
 
     /**
@@ -100,5 +100,5 @@ interface InputInterface
      * @throws InvalidArgumentException When argument given doesn't exist
      */
-    public function setArgument(string $name, mixed $value);
+    public function setArgument(string $name, mixed $value): void;
 
     /**
@@ -121,5 +121,5 @@ interface InputInterface
      * @throws InvalidArgumentException When option given doesn't exist
      */
-    public function getOption(string $name);
+    public function getOption(string $name): mixed;
 
     /**
@@ -130,5 +130,5 @@ interface InputInterface
      * @throws InvalidArgumentException When option given doesn't exist
      */
-    public function setOption(string $name, mixed $value);
+    public function setOption(string $name, mixed $value): void;
 
     /**
@@ -147,4 +147,4 @@ interface InputInterface
      * @return void
      */
-    public function setInteractive(bool $interactive);
+    public function setInteractive(bool $interactive): void;
 }
diff --git a/src/Symfony/Component/Console/Input/InputOption.php b/src/Symfony/Component/Console/Input/InputOption.php
index fdf88dcc27..cf7a71a3c4 100644
--- a/src/Symfony/Component/Console/Input/InputOption.php
+++ b/src/Symfony/Component/Console/Input/InputOption.php
@@ -182,5 +182,5 @@ class InputOption
      * @return void
      */
-    public function setDefault(string|bool|int|float|array $default = null)
+    public function setDefault(string|bool|int|float|array $default = null): void
     {
         if (1 > \func_num_args()) {
diff --git a/src/Symfony/Component/Console/Input/StreamableInputInterface.php b/src/Symfony/Component/Console/Input/StreamableInputInterface.php
index 4b95fcb11e..b95fab2601 100644
--- a/src/Symfony/Component/Console/Input/StreamableInputInterface.php
+++ b/src/Symfony/Component/Console/Input/StreamableInputInterface.php
@@ -29,5 +29,5 @@ interface StreamableInputInterface extends InputInterface
      * @return void
      */
-    public function setStream($stream);
+    public function setStream($stream): void;
 
     /**
diff --git a/src/Symfony/Component/Console/Output/BufferedOutput.php b/src/Symfony/Component/Console/Output/BufferedOutput.php
index ef5099bfd6..8fb59d794d 100644
--- a/src/Symfony/Component/Console/Output/BufferedOutput.php
+++ b/src/Symfony/Component/Console/Output/BufferedOutput.php
@@ -33,5 +33,5 @@ class BufferedOutput extends Output
      * @return void
      */
-    protected function doWrite(string $message, bool $newline)
+    protected function doWrite(string $message, bool $newline): void
     {
         $this->buffer .= $message;
diff --git a/src/Symfony/Component/Console/Output/ConsoleOutput.php b/src/Symfony/Component/Console/Output/ConsoleOutput.php
index c1eb7cd14b..c7fc040bb4 100644
--- a/src/Symfony/Component/Console/Output/ConsoleOutput.php
+++ b/src/Symfony/Component/Console/Output/ConsoleOutput.php
@@ -68,5 +68,5 @@ class ConsoleOutput extends StreamOutput implements ConsoleOutputInterface
      * @return void
      */
-    public function setDecorated(bool $decorated)
+    public function setDecorated(bool $decorated): void
     {
         parent::setDecorated($decorated);
@@ -77,5 +77,5 @@ class ConsoleOutput extends StreamOutput implements ConsoleOutputInterface
      * @return void
      */
-    public function setFormatter(OutputFormatterInterface $formatter)
+    public function setFormatter(OutputFormatterInterface $formatter): void
     {
         parent::setFormatter($formatter);
@@ -86,5 +86,5 @@ class ConsoleOutput extends StreamOutput implements ConsoleOutputInterface
      * @return void
      */
-    public function setVerbosity(int $level)
+    public function setVerbosity(int $level): void
     {
         parent::setVerbosity($level);
@@ -100,5 +100,5 @@ class ConsoleOutput extends StreamOutput implements ConsoleOutputInterface
      * @return void
      */
-    public function setErrorOutput(OutputInterface $error)
+    public function setErrorOutput(OutputInterface $error): void
     {
         $this->stderr = $error;
diff --git a/src/Symfony/Component/Console/Output/ConsoleOutputInterface.php b/src/Symfony/Component/Console/Output/ConsoleOutputInterface.php
index 9c0049c8f9..6ab9a753d5 100644
--- a/src/Symfony/Component/Console/Output/ConsoleOutputInterface.php
+++ b/src/Symfony/Component/Console/Output/ConsoleOutputInterface.php
@@ -28,5 +28,5 @@ interface ConsoleOutputInterface extends OutputInterface
      * @return void
      */
-    public function setErrorOutput(OutputInterface $error);
+    public function setErrorOutput(OutputInterface $error): void;
 
     public function section(): ConsoleSectionOutput;
diff --git a/src/Symfony/Component/Console/Output/ConsoleSectionOutput.php b/src/Symfony/Component/Console/Output/ConsoleSectionOutput.php
index 3f3f1434be..594880b9e3 100644
--- a/src/Symfony/Component/Console/Output/ConsoleSectionOutput.php
+++ b/src/Symfony/Component/Console/Output/ConsoleSectionOutput.php
@@ -64,5 +64,5 @@ class ConsoleSectionOutput extends StreamOutput
      * @return void
      */
-    public function clear(int $lines = null)
+    public function clear(int $lines = null): void
     {
         if (empty($this->content) || !$this->isDecorated()) {
@@ -87,5 +87,5 @@ class ConsoleSectionOutput extends StreamOutput
      * @return void
      */
-    public function overwrite(string|iterable $message)
+    public function overwrite(string|iterable $message): void
     {
         $this->clear();
@@ -167,5 +167,5 @@ class ConsoleSectionOutput extends StreamOutput
      * @return void
      */
-    protected function doWrite(string $message, bool $newline)
+    protected function doWrite(string $message, bool $newline): void
     {
         if (!$this->isDecorated()) {
diff --git a/src/Symfony/Component/Console/Output/NullOutput.php b/src/Symfony/Component/Console/Output/NullOutput.php
index f3aa15b1d4..206df78910 100644
--- a/src/Symfony/Component/Console/Output/NullOutput.php
+++ b/src/Symfony/Component/Console/Output/NullOutput.php
@@ -30,5 +30,5 @@ class NullOutput implements OutputInterface
      * @return void
      */
-    public function setFormatter(OutputFormatterInterface $formatter)
+    public function setFormatter(OutputFormatterInterface $formatter): void
     {
         // do nothing
@@ -44,5 +44,5 @@ class NullOutput implements OutputInterface
      * @return void
      */
-    public function setDecorated(bool $decorated)
+    public function setDecorated(bool $decorated): void
     {
         // do nothing
@@ -57,5 +57,5 @@ class NullOutput implements OutputInterface
      * @return void
      */
-    public function setVerbosity(int $level)
+    public function setVerbosity(int $level): void
     {
         // do nothing
@@ -90,5 +90,5 @@ class NullOutput implements OutputInterface
      * @return void
      */
-    public function writeln(string|iterable $messages, int $options = self::OUTPUT_NORMAL)
+    public function writeln(string|iterable $messages, int $options = self::OUTPUT_NORMAL): void
     {
         // do nothing
@@ -98,5 +98,5 @@ class NullOutput implements OutputInterface
      * @return void
      */
-    public function write(string|iterable $messages, bool $newline = false, int $options = self::OUTPUT_NORMAL)
+    public function write(string|iterable $messages, bool $newline = false, int $options = self::OUTPUT_NORMAL): void
     {
         // do nothing
diff --git a/src/Symfony/Component/Console/Output/Output.php b/src/Symfony/Component/Console/Output/Output.php
index 3a06311a8b..8204b8a744 100644
--- a/src/Symfony/Component/Console/Output/Output.php
+++ b/src/Symfony/Component/Console/Output/Output.php
@@ -48,5 +48,5 @@ abstract class Output implements OutputInterface
      * @return void
      */
-    public function setFormatter(OutputFormatterInterface $formatter)
+    public function setFormatter(OutputFormatterInterface $formatter): void
     {
         $this->formatter = $formatter;
@@ -61,5 +61,5 @@ abstract class Output implements OutputInterface
      * @return void
      */
-    public function setDecorated(bool $decorated)
+    public function setDecorated(bool $decorated): void
     {
         $this->formatter->setDecorated($decorated);
@@ -74,5 +74,5 @@ abstract class Output implements OutputInterface
      * @return void
      */
-    public function setVerbosity(int $level)
+    public function setVerbosity(int $level): void
     {
         $this->verbosity = $level;
@@ -107,5 +107,5 @@ abstract class Output implements OutputInterface
      * @return void
      */
-    public function writeln(string|iterable $messages, int $options = self::OUTPUT_NORMAL)
+    public function writeln(string|iterable $messages, int $options = self::OUTPUT_NORMAL): void
     {
         $this->write($messages, true, $options);
@@ -115,5 +115,5 @@ abstract class Output implements OutputInterface
      * @return void
      */
-    public function write(string|iterable $messages, bool $newline = false, int $options = self::OUTPUT_NORMAL)
+    public function write(string|iterable $messages, bool $newline = false, int $options = self::OUTPUT_NORMAL): void
     {
         if (!is_iterable($messages)) {
@@ -152,4 +152,4 @@ abstract class Output implements OutputInterface
      * @return void
      */
-    abstract protected function doWrite(string $message, bool $newline);
+    abstract protected function doWrite(string $message, bool $newline): void;
 }
diff --git a/src/Symfony/Component/Console/Output/OutputInterface.php b/src/Symfony/Component/Console/Output/OutputInterface.php
index fb1557720f..8b31dee20c 100644
--- a/src/Symfony/Component/Console/Output/OutputInterface.php
+++ b/src/Symfony/Component/Console/Output/OutputInterface.php
@@ -40,5 +40,5 @@ interface OutputInterface
      * @return void
      */
-    public function write(string|iterable $messages, bool $newline = false, int $options = 0);
+    public function write(string|iterable $messages, bool $newline = false, int $options = 0): void;
 
     /**
@@ -50,5 +50,5 @@ interface OutputInterface
      * @return void
      */
-    public function writeln(string|iterable $messages, int $options = 0);
+    public function writeln(string|iterable $messages, int $options = 0): void;
 
     /**
@@ -57,5 +57,5 @@ interface OutputInterface
      * @return void
      */
-    public function setVerbosity(int $level);
+    public function setVerbosity(int $level): void;
 
     /**
@@ -89,5 +89,5 @@ interface OutputInterface
      * @return void
      */
-    public function setDecorated(bool $decorated);
+    public function setDecorated(bool $decorated): void;
 
     /**
@@ -99,5 +99,5 @@ interface OutputInterface
      * @return void
      */
-    public function setFormatter(OutputFormatterInterface $formatter);
+    public function setFormatter(OutputFormatterInterface $formatter): void;
 
     /**
diff --git a/src/Symfony/Component/Console/Output/StreamOutput.php b/src/Symfony/Component/Console/Output/StreamOutput.php
index 155066ea0e..85e07025bc 100644
--- a/src/Symfony/Component/Console/Output/StreamOutput.php
+++ b/src/Symfony/Component/Console/Output/StreamOutput.php
@@ -66,5 +66,5 @@ class StreamOutput extends Output
      * @return void
      */
-    protected function doWrite(string $message, bool $newline)
+    protected function doWrite(string $message, bool $newline): void
     {
         if ($newline) {
diff --git a/src/Symfony/Component/Console/Output/TrimmedBufferOutput.php b/src/Symfony/Component/Console/Output/TrimmedBufferOutput.php
index b00445ece8..5e9b1086b0 100644
--- a/src/Symfony/Component/Console/Output/TrimmedBufferOutput.php
+++ b/src/Symfony/Component/Console/Output/TrimmedBufferOutput.php
@@ -49,5 +49,5 @@ class TrimmedBufferOutput extends Output
      * @return void
      */
-    protected function doWrite(string $message, bool $newline)
+    protected function doWrite(string $message, bool $newline): void
     {
         $this->buffer .= $message;
diff --git a/src/Symfony/Component/Console/Question/Question.php b/src/Symfony/Component/Console/Question/Question.php
index 26896bb531..af97d04ddc 100644
--- a/src/Symfony/Component/Console/Question/Question.php
+++ b/src/Symfony/Component/Console/Question/Question.php
@@ -270,5 +270,5 @@ class Question
      * @return bool
      */
-    protected function isAssoc(array $array)
+    protected function isAssoc(array $array): bool
     {
         return (bool) \count(array_filter(array_keys($array), 'is_string'));
diff --git a/src/Symfony/Component/Console/Style/OutputStyle.php b/src/Symfony/Component/Console/Style/OutputStyle.php
index ddfa8decc2..e67453d9fe 100644
--- a/src/Symfony/Component/Console/Style/OutputStyle.php
+++ b/src/Symfony/Component/Console/Style/OutputStyle.php
@@ -34,5 +34,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return void
      */
-    public function newLine(int $count = 1)
+    public function newLine(int $count = 1): void
     {
         $this->output->write(str_repeat(\PHP_EOL, $count));
@@ -47,5 +47,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return void
      */
-    public function write(string|iterable $messages, bool $newline = false, int $type = self::OUTPUT_NORMAL)
+    public function write(string|iterable $messages, bool $newline = false, int $type = self::OUTPUT_NORMAL): void
     {
         $this->output->write($messages, $newline, $type);
@@ -55,5 +55,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return void
      */
-    public function writeln(string|iterable $messages, int $type = self::OUTPUT_NORMAL)
+    public function writeln(string|iterable $messages, int $type = self::OUTPUT_NORMAL): void
     {
         $this->output->writeln($messages, $type);
@@ -63,5 +63,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return void
      */
-    public function setVerbosity(int $level)
+    public function setVerbosity(int $level): void
     {
         $this->output->setVerbosity($level);
@@ -76,5 +76,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return void
      */
-    public function setDecorated(bool $decorated)
+    public function setDecorated(bool $decorated): void
     {
         $this->output->setDecorated($decorated);
@@ -89,5 +89,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return void
      */
-    public function setFormatter(OutputFormatterInterface $formatter)
+    public function setFormatter(OutputFormatterInterface $formatter): void
     {
         $this->output->setFormatter($formatter);
@@ -122,5 +122,5 @@ abstract class OutputStyle implements OutputInterface, StyleInterface
      * @return OutputInterface
      */
-    protected function getErrorOutput()
+    protected function getErrorOutput(): OutputInterface
     {
         if (!$this->output instanceof ConsoleOutputInterface) {
diff --git a/src/Symfony/Component/Console/Style/StyleInterface.php b/src/Symfony/Component/Console/Style/StyleInterface.php
index e25a65bd24..1d4bb7fe71 100644
--- a/src/Symfony/Component/Console/Style/StyleInterface.php
+++ b/src/Symfony/Component/Console/Style/StyleInterface.php
@@ -24,5 +24,5 @@ interface StyleInterface
      * @return void
      */
-    public function title(string $message);
+    public function title(string $message): void;
 
     /**
@@ -31,5 +31,5 @@ interface StyleInterface
      * @return void
      */
-    public function section(string $message);
+    public function section(string $message): void;
 
     /**
@@ -38,5 +38,5 @@ interface StyleInterface
      * @return void
      */
-    public function listing(array $elements);
+    public function listing(array $elements): void;
 
     /**
@@ -45,5 +45,5 @@ interface StyleInterface
      * @return void
      */
-    public function text(string|array $message);
+    public function text(string|array $message): void;
 
     /**
@@ -52,5 +52,5 @@ interface StyleInterface
      * @return void
      */
-    public function success(string|array $message);
+    public function success(string|array $message): void;
 
     /**
@@ -59,5 +59,5 @@ interface StyleInterface
      * @return void
      */
-    public function error(string|array $message);
+    public function error(string|array $message): void;
 
     /**
@@ -66,5 +66,5 @@ interface StyleInterface
      * @return void
      */
-    public function warning(string|array $message);
+    public function warning(string|array $message): void;
 
     /**
@@ -73,5 +73,5 @@ interface StyleInterface
      * @return void
      */
-    public function note(string|array $message);
+    public function note(string|array $message): void;
 
     /**
@@ -80,5 +80,5 @@ interface StyleInterface
      * @return void
      */
-    public function caution(string|array $message);
+    public function caution(string|array $message): void;
 
     /**
@@ -87,5 +87,5 @@ interface StyleInterface
      * @return void
      */
-    public function table(array $headers, array $rows);
+    public function table(array $headers, array $rows): void;
 
     /**
@@ -114,5 +114,5 @@ interface StyleInterface
      * @return void
      */
-    public function newLine(int $count = 1);
+    public function newLine(int $count = 1): void;
 
     /**
@@ -121,5 +121,5 @@ interface StyleInterface
      * @return void
      */
-    public function progressStart(int $max = 0);
+    public function progressStart(int $max = 0): void;
 
     /**
@@ -128,5 +128,5 @@ interface StyleInterface
      * @return void
      */
-    public function progressAdvance(int $step = 1);
+    public function progressAdvance(int $step = 1): void;
 
     /**
@@ -135,4 +135,4 @@ interface StyleInterface
      * @return void
      */
-    public function progressFinish();
+    public function progressFinish(): void;
 }
diff --git a/src/Symfony/Component/Console/Style/SymfonyStyle.php b/src/Symfony/Component/Console/Style/SymfonyStyle.php
index cecce6c01b..f2e0c7fdf5 100644
--- a/src/Symfony/Component/Console/Style/SymfonyStyle.php
+++ b/src/Symfony/Component/Console/Style/SymfonyStyle.php
@@ -64,5 +64,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function block(string|array $messages, string $type = null, string $style = null, string $prefix = ' ', bool $padding = false, bool $escape = true)
+    public function block(string|array $messages, string $type = null, string $style = null, string $prefix = ' ', bool $padding = false, bool $escape = true): void
     {
         $messages = \is_array($messages) ? array_values($messages) : [$messages];
@@ -76,5 +76,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function title(string $message)
+    public function title(string $message): void
     {
         $this->autoPrependBlock();
@@ -89,5 +89,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function section(string $message)
+    public function section(string $message): void
     {
         $this->autoPrependBlock();
@@ -102,5 +102,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function listing(array $elements)
+    public function listing(array $elements): void
     {
         $this->autoPrependText();
@@ -114,5 +114,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function text(string|array $message)
+    public function text(string|array $message): void
     {
         $this->autoPrependText();
@@ -129,5 +129,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function comment(string|array $message)
+    public function comment(string|array $message): void
     {
         $this->block($message, null, null, '<fg=default;bg=default> // </>', false, false);
@@ -137,5 +137,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function success(string|array $message)
+    public function success(string|array $message): void
     {
         $this->block($message, 'OK', 'fg=black;bg=green', ' ', true);
@@ -145,5 +145,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function error(string|array $message)
+    public function error(string|array $message): void
     {
         $this->block($message, 'ERROR', 'fg=white;bg=red', ' ', true);
@@ -153,5 +153,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function warning(string|array $message)
+    public function warning(string|array $message): void
     {
         $this->block($message, 'WARNING', 'fg=black;bg=yellow', ' ', true);
@@ -161,5 +161,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function note(string|array $message)
+    public function note(string|array $message): void
     {
         $this->block($message, 'NOTE', 'fg=yellow', ' ! ');
@@ -171,5 +171,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function info(string|array $message)
+    public function info(string|array $message): void
     {
         $this->block($message, 'INFO', 'fg=green', ' ', true);
@@ -179,5 +179,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function caution(string|array $message)
+    public function caution(string|array $message): void
     {
         $this->block($message, 'CAUTION', 'fg=white;bg=red', ' ! ', true);
@@ -187,5 +187,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function table(array $headers, array $rows)
+    public function table(array $headers, array $rows): void
     {
         $this->createTable()
@@ -203,5 +203,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function horizontalTable(array $headers, array $rows)
+    public function horizontalTable(array $headers, array $rows): void
     {
         $this->createTable()
@@ -225,5 +225,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function definitionList(string|array|TableSeparator ...$list)
+    public function definitionList(string|array|TableSeparator ...$list): void
     {
         $headers = [];
@@ -289,5 +289,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function progressStart(int $max = 0)
+    public function progressStart(int $max = 0): void
     {
         $this->progressBar = $this->createProgressBar($max);
@@ -298,5 +298,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function progressAdvance(int $step = 1)
+    public function progressAdvance(int $step = 1): void
     {
         $this->getProgressBar()->advance($step);
@@ -306,5 +306,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function progressFinish()
+    public function progressFinish(): void
     {
         $this->getProgressBar()->finish();
@@ -362,5 +362,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function writeln(string|iterable $messages, int $type = self::OUTPUT_NORMAL)
+    public function writeln(string|iterable $messages, int $type = self::OUTPUT_NORMAL): void
     {
         if (!is_iterable($messages)) {
@@ -377,5 +377,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function write(string|iterable $messages, bool $newline = false, int $type = self::OUTPUT_NORMAL)
+    public function write(string|iterable $messages, bool $newline = false, int $type = self::OUTPUT_NORMAL): void
     {
         if (!is_iterable($messages)) {
@@ -392,5 +392,5 @@ class SymfonyStyle extends OutputStyle
      * @return void
      */
-    public function newLine(int $count = 1)
+    public function newLine(int $count = 1): void
     {
         parent::newLine($count);
diff --git a/src/Symfony/Component/Console/Tests/EventListener/ErrorListenerTest.php b/src/Symfony/Component/Console/Tests/EventListener/ErrorListenerTest.php
index 6ad89dc522..40020baee7 100644
--- a/src/Symfony/Component/Console/Tests/EventListener/ErrorListenerTest.php
+++ b/src/Symfony/Component/Console/Tests/EventListener/ErrorListenerTest.php
@@ -141,5 +141,5 @@ class NonStringInput extends Input
     }
 
-    public function parse()
+    public function parse(): void
     {
     }
diff --git a/src/Symfony/Component/Console/Tests/Output/OutputTest.php b/src/Symfony/Component/Console/Tests/Output/OutputTest.php
index f337c4ddd5..b7c0a98d9f 100644
--- a/src/Symfony/Component/Console/Tests/Output/OutputTest.php
+++ b/src/Symfony/Component/Console/Tests/Output/OutputTest.php
@@ -183,5 +183,5 @@ class TestOutput extends Output
     }
 
-    protected function doWrite(string $message, bool $newline)
+    protected function doWrite(string $message, bool $newline): void
     {
         $this->output .= $message.($newline ? "\n" : '');
diff --git a/src/Symfony/Component/CssSelector/Parser/Reader.php b/src/Symfony/Component/CssSelector/Parser/Reader.php
index 7f6ae7a600..d79db02567 100644
--- a/src/Symfony/Component/CssSelector/Parser/Reader.php
+++ b/src/Symfony/Component/CssSelector/Parser/Reader.php
@@ -57,5 +57,5 @@ class Reader
      * @return int|false
      */
-    public function getOffset(string $string): int|bool
+    public function getOffset(string $string): int|false
     {
         $position = strpos($this->source, $string, $this->position);
diff --git a/src/Symfony/Component/DependencyInjection/Argument/ArgumentInterface.php b/src/Symfony/Component/DependencyInjection/Argument/ArgumentInterface.php
index 3b39f36625..de2d7f2536 100644
--- a/src/Symfony/Component/DependencyInjection/Argument/ArgumentInterface.php
+++ b/src/Symfony/Component/DependencyInjection/Argument/ArgumentInterface.php
@@ -24,4 +24,4 @@ interface ArgumentInterface
      * @return void
      */
-    public function setValues(array $values);
+    public function setValues(array $values): void;
 }
diff --git a/src/Symfony/Component/DependencyInjection/Argument/IteratorArgument.php b/src/Symfony/Component/DependencyInjection/Argument/IteratorArgument.php
index aedd1e659e..92aff35b84 100644
--- a/src/Symfony/Component/DependencyInjection/Argument/IteratorArgument.php
+++ b/src/Symfony/Component/DependencyInjection/Argument/IteratorArgument.php
@@ -34,5 +34,5 @@ class IteratorArgument implements ArgumentInterface
      * @return void
      */
-    public function setValues(array $values)
+    public function setValues(array $values): void
     {
         $this->values = $values;
diff --git a/src/Symfony/Component/DependencyInjection/Argument/ServiceClosureArgument.php b/src/Symfony/Component/DependencyInjection/Argument/ServiceClosureArgument.php
index be86412bcb..28f53536bc 100644
--- a/src/Symfony/Component/DependencyInjection/Argument/ServiceClosureArgument.php
+++ b/src/Symfony/Component/DependencyInjection/Argument/ServiceClosureArgument.php
@@ -36,5 +36,5 @@ class ServiceClosureArgument implements ArgumentInterface
      * @return void
      */
-    public function setValues(array $values)
+    public function setValues(array $values): void
     {
         if ([0] !== array_keys($values)) {
diff --git a/src/Symfony/Component/DependencyInjection/Argument/ServiceLocatorArgument.php b/src/Symfony/Component/DependencyInjection/Argument/ServiceLocatorArgument.php
index de533fcca6..ed25852022 100644
--- a/src/Symfony/Component/DependencyInjection/Argument/ServiceLocatorArgument.php
+++ b/src/Symfony/Component/DependencyInjection/Argument/ServiceLocatorArgument.php
@@ -45,5 +45,5 @@ class ServiceLocatorArgument implements ArgumentInterface
      * @return void
      */
-    public function setValues(array $values)
+    public function setValues(array $values): void
     {
         $this->values = $values;
diff --git a/src/Symfony/Component/DependencyInjection/Argument/TaggedIteratorArgument.php b/src/Symfony/Component/DependencyInjection/Argument/TaggedIteratorArgument.php
index b4e982c457..521a9531f8 100644
--- a/src/Symfony/Component/DependencyInjection/Argument/TaggedIteratorArgument.php
+++ b/src/Symfony/Component/DependencyInjection/Argument/TaggedIteratorArgument.php
@@ -56,5 +56,5 @@ class TaggedIteratorArgument extends IteratorArgument
      * @return string
      */
-    public function getTag()
+    public function getTag(): string
     {
         return $this->tag;
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/AbstractRecursivePass.php b/src/Symfony/Component/DependencyInjection/Compiler/AbstractRecursivePass.php
index 95251dec82..74c2b38eb8 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/AbstractRecursivePass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/AbstractRecursivePass.php
@@ -40,5 +40,5 @@ abstract class AbstractRecursivePass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->container = $container;
@@ -54,5 +54,5 @@ abstract class AbstractRecursivePass implements CompilerPassInterface
      * @return void
      */
-    protected function enableExpressionProcessing()
+    protected function enableExpressionProcessing(): void
     {
         $this->processExpressions = true;
@@ -74,5 +74,5 @@ abstract class AbstractRecursivePass implements CompilerPassInterface
      * @return mixed
      */
-    protected function processValue(mixed $value, bool $isRoot = false)
+    protected function processValue(mixed $value, bool $isRoot = false): mixed
     {
         if (\is_array($value)) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/AnalyzeServiceReferencesPass.php b/src/Symfony/Component/DependencyInjection/Compiler/AnalyzeServiceReferencesPass.php
index de033d9847..e515b6344c 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/AnalyzeServiceReferencesPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/AnalyzeServiceReferencesPass.php
@@ -58,5 +58,5 @@ class AnalyzeServiceReferencesPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->container = $container;
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/AutoAliasServicePass.php b/src/Symfony/Component/DependencyInjection/Compiler/AutoAliasServicePass.php
index 3f070dcc0c..aa0e5186bf 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/AutoAliasServicePass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/AutoAliasServicePass.php
@@ -24,5 +24,5 @@ class AutoAliasServicePass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->findTaggedServiceIds('auto_alias') as $serviceId => $tags) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/AutowirePass.php b/src/Symfony/Component/DependencyInjection/Compiler/AutowirePass.php
index 9d9250b9f9..4f78f4ddeb 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/AutowirePass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/AutowirePass.php
@@ -62,5 +62,5 @@ class AutowirePass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         try {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/CheckCircularReferencesPass.php b/src/Symfony/Component/DependencyInjection/Compiler/CheckCircularReferencesPass.php
index 1fb8935c3e..1cfccaa671 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/CheckCircularReferencesPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/CheckCircularReferencesPass.php
@@ -35,5 +35,5 @@ class CheckCircularReferencesPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $graph = $container->getCompiler()->getServiceReferenceGraph();
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/CheckDefinitionValidityPass.php b/src/Symfony/Component/DependencyInjection/Compiler/CheckDefinitionValidityPass.php
index c62345f26e..098772e2ef 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/CheckDefinitionValidityPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/CheckDefinitionValidityPass.php
@@ -38,5 +38,5 @@ class CheckDefinitionValidityPass implements CompilerPassInterface
      * @throws RuntimeException When the Definition is invalid
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->getDefinitions() as $id => $definition) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/CheckExceptionOnInvalidReferenceBehaviorPass.php b/src/Symfony/Component/DependencyInjection/Compiler/CheckExceptionOnInvalidReferenceBehaviorPass.php
index 8f828d3221..fb41bd49a3 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/CheckExceptionOnInvalidReferenceBehaviorPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/CheckExceptionOnInvalidReferenceBehaviorPass.php
@@ -29,5 +29,5 @@ class CheckExceptionOnInvalidReferenceBehaviorPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->serviceLocatorContextIds = [];
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/Compiler.php b/src/Symfony/Component/DependencyInjection/Compiler/Compiler.php
index c8cbccb4b9..0446970598 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/Compiler.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/Compiler.php
@@ -45,5 +45,5 @@ class Compiler
      * @return void
      */
-    public function addPass(CompilerPassInterface $pass, string $type = PassConfig::TYPE_BEFORE_OPTIMIZATION, int $priority = 0)
+    public function addPass(CompilerPassInterface $pass, string $type = PassConfig::TYPE_BEFORE_OPTIMIZATION, int $priority = 0): void
     {
         $this->passConfig->addPass($pass, $type, $priority);
@@ -55,5 +55,5 @@ class Compiler
      * @return void
      */
-    public function log(CompilerPassInterface $pass, string $message)
+    public function log(CompilerPassInterface $pass, string $message): void
     {
         if (str_contains($message, "\n")) {
@@ -74,5 +74,5 @@ class Compiler
      * @return void
      */
-    public function compile(ContainerBuilder $container)
+    public function compile(ContainerBuilder $container): void
     {
         try {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php b/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php
index 2ad4a048ba..719267be1e 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/CompilerPassInterface.php
@@ -26,4 +26,4 @@ interface CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container);
+    public function process(ContainerBuilder $container): void;
 }
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/DecoratorServicePass.php b/src/Symfony/Component/DependencyInjection/Compiler/DecoratorServicePass.php
index c38bfa7744..10d999f093 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/DecoratorServicePass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/DecoratorServicePass.php
@@ -31,5 +31,5 @@ class DecoratorServicePass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $definitions = new \SplPriorityQueue();
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ExtensionCompilerPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ExtensionCompilerPass.php
index 953b7f942e..96912701e5 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ExtensionCompilerPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ExtensionCompilerPass.php
@@ -25,5 +25,5 @@ class ExtensionCompilerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->getExtensions() as $extension) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/InlineServiceDefinitionsPass.php b/src/Symfony/Component/DependencyInjection/Compiler/InlineServiceDefinitionsPass.php
index f4eb931412..0e5448aa91 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/InlineServiceDefinitionsPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/InlineServiceDefinitionsPass.php
@@ -41,5 +41,5 @@ class InlineServiceDefinitionsPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->container = $container;
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/MergeExtensionConfigurationPass.php b/src/Symfony/Component/DependencyInjection/Compiler/MergeExtensionConfigurationPass.php
index cd8ebfe0f7..36cd2b93a4 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/MergeExtensionConfigurationPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/MergeExtensionConfigurationPass.php
@@ -33,5 +33,5 @@ class MergeExtensionConfigurationPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $parameters = $container->getParameterBag()->all();
@@ -169,10 +169,10 @@ class MergeExtensionConfigurationContainerBuilder extends ContainerBuilder
     }
 
-    public function registerExtension(ExtensionInterface $extension)
+    public function registerExtension(ExtensionInterface $extension): void
     {
         throw new LogicException(sprintf('You cannot register extension "%s" from "%s". Extensions must be registered before the container is compiled.', get_debug_type($extension), $this->extensionClass));
     }
 
-    public function compile(bool $resolveEnvPlaceholders = false)
+    public function compile(bool $resolveEnvPlaceholders = false): void
     {
         throw new LogicException(sprintf('Cannot compile the container in extension "%s".', $this->extensionClass));
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/PassConfig.php b/src/Symfony/Component/DependencyInjection/Compiler/PassConfig.php
index 16b24cc710..c8296e7c1d 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/PassConfig.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/PassConfig.php
@@ -126,5 +126,5 @@ class PassConfig
      * @throws InvalidArgumentException when a pass type doesn't exist
      */
-    public function addPass(CompilerPassInterface $pass, string $type = self::TYPE_BEFORE_OPTIMIZATION, int $priority = 0)
+    public function addPass(CompilerPassInterface $pass, string $type = self::TYPE_BEFORE_OPTIMIZATION, int $priority = 0): void
     {
         $property = $type.'Passes';
@@ -202,5 +202,5 @@ class PassConfig
      * @return void
      */
-    public function setMergePass(CompilerPassInterface $pass)
+    public function setMergePass(CompilerPassInterface $pass): void
     {
         $this->mergePass = $pass;
@@ -214,5 +214,5 @@ class PassConfig
      * @return void
      */
-    public function setAfterRemovingPasses(array $passes)
+    public function setAfterRemovingPasses(array $passes): void
     {
         $this->afterRemovingPasses = [$passes];
@@ -226,5 +226,5 @@ class PassConfig
      * @return void
      */
-    public function setBeforeOptimizationPasses(array $passes)
+    public function setBeforeOptimizationPasses(array $passes): void
     {
         $this->beforeOptimizationPasses = [$passes];
@@ -238,5 +238,5 @@ class PassConfig
      * @return void
      */
-    public function setBeforeRemovingPasses(array $passes)
+    public function setBeforeRemovingPasses(array $passes): void
     {
         $this->beforeRemovingPasses = [$passes];
@@ -250,5 +250,5 @@ class PassConfig
      * @return void
      */
-    public function setOptimizationPasses(array $passes)
+    public function setOptimizationPasses(array $passes): void
     {
         $this->optimizationPasses = [$passes];
@@ -262,5 +262,5 @@ class PassConfig
      * @return void
      */
-    public function setRemovingPasses(array $passes)
+    public function setRemovingPasses(array $passes): void
     {
         $this->removingPasses = [$passes];
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/RegisterEnvVarProcessorsPass.php b/src/Symfony/Component/DependencyInjection/Compiler/RegisterEnvVarProcessorsPass.php
index 2a706bfe5e..68f25a4ff8 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/RegisterEnvVarProcessorsPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/RegisterEnvVarProcessorsPass.php
@@ -31,5 +31,5 @@ class RegisterEnvVarProcessorsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $bag = $container->getParameterBag();
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/RegisterReverseContainerPass.php b/src/Symfony/Component/DependencyInjection/Compiler/RegisterReverseContainerPass.php
index aa4cca3571..4365ecffde 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/RegisterReverseContainerPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/RegisterReverseContainerPass.php
@@ -33,5 +33,5 @@ class RegisterReverseContainerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('reverse_container')) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/RemoveAbstractDefinitionsPass.php b/src/Symfony/Component/DependencyInjection/Compiler/RemoveAbstractDefinitionsPass.php
index d0ebfcc509..9b50d622aa 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/RemoveAbstractDefinitionsPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/RemoveAbstractDefinitionsPass.php
@@ -24,5 +24,5 @@ class RemoveAbstractDefinitionsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->getDefinitions() as $id => $definition) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/RemoveBuildParametersPass.php b/src/Symfony/Component/DependencyInjection/Compiler/RemoveBuildParametersPass.php
index 75e714475c..e5bb34a465 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/RemoveBuildParametersPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/RemoveBuildParametersPass.php
@@ -24,5 +24,5 @@ class RemoveBuildParametersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $parameterBag = $container->getParameterBag();
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/RemovePrivateAliasesPass.php b/src/Symfony/Component/DependencyInjection/Compiler/RemovePrivateAliasesPass.php
index 93c3fd2672..250a640d63 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/RemovePrivateAliasesPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/RemovePrivateAliasesPass.php
@@ -28,5 +28,5 @@ class RemovePrivateAliasesPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->getAliases() as $id => $alias) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/RemoveUnusedDefinitionsPass.php b/src/Symfony/Component/DependencyInjection/Compiler/RemoveUnusedDefinitionsPass.php
index df97a62f7e..60126d8d06 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/RemoveUnusedDefinitionsPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/RemoveUnusedDefinitionsPass.php
@@ -30,5 +30,5 @@ class RemoveUnusedDefinitionsPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         try {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ReplaceAliasByActualDefinitionPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ReplaceAliasByActualDefinitionPass.php
index 808cde2081..83063d607d 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ReplaceAliasByActualDefinitionPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ReplaceAliasByActualDefinitionPass.php
@@ -34,5 +34,5 @@ class ReplaceAliasByActualDefinitionPass extends AbstractRecursivePass
      * @throws InvalidArgumentException if the service definition does not exist
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         // First collect all alias targets that need to be replaced
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveBindingsPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveBindingsPass.php
index 55a358efdf..be943ae655 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveBindingsPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveBindingsPass.php
@@ -36,5 +36,5 @@ class ResolveBindingsPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->usedBindings = $container->getRemovedBindingIds();
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveClassPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveClassPass.php
index 468837672e..bdfa98bfa6 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveClassPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveClassPass.php
@@ -24,5 +24,5 @@ class ResolveClassPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->getDefinitions() as $id => $definition) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveDecoratorStackPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveDecoratorStackPass.php
index da02622b21..395c5a1de6 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveDecoratorStackPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveDecoratorStackPass.php
@@ -28,5 +28,5 @@ class ResolveDecoratorStackPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $stacks = [];
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveHotPathPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveHotPathPass.php
index bffb9dab85..40e484f5a5 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveHotPathPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveHotPathPass.php
@@ -29,5 +29,5 @@ class ResolveHotPathPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         try {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveInstanceofConditionalsPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveInstanceofConditionalsPass.php
index 88d6fa01fd..d057c13802 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveInstanceofConditionalsPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveInstanceofConditionalsPass.php
@@ -28,5 +28,5 @@ class ResolveInstanceofConditionalsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($container->getAutoconfiguredInstanceof() as $interface => $definition) {
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveInvalidReferencesPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveInvalidReferencesPass.php
index 7a2a69aa6a..7a265cc8aa 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveInvalidReferencesPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveInvalidReferencesPass.php
@@ -39,5 +39,5 @@ class ResolveInvalidReferencesPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->container = $container;
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveNoPreloadPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveNoPreloadPass.php
index 3302dd2cd2..459c22434b 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveNoPreloadPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveNoPreloadPass.php
@@ -30,5 +30,5 @@ class ResolveNoPreloadPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->container = $container;
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveParameterPlaceHoldersPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveParameterPlaceHoldersPass.php
index c4a1412ff2..2bb03c253e 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveParameterPlaceHoldersPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveParameterPlaceHoldersPass.php
@@ -37,5 +37,5 @@ class ResolveParameterPlaceHoldersPass extends AbstractRecursivePass
      * @throws ParameterNotFoundException
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->bag = $container->getParameterBag();
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ResolveReferencesToAliasesPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ResolveReferencesToAliasesPass.php
index 3176d405f8..0bbc25ba9e 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ResolveReferencesToAliasesPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ResolveReferencesToAliasesPass.php
@@ -26,5 +26,5 @@ class ResolveReferencesToAliasesPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         parent::process($container);
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ServiceReferenceGraphNode.php b/src/Symfony/Component/DependencyInjection/Compiler/ServiceReferenceGraphNode.php
index e7f42f87db..8c995103ad 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ServiceReferenceGraphNode.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ServiceReferenceGraphNode.php
@@ -38,5 +38,5 @@ class ServiceReferenceGraphNode
      * @return void
      */
-    public function addInEdge(ServiceReferenceGraphEdge $edge)
+    public function addInEdge(ServiceReferenceGraphEdge $edge): void
     {
         $this->inEdges[] = $edge;
@@ -46,5 +46,5 @@ class ServiceReferenceGraphNode
      * @return void
      */
-    public function addOutEdge(ServiceReferenceGraphEdge $edge)
+    public function addOutEdge(ServiceReferenceGraphEdge $edge): void
     {
         $this->outEdges[] = $edge;
@@ -108,5 +108,5 @@ class ServiceReferenceGraphNode
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->inEdges = $this->outEdges = [];
diff --git a/src/Symfony/Component/DependencyInjection/Compiler/ValidateEnvPlaceholdersPass.php b/src/Symfony/Component/DependencyInjection/Compiler/ValidateEnvPlaceholdersPass.php
index 2d6542660b..20287f9286 100644
--- a/src/Symfony/Component/DependencyInjection/Compiler/ValidateEnvPlaceholdersPass.php
+++ b/src/Symfony/Component/DependencyInjection/Compiler/ValidateEnvPlaceholdersPass.php
@@ -34,5 +34,5 @@ class ValidateEnvPlaceholdersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $this->extensionConfig = [];
diff --git a/src/Symfony/Component/DependencyInjection/Container.php b/src/Symfony/Component/DependencyInjection/Container.php
index 3ea2228b94..f1d7078383 100644
--- a/src/Symfony/Component/DependencyInjection/Container.php
+++ b/src/Symfony/Component/DependencyInjection/Container.php
@@ -83,5 +83,5 @@ class Container implements ContainerInterface, ResetInterface
      * @return void
      */
-    public function compile()
+    public function compile(): void
     {
         $this->parameterBag->resolve();
@@ -118,5 +118,5 @@ class Container implements ContainerInterface, ResetInterface
      * @throws ParameterNotFoundException if the parameter is not defined
      */
-    public function getParameter(string $name)
+    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
     {
         return $this->parameterBag->get($name);
@@ -131,5 +131,5 @@ class Container implements ContainerInterface, ResetInterface
      * @return void
      */
-    public function setParameter(string $name, array|bool|string|int|float|\UnitEnum|null $value)
+    public function setParameter(string $name, array|bool|string|int|float|\UnitEnum|null $value): void
     {
         $this->parameterBag->set($name, $value);
@@ -144,5 +144,5 @@ class Container implements ContainerInterface, ResetInterface
      * @return void
      */
-    public function set(string $id, ?object $service)
+    public function set(string $id, ?object $service): void
     {
         // Runs the internal initializer; used by the dumped container to include always-needed files
@@ -287,5 +287,5 @@ class Container implements ContainerInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $services = $this->services + $this->privates;
@@ -342,5 +342,5 @@ class Container implements ContainerInterface, ResetInterface
      * @return mixed
      */
-    protected function load(string $file)
+    protected function load(string $file): mixed
     {
         return require $file;
diff --git a/src/Symfony/Component/DependencyInjection/ContainerAwareInterface.php b/src/Symfony/Component/DependencyInjection/ContainerAwareInterface.php
index 084a321ab5..09fb37f3aa 100644
--- a/src/Symfony/Component/DependencyInjection/ContainerAwareInterface.php
+++ b/src/Symfony/Component/DependencyInjection/ContainerAwareInterface.php
@@ -24,4 +24,4 @@ interface ContainerAwareInterface
      * @return void
      */
-    public function setContainer(?ContainerInterface $container);
+    public function setContainer(?ContainerInterface $container): void;
 }
diff --git a/src/Symfony/Component/DependencyInjection/ContainerAwareTrait.php b/src/Symfony/Component/DependencyInjection/ContainerAwareTrait.php
index ac67b468c5..bc1e395810 100644
--- a/src/Symfony/Component/DependencyInjection/ContainerAwareTrait.php
+++ b/src/Symfony/Component/DependencyInjection/ContainerAwareTrait.php
@@ -27,5 +27,5 @@ trait ContainerAwareTrait
      * @return void
      */
-    public function setContainer(ContainerInterface $container = null)
+    public function setContainer(ContainerInterface $container = null): void
     {
         if (1 > \func_num_args()) {
diff --git a/src/Symfony/Component/DependencyInjection/ContainerBuilder.php b/src/Symfony/Component/DependencyInjection/ContainerBuilder.php
index 44df682ebc..e5957c6f57 100644
--- a/src/Symfony/Component/DependencyInjection/ContainerBuilder.php
+++ b/src/Symfony/Component/DependencyInjection/ContainerBuilder.php
@@ -179,5 +179,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function setResourceTracking(bool $track)
+    public function setResourceTracking(bool $track): void
     {
         $this->trackResources = $track;
@@ -197,5 +197,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function setProxyInstantiator(InstantiatorInterface $proxyInstantiator)
+    public function setProxyInstantiator(InstantiatorInterface $proxyInstantiator): void
     {
         $this->proxyInstantiator = $proxyInstantiator;
@@ -205,5 +205,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function registerExtension(ExtensionInterface $extension)
+    public function registerExtension(ExtensionInterface $extension): void
     {
         $this->extensions[$extension->getAlias()] = $extension;
@@ -487,5 +487,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @throws BadMethodCallException When this ContainerBuilder is compiled
      */
-    public function set(string $id, ?object $service)
+    public function set(string $id, ?object $service): void
     {
         if ($this->isCompiled() && (isset($this->definitions[$id]) && !$this->definitions[$id]->isSynthetic())) {
@@ -504,5 +504,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function removeDefinition(string $id)
+    public function removeDefinition(string $id): void
     {
         if (isset($this->definitions[$id])) {
@@ -616,5 +616,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @throws BadMethodCallException When this ContainerBuilder is compiled
      */
-    public function merge(self $container)
+    public function merge(self $container): void
     {
         if ($this->isCompiled()) {
@@ -708,5 +708,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function prependExtensionConfig(string $name, array $config)
+    public function prependExtensionConfig(string $name, array $config): void
     {
         if (!isset($this->extensionConfigs[$name])) {
@@ -752,5 +752,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function compile(bool $resolveEnvPlaceholders = false)
+    public function compile(bool $resolveEnvPlaceholders = false): void
     {
         $compiler = $this->getCompiler();
@@ -816,5 +816,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function addAliases(array $aliases)
+    public function addAliases(array $aliases): void
     {
         foreach ($aliases as $alias => $id) {
@@ -830,5 +830,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function setAliases(array $aliases)
+    public function setAliases(array $aliases): void
     {
         $this->aliasDefinitions = [];
@@ -864,5 +864,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function removeAlias(string $alias)
+    public function removeAlias(string $alias): void
     {
         if (isset($this->aliasDefinitions[$alias])) {
@@ -926,5 +926,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function addDefinitions(array $definitions)
+    public function addDefinitions(array $definitions): void
     {
         foreach ($definitions as $id => $definition) {
@@ -940,5 +940,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function setDefinitions(array $definitions)
+    public function setDefinitions(array $definitions): void
     {
         $this->definitions = [];
@@ -1338,5 +1338,5 @@ class ContainerBuilder extends Container implements TaggedContainerInterface
      * @return void
      */
-    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider)
+    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider): void
     {
         $this->expressionLanguageProviders[] = $provider;
diff --git a/src/Symfony/Component/DependencyInjection/ContainerInterface.php b/src/Symfony/Component/DependencyInjection/ContainerInterface.php
index f70a8a9a66..1bf83ae21f 100644
--- a/src/Symfony/Component/DependencyInjection/ContainerInterface.php
+++ b/src/Symfony/Component/DependencyInjection/ContainerInterface.php
@@ -34,5 +34,5 @@ interface ContainerInterface extends PsrContainerInterface
      * @return void
      */
-    public function set(string $id, ?object $service);
+    public function set(string $id, ?object $service): void;
 
     /**
@@ -62,5 +62,5 @@ interface ContainerInterface extends PsrContainerInterface
      * @throws ParameterNotFoundException if the parameter is not defined
      */
-    public function getParameter(string $name);
+    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null;
 
     public function hasParameter(string $name): bool;
@@ -69,4 +69,4 @@ interface ContainerInterface extends PsrContainerInterface
      * @return void
      */
-    public function setParameter(string $name, array|bool|string|int|float|\UnitEnum|null $value);
+    public function setParameter(string $name, array|bool|string|int|float|\UnitEnum|null $value): void;
 }
diff --git a/src/Symfony/Component/DependencyInjection/Exception/AutowiringFailedException.php b/src/Symfony/Component/DependencyInjection/Exception/AutowiringFailedException.php
index 5f22fa53b6..2ebf0e385d 100644
--- a/src/Symfony/Component/DependencyInjection/Exception/AutowiringFailedException.php
+++ b/src/Symfony/Component/DependencyInjection/Exception/AutowiringFailedException.php
@@ -71,5 +71,5 @@ class AutowiringFailedException extends RuntimeException
      * @return string
      */
-    public function getServiceId()
+    public function getServiceId(): string
     {
         return $this->serviceId;
diff --git a/src/Symfony/Component/DependencyInjection/Exception/ParameterCircularReferenceException.php b/src/Symfony/Component/DependencyInjection/Exception/ParameterCircularReferenceException.php
index 9fc3b50b62..a6c1469c2d 100644
--- a/src/Symfony/Component/DependencyInjection/Exception/ParameterCircularReferenceException.php
+++ b/src/Symfony/Component/DependencyInjection/Exception/ParameterCircularReferenceException.php
@@ -31,5 +31,5 @@ class ParameterCircularReferenceException extends RuntimeException
      * @return array
      */
-    public function getParameters()
+    public function getParameters(): array
     {
         return $this->parameters;
diff --git a/src/Symfony/Component/DependencyInjection/Exception/ParameterNotFoundException.php b/src/Symfony/Component/DependencyInjection/Exception/ParameterNotFoundException.php
index 69f7b3a50c..654537df61 100644
--- a/src/Symfony/Component/DependencyInjection/Exception/ParameterNotFoundException.php
+++ b/src/Symfony/Component/DependencyInjection/Exception/ParameterNotFoundException.php
@@ -51,5 +51,5 @@ class ParameterNotFoundException extends InvalidArgumentException implements Not
      * @return void
      */
-    public function updateRepr()
+    public function updateRepr(): void
     {
         if (null !== $this->sourceId) {
@@ -78,5 +78,5 @@ class ParameterNotFoundException extends InvalidArgumentException implements Not
      * @return string
      */
-    public function getKey()
+    public function getKey(): string
     {
         return $this->key;
@@ -86,5 +86,5 @@ class ParameterNotFoundException extends InvalidArgumentException implements Not
      * @return string|null
      */
-    public function getSourceId()
+    public function getSourceId(): ?string
     {
         return $this->sourceId;
@@ -94,5 +94,5 @@ class ParameterNotFoundException extends InvalidArgumentException implements Not
      * @return string|null
      */
-    public function getSourceKey()
+    public function getSourceKey(): ?string
     {
         return $this->sourceKey;
@@ -102,5 +102,5 @@ class ParameterNotFoundException extends InvalidArgumentException implements Not
      * @return void
      */
-    public function setSourceId(?string $sourceId)
+    public function setSourceId(?string $sourceId): void
     {
         $this->sourceId = $sourceId;
@@ -112,5 +112,5 @@ class ParameterNotFoundException extends InvalidArgumentException implements Not
      * @return void
      */
-    public function setSourceKey(?string $sourceKey)
+    public function setSourceKey(?string $sourceKey): void
     {
         $this->sourceKey = $sourceKey;
diff --git a/src/Symfony/Component/DependencyInjection/Exception/ServiceCircularReferenceException.php b/src/Symfony/Component/DependencyInjection/Exception/ServiceCircularReferenceException.php
index d62c22567b..085d5fa167 100644
--- a/src/Symfony/Component/DependencyInjection/Exception/ServiceCircularReferenceException.php
+++ b/src/Symfony/Component/DependencyInjection/Exception/ServiceCircularReferenceException.php
@@ -33,5 +33,5 @@ class ServiceCircularReferenceException extends RuntimeException
      * @return string
      */
-    public function getServiceId()
+    public function getServiceId(): string
     {
         return $this->serviceId;
@@ -41,5 +41,5 @@ class ServiceCircularReferenceException extends RuntimeException
      * @return array
      */
-    public function getPath()
+    public function getPath(): array
     {
         return $this->path;
diff --git a/src/Symfony/Component/DependencyInjection/Exception/ServiceNotFoundException.php b/src/Symfony/Component/DependencyInjection/Exception/ServiceNotFoundException.php
index d56db7727f..90da421299 100644
--- a/src/Symfony/Component/DependencyInjection/Exception/ServiceNotFoundException.php
+++ b/src/Symfony/Component/DependencyInjection/Exception/ServiceNotFoundException.php
@@ -54,5 +54,5 @@ class ServiceNotFoundException extends InvalidArgumentException implements NotFo
      * @return string
      */
-    public function getId()
+    public function getId(): string
     {
         return $this->id;
@@ -62,5 +62,5 @@ class ServiceNotFoundException extends InvalidArgumentException implements NotFo
      * @return string|null
      */
-    public function getSourceId()
+    public function getSourceId(): ?string
     {
         return $this->sourceId;
@@ -70,5 +70,5 @@ class ServiceNotFoundException extends InvalidArgumentException implements NotFo
      * @return array
      */
-    public function getAlternatives()
+    public function getAlternatives(): array
     {
         return $this->alternatives;
diff --git a/src/Symfony/Component/DependencyInjection/Extension/ConfigurationExtensionInterface.php b/src/Symfony/Component/DependencyInjection/Extension/ConfigurationExtensionInterface.php
index a42967f4da..4e86e16f9d 100644
--- a/src/Symfony/Component/DependencyInjection/Extension/ConfigurationExtensionInterface.php
+++ b/src/Symfony/Component/DependencyInjection/Extension/ConfigurationExtensionInterface.php
@@ -27,4 +27,4 @@ interface ConfigurationExtensionInterface
      * @return ConfigurationInterface|null
      */
-    public function getConfiguration(array $config, ContainerBuilder $container);
+    public function getConfiguration(array $config, ContainerBuilder $container): ?ConfigurationInterface;
 }
diff --git a/src/Symfony/Component/DependencyInjection/Extension/Extension.php b/src/Symfony/Component/DependencyInjection/Extension/Extension.php
index d0bd05ea4b..f9df65fd7c 100644
--- a/src/Symfony/Component/DependencyInjection/Extension/Extension.php
+++ b/src/Symfony/Component/DependencyInjection/Extension/Extension.php
@@ -32,5 +32,5 @@ abstract class Extension implements ExtensionInterface, ConfigurationExtensionIn
      * @return string|false
      */
-    public function getXsdValidationBasePath()
+    public function getXsdValidationBasePath(): string|false
     {
         return false;
@@ -40,5 +40,5 @@ abstract class Extension implements ExtensionInterface, ConfigurationExtensionIn
      * @return string
      */
-    public function getNamespace()
+    public function getNamespace(): string
     {
         return 'http://example.org/schema/dic/'.$this->getAlias();
@@ -77,5 +77,5 @@ abstract class Extension implements ExtensionInterface, ConfigurationExtensionIn
      * @return ConfigurationInterface|null
      */
-    public function getConfiguration(array $config, ContainerBuilder $container)
+    public function getConfiguration(array $config, ContainerBuilder $container): ?ConfigurationInterface
     {
         $class = static::class;
diff --git a/src/Symfony/Component/DependencyInjection/Extension/ExtensionInterface.php b/src/Symfony/Component/DependencyInjection/Extension/ExtensionInterface.php
index bd57eef733..3284e19ede 100644
--- a/src/Symfony/Component/DependencyInjection/Extension/ExtensionInterface.php
+++ b/src/Symfony/Component/DependencyInjection/Extension/ExtensionInterface.php
@@ -30,5 +30,5 @@ interface ExtensionInterface
      * @throws \InvalidArgumentException When provided tag is not defined in this extension
      */
-    public function load(array $configs, ContainerBuilder $container);
+    public function load(array $configs, ContainerBuilder $container): void;
 
     /**
@@ -37,5 +37,5 @@ interface ExtensionInterface
      * @return string
      */
-    public function getNamespace();
+    public function getNamespace(): string;
 
     /**
@@ -44,5 +44,5 @@ interface ExtensionInterface
      * @return string|false
      */
-    public function getXsdValidationBasePath();
+    public function getXsdValidationBasePath(): string|false;
 
     /**
@@ -53,4 +53,4 @@ interface ExtensionInterface
      * @return string
      */
-    public function getAlias();
+    public function getAlias(): string;
 }
diff --git a/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php b/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php
index 0df94e1092..061e7d7fd9 100644
--- a/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php
+++ b/src/Symfony/Component/DependencyInjection/Extension/PrependExtensionInterface.php
@@ -21,4 +21,4 @@ interface PrependExtensionInterface
      * @return void
      */
-    public function prepend(ContainerBuilder $container);
+    public function prepend(ContainerBuilder $container): void;
 }
diff --git a/src/Symfony/Component/DependencyInjection/LazyProxy/Instantiator/InstantiatorInterface.php b/src/Symfony/Component/DependencyInjection/LazyProxy/Instantiator/InstantiatorInterface.php
index f4c6b29258..1402331f9e 100644
--- a/src/Symfony/Component/DependencyInjection/LazyProxy/Instantiator/InstantiatorInterface.php
+++ b/src/Symfony/Component/DependencyInjection/LazyProxy/Instantiator/InstantiatorInterface.php
@@ -31,4 +31,4 @@ interface InstantiatorInterface
      * @return object
      */
-    public function instantiateProxy(ContainerInterface $container, Definition $definition, string $id, callable $realInstantiator);
+    public function instantiateProxy(ContainerInterface $container, Definition $definition, string $id, callable $realInstantiator): object;
 }
diff --git a/src/Symfony/Component/DependencyInjection/Loader/FileLoader.php b/src/Symfony/Component/DependencyInjection/Loader/FileLoader.php
index 86543c1e85..4772c08c3d 100644
--- a/src/Symfony/Component/DependencyInjection/Loader/FileLoader.php
+++ b/src/Symfony/Component/DependencyInjection/Loader/FileLoader.php
@@ -99,5 +99,5 @@ abstract class FileLoader extends BaseFileLoader
      * @return void
      */
-    public function registerClasses(Definition $prototype, string $namespace, string $resource, string|array $exclude = null/* , string $source = null */)
+    public function registerClasses(Definition $prototype, string $namespace, string $resource, string|array $exclude = null/* , string $source = null */): void
     {
         if (!str_ends_with($namespace, '\\')) {
@@ -195,5 +195,5 @@ abstract class FileLoader extends BaseFileLoader
      * @return void
      */
-    public function registerAliasesForSinglyImplementedInterfaces()
+    public function registerAliasesForSinglyImplementedInterfaces(): void
     {
         foreach ($this->interfaces as $interface) {
@@ -211,5 +211,5 @@ abstract class FileLoader extends BaseFileLoader
      * @return void
      */
-    protected function setDefinition(string $id, Definition $definition)
+    protected function setDefinition(string $id, Definition $definition): void
     {
         $this->container->removeBindings($id);
diff --git a/src/Symfony/Component/DependencyInjection/ParameterBag/ContainerBagInterface.php b/src/Symfony/Component/DependencyInjection/ParameterBag/ContainerBagInterface.php
index eeff6538c5..8ac7149b37 100644
--- a/src/Symfony/Component/DependencyInjection/ParameterBag/ContainerBagInterface.php
+++ b/src/Symfony/Component/DependencyInjection/ParameterBag/ContainerBagInterface.php
@@ -40,5 +40,5 @@ interface ContainerBagInterface extends ContainerInterface
      * @throws ParameterNotFoundException if a placeholder references a parameter that does not exist
      */
-    public function resolveValue(mixed $value);
+    public function resolveValue(mixed $value): mixed;
 
     /**
diff --git a/src/Symfony/Component/DependencyInjection/ParameterBag/EnvPlaceholderParameterBag.php b/src/Symfony/Component/DependencyInjection/ParameterBag/EnvPlaceholderParameterBag.php
index 9c66e1f944..619e44fc73 100644
--- a/src/Symfony/Component/DependencyInjection/ParameterBag/EnvPlaceholderParameterBag.php
+++ b/src/Symfony/Component/DependencyInjection/ParameterBag/EnvPlaceholderParameterBag.php
@@ -91,5 +91,5 @@ class EnvPlaceholderParameterBag extends ParameterBag
      * @return void
      */
-    public function clearUnusedEnvPlaceholders()
+    public function clearUnusedEnvPlaceholders(): void
     {
         $this->unusedEnvPlaceholders = [];
@@ -101,5 +101,5 @@ class EnvPlaceholderParameterBag extends ParameterBag
      * @return void
      */
-    public function mergeEnvPlaceholders(self $bag)
+    public function mergeEnvPlaceholders(self $bag): void
     {
         if ($newPlaceholders = $bag->getEnvPlaceholders()) {
@@ -125,5 +125,5 @@ class EnvPlaceholderParameterBag extends ParameterBag
      * @return void
      */
-    public function setProvidedTypes(array $providedTypes)
+    public function setProvidedTypes(array $providedTypes): void
     {
         $this->providedTypes = $providedTypes;
@@ -143,5 +143,5 @@ class EnvPlaceholderParameterBag extends ParameterBag
      * @return void
      */
-    public function resolve()
+    public function resolve(): void
     {
         if ($this->resolved) {
diff --git a/src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php b/src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php
index 1ede090384..7b6b63c599 100644
--- a/src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php
+++ b/src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php
@@ -38,5 +38,5 @@ class FrozenParameterBag extends ParameterBag
      * @return never
      */
-    public function clear()
+    public function clear(): never
     {
         throw new LogicException('Impossible to call clear() on a frozen ParameterBag.');
@@ -46,5 +46,5 @@ class FrozenParameterBag extends ParameterBag
      * @return never
      */
-    public function add(array $parameters)
+    public function add(array $parameters): never
     {
         throw new LogicException('Impossible to call add() on a frozen ParameterBag.');
@@ -54,5 +54,5 @@ class FrozenParameterBag extends ParameterBag
      * @return never
      */
-    public function set(string $name, array|bool|string|int|float|\UnitEnum|null $value)
+    public function set(string $name, array|bool|string|int|float|\UnitEnum|null $value): never
     {
         throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
@@ -62,5 +62,5 @@ class FrozenParameterBag extends ParameterBag
      * @return never
      */
-    public function deprecate(string $name, string $package, string $version, string $message = 'The parameter "%s" is deprecated.')
+    public function deprecate(string $name, string $package, string $version, string $message = 'The parameter "%s" is deprecated.'): never
     {
         throw new LogicException('Impossible to call deprecate() on a frozen ParameterBag.');
@@ -70,5 +70,5 @@ class FrozenParameterBag extends ParameterBag
      * @return never
      */
-    public function remove(string $name)
+    public function remove(string $name): never
     {
         throw new LogicException('Impossible to call remove() on a frozen ParameterBag.');
diff --git a/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBag.php b/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBag.php
index 6ba8a4cf7c..5e5e22bc09 100644
--- a/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBag.php
+++ b/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBag.php
@@ -35,5 +35,5 @@ class ParameterBag implements ParameterBagInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->parameters = [];
@@ -43,5 +43,5 @@ class ParameterBag implements ParameterBagInterface
      * @return void
      */
-    public function add(array $parameters)
+    public function add(array $parameters): void
     {
         foreach ($parameters as $key => $value) {
@@ -104,5 +104,5 @@ class ParameterBag implements ParameterBagInterface
      * @return void
      */
-    public function set(string $name, array|bool|string|int|float|\UnitEnum|null $value)
+    public function set(string $name, array|bool|string|int|float|\UnitEnum|null $value): void
     {
         if (is_numeric($name)) {
@@ -122,5 +122,5 @@ class ParameterBag implements ParameterBagInterface
      * @throws ParameterNotFoundException if the parameter is not defined
      */
-    public function deprecate(string $name, string $package, string $version, string $message = 'The parameter "%s" is deprecated.')
+    public function deprecate(string $name, string $package, string $version, string $message = 'The parameter "%s" is deprecated.'): void
     {
         if (!\array_key_exists($name, $this->parameters)) {
@@ -139,5 +139,5 @@ class ParameterBag implements ParameterBagInterface
      * @return void
      */
-    public function remove(string $name)
+    public function remove(string $name): void
     {
         unset($this->parameters[$name], $this->deprecatedParameters[$name]);
@@ -147,5 +147,5 @@ class ParameterBag implements ParameterBagInterface
      * @return void
      */
-    public function resolve()
+    public function resolve(): void
     {
         if ($this->resolved) {
@@ -259,5 +259,5 @@ class ParameterBag implements ParameterBagInterface
      * @return bool
      */
-    public function isResolved()
+    public function isResolved(): bool
     {
         return $this->resolved;
diff --git a/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBagInterface.php b/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBagInterface.php
index 18ddfde147..b8651648bd 100644
--- a/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBagInterface.php
+++ b/src/Symfony/Component/DependencyInjection/ParameterBag/ParameterBagInterface.php
@@ -29,5 +29,5 @@ interface ParameterBagInterface
      * @throws LogicException if the ParameterBagInterface cannot be cleared
      */
-    public function clear();
+    public function clear(): void;
 
     /**
@@ -38,5 +38,5 @@ interface ParameterBagInterface
      * @throws LogicException if the parameter cannot be added
      */
-    public function add(array $parameters);
+    public function add(array $parameters): void;
 
     /**
@@ -57,5 +57,5 @@ interface ParameterBagInterface
      * @return void
      */
-    public function remove(string $name);
+    public function remove(string $name): void;
 
     /**
@@ -66,5 +66,5 @@ interface ParameterBagInterface
      * @throws LogicException if the parameter cannot be set
      */
-    public function set(string $name, array|bool|string|int|float|\UnitEnum|null $value);
+    public function set(string $name, array|bool|string|int|float|\UnitEnum|null $value): void;
 
     /**
@@ -78,5 +78,5 @@ interface ParameterBagInterface
      * @return void
      */
-    public function resolve();
+    public function resolve(): void;
 
     /**
@@ -87,5 +87,5 @@ interface ParameterBagInterface
      * @throws ParameterNotFoundException if a placeholder references a parameter that does not exist
      */
-    public function resolveValue(mixed $value);
+    public function resolveValue(mixed $value): mixed;
 
     /**
diff --git a/src/Symfony/Component/DependencyInjection/TypedReference.php b/src/Symfony/Component/DependencyInjection/TypedReference.php
index 9b431cd65b..5fdb0643cd 100644
--- a/src/Symfony/Component/DependencyInjection/TypedReference.php
+++ b/src/Symfony/Component/DependencyInjection/TypedReference.php
@@ -41,5 +41,5 @@ class TypedReference extends Reference
      * @return string
      */
-    public function getType()
+    public function getType(): string
     {
         return $this->type;
diff --git a/src/Symfony/Component/DomCrawler/AbstractUriElement.php b/src/Symfony/Component/DomCrawler/AbstractUriElement.php
index f610b014a0..9458751c28 100644
--- a/src/Symfony/Component/DomCrawler/AbstractUriElement.php
+++ b/src/Symfony/Component/DomCrawler/AbstractUriElement.php
@@ -120,4 +120,4 @@ abstract class AbstractUriElement
      * @throws \LogicException If given node is not an anchor
      */
-    abstract protected function setNode(\DOMElement $node);
+    abstract protected function setNode(\DOMElement $node): void;
 }
diff --git a/src/Symfony/Component/DomCrawler/Crawler.php b/src/Symfony/Component/DomCrawler/Crawler.php
index 59eec3068c..b750e80938 100644
--- a/src/Symfony/Component/DomCrawler/Crawler.php
+++ b/src/Symfony/Component/DomCrawler/Crawler.php
@@ -96,5 +96,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->nodes = [];
@@ -115,5 +115,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @throws \InvalidArgumentException when node is not the expected type
      */
-    public function add(\DOMNodeList|\DOMNode|array|string|null $node)
+    public function add(\DOMNodeList|\DOMNode|array|string|null $node): void
     {
         if ($node instanceof \DOMNodeList) {
@@ -139,5 +139,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addContent(string $content, string $type = null)
+    public function addContent(string $content, string $type = null): void
     {
         if (empty($type)) {
@@ -181,5 +181,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addHtmlContent(string $content, string $charset = 'UTF-8')
+    public function addHtmlContent(string $content, string $charset = 'UTF-8'): void
     {
         $dom = $this->parseHtmlString($content, $charset);
@@ -217,5 +217,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addXmlContent(string $content, string $charset = 'UTF-8', int $options = \LIBXML_NONET)
+    public function addXmlContent(string $content, string $charset = 'UTF-8', int $options = \LIBXML_NONET): void
     {
         // remove the default namespace if it's the only namespace to make XPath expressions simpler
@@ -247,5 +247,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addDocument(\DOMDocument $dom)
+    public function addDocument(\DOMDocument $dom): void
     {
         if ($dom->documentElement) {
@@ -261,5 +261,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addNodeList(\DOMNodeList $nodes)
+    public function addNodeList(\DOMNodeList $nodes): void
     {
         foreach ($nodes as $node) {
@@ -277,5 +277,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addNodes(array $nodes)
+    public function addNodes(array $nodes): void
     {
         foreach ($nodes as $node) {
@@ -291,5 +291,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function addNode(\DOMNode $node)
+    public function addNode(\DOMNode $node): void
     {
         if ($node instanceof \DOMDocument) {
@@ -885,5 +885,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function setDefaultNamespacePrefix(string $prefix)
+    public function setDefaultNamespacePrefix(string $prefix): void
     {
         $this->defaultNamespacePrefix = $prefix;
@@ -893,5 +893,5 @@ class Crawler implements \Countable, \IteratorAggregate
      * @return void
      */
-    public function registerNamespace(string $prefix, string $namespace)
+    public function registerNamespace(string $prefix, string $namespace): void
     {
         $this->namespaces[$prefix] = $namespace;
diff --git a/src/Symfony/Component/DomCrawler/Field/ChoiceFormField.php b/src/Symfony/Component/DomCrawler/Field/ChoiceFormField.php
index dcae5490ad..4357de8275 100644
--- a/src/Symfony/Component/DomCrawler/Field/ChoiceFormField.php
+++ b/src/Symfony/Component/DomCrawler/Field/ChoiceFormField.php
@@ -64,5 +64,5 @@ class ChoiceFormField extends FormField
      * @return void
      */
-    public function select(string|array|bool $value)
+    public function select(string|array|bool $value): void
     {
         $this->setValue($value);
@@ -76,5 +76,5 @@ class ChoiceFormField extends FormField
      * @throws \LogicException When the type provided is not correct
      */
-    public function tick()
+    public function tick(): void
     {
         if ('checkbox' !== $this->type) {
@@ -92,5 +92,5 @@ class ChoiceFormField extends FormField
      * @throws \LogicException When the type provided is not correct
      */
-    public function untick()
+    public function untick(): void
     {
         if ('checkbox' !== $this->type) {
@@ -108,5 +108,5 @@ class ChoiceFormField extends FormField
      * @throws \InvalidArgumentException When value type provided is not correct
      */
-    public function setValue(string|array|bool|null $value)
+    public function setValue(string|array|bool|null $value): void
     {
         if ('checkbox' === $this->type && false === $value) {
@@ -187,5 +187,5 @@ class ChoiceFormField extends FormField
      * @throws \LogicException When node type is incorrect
      */
-    protected function initialize()
+    protected function initialize(): void
     {
         if ('input' !== $this->node->nodeName && 'select' !== $this->node->nodeName) {
diff --git a/src/Symfony/Component/DomCrawler/Field/FileFormField.php b/src/Symfony/Component/DomCrawler/Field/FileFormField.php
index 4ebe766f0b..eca59a131d 100644
--- a/src/Symfony/Component/DomCrawler/Field/FileFormField.php
+++ b/src/Symfony/Component/DomCrawler/Field/FileFormField.php
@@ -28,5 +28,5 @@ class FileFormField extends FormField
      * @throws \InvalidArgumentException When error code doesn't exist
      */
-    public function setErrorCode(int $error)
+    public function setErrorCode(int $error): void
     {
         $codes = [\UPLOAD_ERR_INI_SIZE, \UPLOAD_ERR_FORM_SIZE, \UPLOAD_ERR_PARTIAL, \UPLOAD_ERR_NO_FILE, \UPLOAD_ERR_NO_TMP_DIR, \UPLOAD_ERR_CANT_WRITE, \UPLOAD_ERR_EXTENSION];
@@ -43,5 +43,5 @@ class FileFormField extends FormField
      * @return void
      */
-    public function upload(?string $value)
+    public function upload(?string $value): void
     {
         $this->setValue($value);
@@ -53,5 +53,5 @@ class FileFormField extends FormField
      * @return void
      */
-    public function setValue(?string $value)
+    public function setValue(?string $value): void
     {
         if (null !== $value && is_readable($value)) {
@@ -86,5 +86,5 @@ class FileFormField extends FormField
      * @return void
      */
-    public function setFilePath(string $path)
+    public function setFilePath(string $path): void
     {
         parent::setValue($path);
@@ -98,5 +98,5 @@ class FileFormField extends FormField
      * @throws \LogicException When node type is incorrect
      */
-    protected function initialize()
+    protected function initialize(): void
     {
         if ('input' !== $this->node->nodeName) {
diff --git a/src/Symfony/Component/DomCrawler/Field/FormField.php b/src/Symfony/Component/DomCrawler/Field/FormField.php
index b97d54dda0..b6a9ebb549 100644
--- a/src/Symfony/Component/DomCrawler/Field/FormField.php
+++ b/src/Symfony/Component/DomCrawler/Field/FormField.php
@@ -96,5 +96,5 @@ abstract class FormField
      * @return void
      */
-    public function setValue(?string $value)
+    public function setValue(?string $value): void
     {
         $this->value = $value ?? '';
@@ -122,4 +122,4 @@ abstract class FormField
      * @return void
      */
-    abstract protected function initialize();
+    abstract protected function initialize(): void;
 }
diff --git a/src/Symfony/Component/DomCrawler/Field/InputFormField.php b/src/Symfony/Component/DomCrawler/Field/InputFormField.php
index 19d77352fc..ece901b578 100644
--- a/src/Symfony/Component/DomCrawler/Field/InputFormField.php
+++ b/src/Symfony/Component/DomCrawler/Field/InputFormField.php
@@ -29,5 +29,5 @@ class InputFormField extends FormField
      * @throws \LogicException When node type is incorrect
      */
-    protected function initialize()
+    protected function initialize(): void
     {
         if ('input' !== $this->node->nodeName && 'button' !== $this->node->nodeName) {
diff --git a/src/Symfony/Component/DomCrawler/Field/TextareaFormField.php b/src/Symfony/Component/DomCrawler/Field/TextareaFormField.php
index 5168c52251..cf22473776 100644
--- a/src/Symfony/Component/DomCrawler/Field/TextareaFormField.php
+++ b/src/Symfony/Component/DomCrawler/Field/TextareaFormField.php
@@ -26,5 +26,5 @@ class TextareaFormField extends FormField
      * @throws \LogicException When node type is incorrect
      */
-    protected function initialize()
+    protected function initialize(): void
     {
         if ('textarea' !== $this->node->nodeName) {
diff --git a/src/Symfony/Component/DomCrawler/Form.php b/src/Symfony/Component/DomCrawler/Form.php
index 9e53bbb680..51477a8ed7 100644
--- a/src/Symfony/Component/DomCrawler/Form.php
+++ b/src/Symfony/Component/DomCrawler/Form.php
@@ -249,5 +249,5 @@ class Form extends Link implements \ArrayAccess
      * @return void
      */
-    public function remove(string $name)
+    public function remove(string $name): void
     {
         $this->fields->remove($name);
@@ -271,5 +271,5 @@ class Form extends Link implements \ArrayAccess
      * @return void
      */
-    public function set(FormField $field)
+    public function set(FormField $field): void
     {
         $this->fields->add($field);
@@ -358,5 +358,5 @@ class Form extends Link implements \ArrayAccess
      * @throws \LogicException If given node is not a button or input or does not have a form ancestor
      */
-    protected function setNode(\DOMElement $node)
+    protected function setNode(\DOMElement $node): void
     {
         $this->button = $node;
diff --git a/src/Symfony/Component/DomCrawler/Image.php b/src/Symfony/Component/DomCrawler/Image.php
index 725e3aea38..9ada91a4be 100644
--- a/src/Symfony/Component/DomCrawler/Image.php
+++ b/src/Symfony/Component/DomCrawler/Image.php
@@ -30,5 +30,5 @@ class Image extends AbstractUriElement
      * @return void
      */
-    protected function setNode(\DOMElement $node)
+    protected function setNode(\DOMElement $node): void
     {
         if ('img' !== $node->nodeName) {
diff --git a/src/Symfony/Component/DomCrawler/Link.php b/src/Symfony/Component/DomCrawler/Link.php
index 681a2f7a23..07ca3531a1 100644
--- a/src/Symfony/Component/DomCrawler/Link.php
+++ b/src/Symfony/Component/DomCrawler/Link.php
@@ -27,5 +27,5 @@ class Link extends AbstractUriElement
      * @return void
      */
-    protected function setNode(\DOMElement $node)
+    protected function setNode(\DOMElement $node): void
     {
         if ('a' !== $node->nodeName && 'area' !== $node->nodeName && 'link' !== $node->nodeName) {
diff --git a/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php b/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php
index f1b982315c..ed8ad1fab4 100644
--- a/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php
+++ b/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php
@@ -55,5 +55,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    public function addListener(string $eventName, callable|array $listener, int $priority = 0)
+    public function addListener(string $eventName, callable|array $listener, int $priority = 0): void
     {
         $this->dispatcher->addListener($eventName, $listener, $priority);
@@ -63,5 +63,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    public function addSubscriber(EventSubscriberInterface $subscriber)
+    public function addSubscriber(EventSubscriberInterface $subscriber): void
     {
         $this->dispatcher->addSubscriber($subscriber);
@@ -71,5 +71,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    public function removeListener(string $eventName, callable|array $listener)
+    public function removeListener(string $eventName, callable|array $listener): void
     {
         if (isset($this->wrappedListeners[$eventName])) {
@@ -89,5 +89,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    public function removeSubscriber(EventSubscriberInterface $subscriber)
+    public function removeSubscriber(EventSubscriberInterface $subscriber): void
     {
         $this->dispatcher->removeSubscriber($subscriber);
@@ -230,5 +230,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->callStack = null;
@@ -253,5 +253,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    protected function beforeDispatch(string $eventName, object $event)
+    protected function beforeDispatch(string $eventName, object $event): void
     {
     }
@@ -262,5 +262,5 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa
      * @return void
      */
-    protected function afterDispatch(string $eventName, object $event)
+    protected function afterDispatch(string $eventName, object $event): void
     {
     }
diff --git a/src/Symfony/Component/EventDispatcher/DependencyInjection/RegisterListenersPass.php b/src/Symfony/Component/EventDispatcher/DependencyInjection/RegisterListenersPass.php
index c86f438d41..3bfb39db57 100644
--- a/src/Symfony/Component/EventDispatcher/DependencyInjection/RegisterListenersPass.php
+++ b/src/Symfony/Component/EventDispatcher/DependencyInjection/RegisterListenersPass.php
@@ -52,5 +52,5 @@ class RegisterListenersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('event_dispatcher') && !$container->hasAlias('event_dispatcher')) {
diff --git a/src/Symfony/Component/EventDispatcher/EventDispatcher.php b/src/Symfony/Component/EventDispatcher/EventDispatcher.php
index 327803af67..2466d748ec 100644
--- a/src/Symfony/Component/EventDispatcher/EventDispatcher.php
+++ b/src/Symfony/Component/EventDispatcher/EventDispatcher.php
@@ -127,5 +127,5 @@ class EventDispatcher implements EventDispatcherInterface
      * @return void
      */
-    public function addListener(string $eventName, callable|array $listener, int $priority = 0)
+    public function addListener(string $eventName, callable|array $listener, int $priority = 0): void
     {
         $this->listeners[$eventName][$priority][] = $listener;
@@ -136,5 +136,5 @@ class EventDispatcher implements EventDispatcherInterface
      * @return void
      */
-    public function removeListener(string $eventName, callable|array $listener)
+    public function removeListener(string $eventName, callable|array $listener): void
     {
         if (empty($this->listeners[$eventName])) {
@@ -167,5 +167,5 @@ class EventDispatcher implements EventDispatcherInterface
      * @return void
      */
-    public function addSubscriber(EventSubscriberInterface $subscriber)
+    public function addSubscriber(EventSubscriberInterface $subscriber): void
     {
         foreach ($subscriber->getSubscribedEvents() as $eventName => $params) {
@@ -185,5 +185,5 @@ class EventDispatcher implements EventDispatcherInterface
      * @return void
      */
-    public function removeSubscriber(EventSubscriberInterface $subscriber)
+    public function removeSubscriber(EventSubscriberInterface $subscriber): void
     {
         foreach ($subscriber->getSubscribedEvents() as $eventName => $params) {
@@ -210,5 +210,5 @@ class EventDispatcher implements EventDispatcherInterface
      * @return void
      */
-    protected function callListeners(iterable $listeners, string $eventName, object $event)
+    protected function callListeners(iterable $listeners, string $eventName, object $event): void
     {
         $stoppable = $event instanceof StoppableEventInterface;
diff --git a/src/Symfony/Component/EventDispatcher/EventDispatcherInterface.php b/src/Symfony/Component/EventDispatcher/EventDispatcherInterface.php
index 3cd94c9388..c423905c11 100644
--- a/src/Symfony/Component/EventDispatcher/EventDispatcherInterface.php
+++ b/src/Symfony/Component/EventDispatcher/EventDispatcherInterface.php
@@ -31,5 +31,5 @@ interface EventDispatcherInterface extends ContractsEventDispatcherInterface
      * @return void
      */
-    public function addListener(string $eventName, callable $listener, int $priority = 0);
+    public function addListener(string $eventName, callable $listener, int $priority = 0): void;
 
     /**
@@ -41,5 +41,5 @@ interface EventDispatcherInterface extends ContractsEventDispatcherInterface
      * @return void
      */
-    public function addSubscriber(EventSubscriberInterface $subscriber);
+    public function addSubscriber(EventSubscriberInterface $subscriber): void;
 
     /**
@@ -48,10 +48,10 @@ interface EventDispatcherInterface extends ContractsEventDispatcherInterface
      * @return void
      */
-    public function removeListener(string $eventName, callable $listener);
+    public function removeListener(string $eventName, callable $listener): void;
 
     /**
      * @return void
      */
-    public function removeSubscriber(EventSubscriberInterface $subscriber);
+    public function removeSubscriber(EventSubscriberInterface $subscriber): void;
 
     /**
diff --git a/src/Symfony/Component/EventDispatcher/EventSubscriberInterface.php b/src/Symfony/Component/EventDispatcher/EventSubscriberInterface.php
index 2085e428e9..ca0d6964e5 100644
--- a/src/Symfony/Component/EventDispatcher/EventSubscriberInterface.php
+++ b/src/Symfony/Component/EventDispatcher/EventSubscriberInterface.php
@@ -46,4 +46,4 @@ interface EventSubscriberInterface
      * @return array<string, string|array{0: string, 1: int}|list<array{0: string, 1?: int}>>
      */
-    public static function getSubscribedEvents();
+    public static function getSubscribedEvents(): array;
 }
diff --git a/src/Symfony/Component/EventDispatcher/ImmutableEventDispatcher.php b/src/Symfony/Component/EventDispatcher/ImmutableEventDispatcher.php
index d385d3f833..1fc9f23ea0 100644
--- a/src/Symfony/Component/EventDispatcher/ImmutableEventDispatcher.php
+++ b/src/Symfony/Component/EventDispatcher/ImmutableEventDispatcher.php
@@ -34,5 +34,5 @@ class ImmutableEventDispatcher implements EventDispatcherInterface
      * @return never
      */
-    public function addListener(string $eventName, callable|array $listener, int $priority = 0)
+    public function addListener(string $eventName, callable|array $listener, int $priority = 0): never
     {
         throw new \BadMethodCallException('Unmodifiable event dispatchers must not be modified.');
@@ -42,5 +42,5 @@ class ImmutableEventDispatcher implements EventDispatcherInterface
      * @return never
      */
-    public function addSubscriber(EventSubscriberInterface $subscriber)
+    public function addSubscriber(EventSubscriberInterface $subscriber): never
     {
         throw new \BadMethodCallException('Unmodifiable event dispatchers must not be modified.');
@@ -50,5 +50,5 @@ class ImmutableEventDispatcher implements EventDispatcherInterface
      * @return never
      */
-    public function removeListener(string $eventName, callable|array $listener)
+    public function removeListener(string $eventName, callable|array $listener): never
     {
         throw new \BadMethodCallException('Unmodifiable event dispatchers must not be modified.');
@@ -58,5 +58,5 @@ class ImmutableEventDispatcher implements EventDispatcherInterface
      * @return never
      */
-    public function removeSubscriber(EventSubscriberInterface $subscriber)
+    public function removeSubscriber(EventSubscriberInterface $subscriber): never
     {
         throw new \BadMethodCallException('Unmodifiable event dispatchers must not be modified.');
diff --git a/src/Symfony/Component/ExpressionLanguage/Compiler.php b/src/Symfony/Component/ExpressionLanguage/Compiler.php
index ab50d361e3..c25e18117b 100644
--- a/src/Symfony/Component/ExpressionLanguage/Compiler.php
+++ b/src/Symfony/Component/ExpressionLanguage/Compiler.php
@@ -32,5 +32,5 @@ class Compiler implements ResetInterface
      * @return array
      */
-    public function getFunction(string $name)
+    public function getFunction(string $name): array
     {
         return $this->functions[$name];
@@ -70,5 +70,5 @@ class Compiler implements ResetInterface
      * @return string
      */
-    public function subcompile(Node\Node $node)
+    public function subcompile(Node\Node $node): string
     {
         $current = $this->source;
diff --git a/src/Symfony/Component/ExpressionLanguage/ExpressionFunctionProviderInterface.php b/src/Symfony/Component/ExpressionLanguage/ExpressionFunctionProviderInterface.php
index 479aeef880..272954c082 100644
--- a/src/Symfony/Component/ExpressionLanguage/ExpressionFunctionProviderInterface.php
+++ b/src/Symfony/Component/ExpressionLanguage/ExpressionFunctionProviderInterface.php
@@ -20,4 +20,4 @@ interface ExpressionFunctionProviderInterface
      * @return ExpressionFunction[]
      */
-    public function getFunctions();
+    public function getFunctions(): array;
 }
diff --git a/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php b/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php
index 9e107401a2..7f92321a2b 100644
--- a/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php
+++ b/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php
@@ -117,5 +117,5 @@ class ExpressionLanguage
      * @see ExpressionFunction
      */
-    public function register(string $name, callable $compiler, callable $evaluator)
+    public function register(string $name, callable $compiler, callable $evaluator): void
     {
         if (isset($this->parser)) {
@@ -129,5 +129,5 @@ class ExpressionLanguage
      * @return void
      */
-    public function addFunction(ExpressionFunction $function)
+    public function addFunction(ExpressionFunction $function): void
     {
         $this->register($function->getName(), $function->getCompiler(), $function->getEvaluator());
@@ -137,5 +137,5 @@ class ExpressionLanguage
      * @return void
      */
-    public function registerProvider(ExpressionFunctionProviderInterface $provider)
+    public function registerProvider(ExpressionFunctionProviderInterface $provider): void
     {
         foreach ($provider->getFunctions() as $function) {
@@ -147,5 +147,5 @@ class ExpressionLanguage
      * @return void
      */
-    protected function registerFunctions()
+    protected function registerFunctions(): void
     {
         $this->addFunction(ExpressionFunction::fromPhp('constant'));
diff --git a/src/Symfony/Component/ExpressionLanguage/Node/FunctionNode.php b/src/Symfony/Component/ExpressionLanguage/Node/FunctionNode.php
index 33323f388f..811fec7e2e 100644
--- a/src/Symfony/Component/ExpressionLanguage/Node/FunctionNode.php
+++ b/src/Symfony/Component/ExpressionLanguage/Node/FunctionNode.php
@@ -54,5 +54,5 @@ class FunctionNode extends Node
      * @return array
      */
-    public function toArray()
+    public function toArray(): array
     {
         $array = [];
diff --git a/src/Symfony/Component/ExpressionLanguage/Node/Node.php b/src/Symfony/Component/ExpressionLanguage/Node/Node.php
index 91fcc363ed..8756971315 100644
--- a/src/Symfony/Component/ExpressionLanguage/Node/Node.php
+++ b/src/Symfony/Component/ExpressionLanguage/Node/Node.php
@@ -61,5 +61,5 @@ class Node
      * @return void
      */
-    public function compile(Compiler $compiler)
+    public function compile(Compiler $compiler): void
     {
         foreach ($this->nodes as $node) {
@@ -71,5 +71,5 @@ class Node
      * @return mixed
      */
-    public function evaluate(array $functions, array $values)
+    public function evaluate(array $functions, array $values): mixed
     {
         $results = [];
@@ -86,5 +86,5 @@ class Node
      * @throws \BadMethodCallException when this node cannot be transformed to an array
      */
-    public function toArray()
+    public function toArray(): array
     {
         throw new \BadMethodCallException(sprintf('Dumping a "%s" instance is not supported yet.', static::class));
@@ -94,5 +94,5 @@ class Node
      * @return string
      */
-    public function dump()
+    public function dump(): string
     {
         $dump = '';
@@ -108,5 +108,5 @@ class Node
      * @return string
      */
-    protected function dumpString(string $value)
+    protected function dumpString(string $value): string
     {
         return sprintf('"%s"', addcslashes($value, "\0\t\"\\"));
@@ -116,5 +116,5 @@ class Node
      * @return bool
      */
-    protected function isHash(array $value)
+    protected function isHash(array $value): bool
     {
         $expectedKey = 0;
diff --git a/src/Symfony/Component/ExpressionLanguage/ParsedExpression.php b/src/Symfony/Component/ExpressionLanguage/ParsedExpression.php
index 239624ec2c..3b497d5ccf 100644
--- a/src/Symfony/Component/ExpressionLanguage/ParsedExpression.php
+++ b/src/Symfony/Component/ExpressionLanguage/ParsedExpression.php
@@ -33,5 +33,5 @@ class ParsedExpression extends Expression
      * @return Node
      */
-    public function getNodes()
+    public function getNodes(): Node
     {
         return $this->nodes;
diff --git a/src/Symfony/Component/ExpressionLanguage/Parser.php b/src/Symfony/Component/ExpressionLanguage/Parser.php
index a163a7a82f..3f83e0cfe8 100644
--- a/src/Symfony/Component/ExpressionLanguage/Parser.php
+++ b/src/Symfony/Component/ExpressionLanguage/Parser.php
@@ -134,5 +134,5 @@ class Parser
      * @return Node\Node
      */
-    public function parseExpression(int $precedence = 0)
+    public function parseExpression(int $precedence = 0): Node\Node
     {
         $expr = $this->getPrimary();
@@ -158,5 +158,5 @@ class Parser
      * @return Node\Node
      */
-    protected function getPrimary()
+    protected function getPrimary(): Node\Node
     {
         $token = $this->stream->current;
@@ -184,5 +184,5 @@ class Parser
      * @return Node\Node
      */
-    protected function parseConditionalExpression(Node\Node $expr)
+    protected function parseConditionalExpression(Node\Node $expr): Node\Node
     {
         while ($this->stream->current->test(Token::PUNCTUATION_TYPE, '??')) {
@@ -218,5 +218,5 @@ class Parser
      * @return Node\Node
      */
-    public function parsePrimaryExpression()
+    public function parsePrimaryExpression(): Node\Node
     {
         $token = $this->stream->current;
@@ -286,5 +286,5 @@ class Parser
      * @return Node\ArrayNode
      */
-    public function parseArrayExpression()
+    public function parseArrayExpression(): Node\ArrayNode
     {
         $this->stream->expect(Token::PUNCTUATION_TYPE, '[', 'An array element was expected');
@@ -313,5 +313,5 @@ class Parser
      * @return Node\ArrayNode
      */
-    public function parseHashExpression()
+    public function parseHashExpression(): Node\ArrayNode
     {
         $this->stream->expect(Token::PUNCTUATION_TYPE, '{', 'A hash element was expected');
@@ -360,5 +360,5 @@ class Parser
      * @return Node\GetAttrNode|Node\Node
      */
-    public function parsePostfixExpression(Node\Node $node)
+    public function parsePostfixExpression(Node\Node $node): Node\GetAttrNode|Node\Node
     {
         $token = $this->stream->current;
@@ -422,5 +422,5 @@ class Parser
      * @return Node\Node
      */
-    public function parseArguments()
+    public function parseArguments(): Node\Node
     {
         $args = [];
diff --git a/src/Symfony/Component/ExpressionLanguage/SerializedParsedExpression.php b/src/Symfony/Component/ExpressionLanguage/SerializedParsedExpression.php
index 5691907c86..92d423af86 100644
--- a/src/Symfony/Component/ExpressionLanguage/SerializedParsedExpression.php
+++ b/src/Symfony/Component/ExpressionLanguage/SerializedParsedExpression.php
@@ -36,5 +36,5 @@ class SerializedParsedExpression extends ParsedExpression
      * @return Node
      */
-    public function getNodes()
+    public function getNodes(): Node
     {
         return unserialize($this->nodes);
diff --git a/src/Symfony/Component/ExpressionLanguage/TokenStream.php b/src/Symfony/Component/ExpressionLanguage/TokenStream.php
index 241725b9c5..420932897f 100644
--- a/src/Symfony/Component/ExpressionLanguage/TokenStream.php
+++ b/src/Symfony/Component/ExpressionLanguage/TokenStream.php
@@ -45,5 +45,5 @@ class TokenStream
      * @return void
      */
-    public function next()
+    public function next(): void
     {
         ++$this->position;
@@ -61,5 +61,5 @@ class TokenStream
      * @return void
      */
-    public function expect(string $type, string $value = null, string $message = null)
+    public function expect(string $type, string $value = null, string $message = null): void
     {
         $token = $this->current;
diff --git a/src/Symfony/Component/Filesystem/Filesystem.php b/src/Symfony/Component/Filesystem/Filesystem.php
index d3280bee51..913c309358 100644
--- a/src/Symfony/Component/Filesystem/Filesystem.php
+++ b/src/Symfony/Component/Filesystem/Filesystem.php
@@ -37,5 +37,5 @@ class Filesystem
      * @throws IOException           When copy fails
      */
-    public function copy(string $originFile, string $targetFile, bool $overwriteNewerFiles = false)
+    public function copy(string $originFile, string $targetFile, bool $overwriteNewerFiles = false): void
     {
         $originIsLocal = stream_is_local($originFile) || 0 === stripos($originFile, 'file://');
@@ -89,5 +89,5 @@ class Filesystem
      * @throws IOException On any directory creation failure
      */
-    public function mkdir(string|iterable $dirs, int $mode = 0777)
+    public function mkdir(string|iterable $dirs, int $mode = 0777): void
     {
         foreach ($this->toIterable($dirs) as $dir) {
@@ -132,5 +132,5 @@ class Filesystem
      * @throws IOException When touch fails
      */
-    public function touch(string|iterable $files, int $time = null, int $atime = null)
+    public function touch(string|iterable $files, int $time = null, int $atime = null): void
     {
         foreach ($this->toIterable($files) as $file) {
@@ -148,5 +148,5 @@ class Filesystem
      * @throws IOException When removal fails
      */
-    public function remove(string|iterable $files)
+    public function remove(string|iterable $files): void
     {
         if ($files instanceof \Traversable) {
@@ -216,5 +216,5 @@ class Filesystem
      * @throws IOException When the change fails
      */
-    public function chmod(string|iterable $files, int $mode, int $umask = 0000, bool $recursive = false)
+    public function chmod(string|iterable $files, int $mode, int $umask = 0000, bool $recursive = false): void
     {
         foreach ($this->toIterable($files) as $file) {
@@ -238,5 +238,5 @@ class Filesystem
      * @throws IOException When the change fails
      */
-    public function chown(string|iterable $files, string|int $user, bool $recursive = false)
+    public function chown(string|iterable $files, string|int $user, bool $recursive = false): void
     {
         foreach ($this->toIterable($files) as $file) {
@@ -266,5 +266,5 @@ class Filesystem
      * @throws IOException When the change fails
      */
-    public function chgrp(string|iterable $files, string|int $group, bool $recursive = false)
+    public function chgrp(string|iterable $files, string|int $group, bool $recursive = false): void
     {
         foreach ($this->toIterable($files) as $file) {
@@ -292,5 +292,5 @@ class Filesystem
      * @throws IOException When origin cannot be renamed
      */
-    public function rename(string $origin, string $target, bool $overwrite = false)
+    public function rename(string $origin, string $target, bool $overwrite = false): void
     {
         // we check that target does not exist
@@ -334,5 +334,5 @@ class Filesystem
      * @throws IOException When symlink fails
      */
-    public function symlink(string $originDir, string $targetDir, bool $copyOnWindows = false)
+    public function symlink(string $originDir, string $targetDir, bool $copyOnWindows = false): void
     {
         self::assertFunctionExists('symlink');
@@ -373,5 +373,5 @@ class Filesystem
      * @throws IOException           When link fails, including if link already exists
      */
-    public function hardlink(string $originFile, string|iterable $targetFiles)
+    public function hardlink(string $originFile, string|iterable $targetFiles): void
     {
         self::assertFunctionExists('link');
@@ -531,5 +531,5 @@ class Filesystem
      * @throws IOException When file type is unknown
      */
-    public function mirror(string $originDir, string $targetDir, \Traversable $iterator = null, array $options = [])
+    public function mirror(string $originDir, string $targetDir, \Traversable $iterator = null, array $options = []): void
     {
         $targetDir = rtrim($targetDir, '/\\');
@@ -657,5 +657,5 @@ class Filesystem
      * @throws IOException if the file cannot be written to
      */
-    public function dumpFile(string $filename, $content)
+    public function dumpFile(string $filename, $content): void
     {
         if (\is_array($content)) {
@@ -698,5 +698,5 @@ class Filesystem
      * @throws IOException If the file is not writable
      */
-    public function appendToFile(string $filename, $content/* , bool $lock = false */)
+    public function appendToFile(string $filename, $content/* , bool $lock = false */): void
     {
         if (\is_array($content)) {
diff --git a/src/Symfony/Component/Finder/Finder.php b/src/Symfony/Component/Finder/Finder.php
index 62c3f9e24f..f5055abd0c 100644
--- a/src/Symfony/Component/Finder/Finder.php
+++ b/src/Symfony/Component/Finder/Finder.php
@@ -400,5 +400,5 @@ class Finder implements \IteratorAggregate, \Countable
      * @return void
      */
-    public static function addVCSPattern(string|array $pattern)
+    public static function addVCSPattern(string|array $pattern): void
     {
         foreach ((array) $pattern as $p) {
diff --git a/src/Symfony/Component/Form/AbstractExtension.php b/src/Symfony/Component/Form/AbstractExtension.php
index cffca7d398..f528c135a2 100644
--- a/src/Symfony/Component/Form/AbstractExtension.php
+++ b/src/Symfony/Component/Form/AbstractExtension.php
@@ -99,5 +99,5 @@ abstract class AbstractExtension implements FormExtensionInterface
      * @return FormTypeInterface[]
      */
-    protected function loadTypes()
+    protected function loadTypes(): array
     {
         return [];
@@ -119,5 +119,5 @@ abstract class AbstractExtension implements FormExtensionInterface
      * @return FormTypeGuesserInterface|null
      */
-    protected function loadTypeGuesser()
+    protected function loadTypeGuesser(): ?FormTypeGuesserInterface
     {
         return null;
diff --git a/src/Symfony/Component/Form/AbstractRendererEngine.php b/src/Symfony/Component/Form/AbstractRendererEngine.php
index 3f1ab79c26..bddb459b86 100644
--- a/src/Symfony/Component/Form/AbstractRendererEngine.php
+++ b/src/Symfony/Component/Form/AbstractRendererEngine.php
@@ -65,5 +65,5 @@ abstract class AbstractRendererEngine implements FormRendererEngineInterface, Re
      * @return void
      */
-    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true)
+    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true): void
     {
         $cacheKey = $view->vars[self::CACHE_KEY_VAR];
@@ -128,5 +128,5 @@ abstract class AbstractRendererEngine implements FormRendererEngineInterface, Re
      * @return bool
      */
-    abstract protected function loadResourceForBlockName(string $cacheKey, FormView $view, string $blockName);
+    abstract protected function loadResourceForBlockName(string $cacheKey, FormView $view, string $blockName): bool;
 
     /**
diff --git a/src/Symfony/Component/Form/AbstractType.php b/src/Symfony/Component/Form/AbstractType.php
index ad4b195696..ba4cf5c85b 100644
--- a/src/Symfony/Component/Form/AbstractType.php
+++ b/src/Symfony/Component/Form/AbstractType.php
@@ -24,5 +24,5 @@ abstract class AbstractType implements FormTypeInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
     }
@@ -31,5 +31,5 @@ abstract class AbstractType implements FormTypeInterface
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
     }
@@ -38,5 +38,5 @@ abstract class AbstractType implements FormTypeInterface
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
     }
@@ -45,5 +45,5 @@ abstract class AbstractType implements FormTypeInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
     }
@@ -52,5 +52,5 @@ abstract class AbstractType implements FormTypeInterface
      * @return string
      */
-    public function getBlockPrefix()
+    public function getBlockPrefix(): string
     {
         return StringUtil::fqcnToBlockPrefix(static::class) ?: '';
@@ -60,5 +60,5 @@ abstract class AbstractType implements FormTypeInterface
      * @return string|null
      */
-    public function getParent()
+    public function getParent(): ?string
     {
         return FormType::class;
diff --git a/src/Symfony/Component/Form/AbstractTypeExtension.php b/src/Symfony/Component/Form/AbstractTypeExtension.php
index 422f28bf33..b1d608fd4d 100644
--- a/src/Symfony/Component/Form/AbstractTypeExtension.php
+++ b/src/Symfony/Component/Form/AbstractTypeExtension.php
@@ -22,5 +22,5 @@ abstract class AbstractTypeExtension implements FormTypeExtensionInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
     }
@@ -29,5 +29,5 @@ abstract class AbstractTypeExtension implements FormTypeExtensionInterface
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
     }
@@ -36,5 +36,5 @@ abstract class AbstractTypeExtension implements FormTypeExtensionInterface
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
     }
@@ -43,5 +43,5 @@ abstract class AbstractTypeExtension implements FormTypeExtensionInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
     }
diff --git a/src/Symfony/Component/Form/ButtonBuilder.php b/src/Symfony/Component/Form/ButtonBuilder.php
index 20a30968d4..dbded1d7f3 100644
--- a/src/Symfony/Component/Form/ButtonBuilder.php
+++ b/src/Symfony/Component/Form/ButtonBuilder.php
@@ -57,5 +57,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function add(string|FormBuilderInterface $child, string $type = null, array $options = []): static
+    public function add(string|FormBuilderInterface $child, string $type = null, array $options = []): never
     {
         throw new BadMethodCallException('Buttons cannot have children.');
@@ -69,5 +69,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function create(string $name, string $type = null, array $options = []): FormBuilderInterface
+    public function create(string $name, string $type = null, array $options = []): never
     {
         throw new BadMethodCallException('Buttons cannot have children.');
@@ -81,5 +81,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function get(string $name): FormBuilderInterface
+    public function get(string $name): never
     {
         throw new BadMethodCallException('Buttons cannot have children.');
@@ -93,5 +93,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function remove(string $name): static
+    public function remove(string $name): never
     {
         throw new BadMethodCallException('Buttons cannot have children.');
@@ -129,5 +129,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function addEventListener(string $eventName, callable $listener, int $priority = 0): static
+    public function addEventListener(string $eventName, callable $listener, int $priority = 0): never
     {
         throw new BadMethodCallException('Buttons do not support event listeners.');
@@ -141,5 +141,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function addEventSubscriber(EventSubscriberInterface $subscriber): static
+    public function addEventSubscriber(EventSubscriberInterface $subscriber): never
     {
         throw new BadMethodCallException('Buttons do not support event subscribers.');
@@ -153,5 +153,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function addViewTransformer(DataTransformerInterface $viewTransformer, bool $forcePrepend = false): static
+    public function addViewTransformer(DataTransformerInterface $viewTransformer, bool $forcePrepend = false): never
     {
         throw new BadMethodCallException('Buttons do not support data transformers.');
@@ -165,5 +165,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function resetViewTransformers(): static
+    public function resetViewTransformers(): never
     {
         throw new BadMethodCallException('Buttons do not support data transformers.');
@@ -177,5 +177,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function addModelTransformer(DataTransformerInterface $modelTransformer, bool $forceAppend = false): static
+    public function addModelTransformer(DataTransformerInterface $modelTransformer, bool $forceAppend = false): never
     {
         throw new BadMethodCallException('Buttons do not support data transformers.');
@@ -189,5 +189,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function resetModelTransformers(): static
+    public function resetModelTransformers(): never
     {
         throw new BadMethodCallException('Buttons do not support data transformers.');
@@ -221,5 +221,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setDataMapper(DataMapperInterface $dataMapper = null): static
+    public function setDataMapper(DataMapperInterface $dataMapper = null): never
     {
         if (1 > \func_num_args()) {
@@ -249,5 +249,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setEmptyData(mixed $emptyData): static
+    public function setEmptyData(mixed $emptyData): never
     {
         throw new BadMethodCallException('Buttons do not support empty data.');
@@ -261,5 +261,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setErrorBubbling(bool $errorBubbling): static
+    public function setErrorBubbling(bool $errorBubbling): never
     {
         throw new BadMethodCallException('Buttons do not support error bubbling.');
@@ -273,5 +273,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setRequired(bool $required): static
+    public function setRequired(bool $required): never
     {
         throw new BadMethodCallException('Buttons cannot be required.');
@@ -285,5 +285,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setPropertyPath(string|PropertyPathInterface|null $propertyPath): static
+    public function setPropertyPath(string|PropertyPathInterface|null $propertyPath): never
     {
         throw new BadMethodCallException('Buttons do not support property paths.');
@@ -297,5 +297,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setMapped(bool $mapped): static
+    public function setMapped(bool $mapped): never
     {
         throw new BadMethodCallException('Buttons do not support data mapping.');
@@ -309,5 +309,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setByReference(bool $byReference): static
+    public function setByReference(bool $byReference): never
     {
         throw new BadMethodCallException('Buttons do not support data mapping.');
@@ -321,5 +321,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setCompound(bool $compound): static
+    public function setCompound(bool $compound): never
     {
         throw new BadMethodCallException('Buttons cannot be compound.');
@@ -345,5 +345,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setData(mixed $data): static
+    public function setData(mixed $data): never
     {
         throw new BadMethodCallException('Buttons do not support data.');
@@ -357,5 +357,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setDataLocked(bool $locked): static
+    public function setDataLocked(bool $locked): never
     {
         throw new BadMethodCallException('Buttons do not support data locking.');
@@ -369,5 +369,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setFormFactory(FormFactoryInterface $formFactory)
+    public function setFormFactory(FormFactoryInterface $formFactory): never
     {
         throw new BadMethodCallException('Buttons do not support form factories.');
@@ -381,5 +381,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setAction(string $action): static
+    public function setAction(string $action): never
     {
         throw new BadMethodCallException('Buttons do not support actions.');
@@ -393,5 +393,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setMethod(string $method): static
+    public function setMethod(string $method): never
     {
         throw new BadMethodCallException('Buttons do not support methods.');
@@ -405,5 +405,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setRequestHandler(RequestHandlerInterface $requestHandler): static
+    public function setRequestHandler(RequestHandlerInterface $requestHandler): never
     {
         throw new BadMethodCallException('Buttons do not support request handlers.');
@@ -433,5 +433,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setInheritData(bool $inheritData): static
+    public function setInheritData(bool $inheritData): never
     {
         throw new BadMethodCallException('Buttons do not support data inheritance.');
@@ -457,5 +457,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function setIsEmptyCallback(?callable $isEmptyCallback): static
+    public function setIsEmptyCallback(?callable $isEmptyCallback): never
     {
         throw new BadMethodCallException('Buttons do not support "is empty" callback.');
@@ -469,5 +469,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function getEventDispatcher(): EventDispatcherInterface
+    public function getEventDispatcher(): never
     {
         throw new BadMethodCallException('Buttons do not support event dispatching.');
@@ -628,5 +628,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @return never
      */
-    public function getFormFactory(): FormFactoryInterface
+    public function getFormFactory(): never
     {
         throw new BadMethodCallException('Buttons do not support adding children.');
@@ -640,5 +640,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function getAction(): string
+    public function getAction(): never
     {
         throw new BadMethodCallException('Buttons do not support actions.');
@@ -652,5 +652,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function getMethod(): string
+    public function getMethod(): never
     {
         throw new BadMethodCallException('Buttons do not support methods.');
@@ -664,5 +664,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function getRequestHandler(): RequestHandlerInterface
+    public function getRequestHandler(): never
     {
         throw new BadMethodCallException('Buttons do not support request handlers.');
@@ -716,5 +716,5 @@ class ButtonBuilder implements \IteratorAggregate, FormBuilderInterface
      * @throws BadMethodCallException
      */
-    public function getIsEmptyCallback(): ?callable
+    public function getIsEmptyCallback(): never
     {
         throw new BadMethodCallException('Buttons do not support "is empty" callback.');
diff --git a/src/Symfony/Component/Form/ChoiceList/Factory/CachingFactoryDecorator.php b/src/Symfony/Component/Form/ChoiceList/Factory/CachingFactoryDecorator.php
index 40c0604ea4..34f7f441f2 100644
--- a/src/Symfony/Component/Form/ChoiceList/Factory/CachingFactoryDecorator.php
+++ b/src/Symfony/Component/Form/ChoiceList/Factory/CachingFactoryDecorator.php
@@ -218,5 +218,5 @@ class CachingFactoryDecorator implements ChoiceListFactoryInterface, ResetInterf
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->lists = [];
diff --git a/src/Symfony/Component/Form/Command/DebugCommand.php b/src/Symfony/Component/Form/Command/DebugCommand.php
index 4a142e2965..dd99014998 100644
--- a/src/Symfony/Component/Form/Command/DebugCommand.php
+++ b/src/Symfony/Component/Form/Command/DebugCommand.php
@@ -58,5 +58,5 @@ class DebugCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Form/DataMapperInterface.php b/src/Symfony/Component/Form/DataMapperInterface.php
index f04137aec6..4e874c8730 100644
--- a/src/Symfony/Component/Form/DataMapperInterface.php
+++ b/src/Symfony/Component/Form/DataMapperInterface.php
@@ -30,5 +30,5 @@ interface DataMapperInterface
      * @throws Exception\UnexpectedTypeException if the type of the data parameter is not supported
      */
-    public function mapDataToForms(mixed $viewData, \Traversable $forms);
+    public function mapDataToForms(mixed $viewData, \Traversable $forms): void;
 
     /**
@@ -63,4 +63,4 @@ interface DataMapperInterface
      * @throws Exception\UnexpectedTypeException if the type of the data parameter is not supported
      */
-    public function mapFormsToData(\Traversable $forms, mixed &$viewData);
+    public function mapFormsToData(\Traversable $forms, mixed &$viewData): void;
 }
diff --git a/src/Symfony/Component/Form/DataTransformerInterface.php b/src/Symfony/Component/Form/DataTransformerInterface.php
index 85fb99d218..6cc654f681 100644
--- a/src/Symfony/Component/Form/DataTransformerInterface.php
+++ b/src/Symfony/Component/Form/DataTransformerInterface.php
@@ -65,5 +65,5 @@ interface DataTransformerInterface
      * @throws TransformationFailedException when the transformation fails
      */
-    public function transform(mixed $value);
+    public function transform(mixed $value): mixed;
 
     /**
@@ -96,4 +96,4 @@ interface DataTransformerInterface
      * @throws TransformationFailedException when the transformation fails
      */
-    public function reverseTransform(mixed $value);
+    public function reverseTransform(mixed $value): mixed;
 }
diff --git a/src/Symfony/Component/Form/DependencyInjection/FormPass.php b/src/Symfony/Component/Form/DependencyInjection/FormPass.php
index efb6d5c8bb..ab3befa3f0 100644
--- a/src/Symfony/Component/Form/DependencyInjection/FormPass.php
+++ b/src/Symfony/Component/Form/DependencyInjection/FormPass.php
@@ -34,5 +34,5 @@ class FormPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('form.extension')) {
diff --git a/src/Symfony/Component/Form/Extension/Core/DataMapper/CheckboxListMapper.php b/src/Symfony/Component/Form/Extension/Core/DataMapper/CheckboxListMapper.php
index 119c81107d..cf9f6f16af 100644
--- a/src/Symfony/Component/Form/Extension/Core/DataMapper/CheckboxListMapper.php
+++ b/src/Symfony/Component/Form/Extension/Core/DataMapper/CheckboxListMapper.php
@@ -29,5 +29,5 @@ class CheckboxListMapper implements DataMapperInterface
      * @return void
      */
-    public function mapDataToForms(mixed $choices, \Traversable $checkboxes)
+    public function mapDataToForms(mixed $choices, \Traversable $checkboxes): void
     {
         if (!\is_array($choices ??= [])) {
@@ -44,5 +44,5 @@ class CheckboxListMapper implements DataMapperInterface
      * @return void
      */
-    public function mapFormsToData(\Traversable $checkboxes, mixed &$choices)
+    public function mapFormsToData(\Traversable $checkboxes, mixed &$choices): void
     {
         if (!\is_array($choices)) {
diff --git a/src/Symfony/Component/Form/Extension/Core/DataMapper/RadioListMapper.php b/src/Symfony/Component/Form/Extension/Core/DataMapper/RadioListMapper.php
index 37fdba0c35..ed6557a3d8 100644
--- a/src/Symfony/Component/Form/Extension/Core/DataMapper/RadioListMapper.php
+++ b/src/Symfony/Component/Form/Extension/Core/DataMapper/RadioListMapper.php
@@ -29,5 +29,5 @@ class RadioListMapper implements DataMapperInterface
      * @return void
      */
-    public function mapDataToForms(mixed $choice, \Traversable $radios)
+    public function mapDataToForms(mixed $choice, \Traversable $radios): void
     {
         if (!\is_string($choice)) {
@@ -44,5 +44,5 @@ class RadioListMapper implements DataMapperInterface
      * @return void
      */
-    public function mapFormsToData(\Traversable $radios, mixed &$choice)
+    public function mapFormsToData(\Traversable $radios, mixed &$choice): void
     {
         if (null !== $choice && !\is_string($choice)) {
diff --git a/src/Symfony/Component/Form/Extension/Core/EventListener/FixUrlProtocolListener.php b/src/Symfony/Component/Form/Extension/Core/EventListener/FixUrlProtocolListener.php
index 7189977549..29ec9e3efc 100644
--- a/src/Symfony/Component/Form/Extension/Core/EventListener/FixUrlProtocolListener.php
+++ b/src/Symfony/Component/Form/Extension/Core/EventListener/FixUrlProtocolListener.php
@@ -36,5 +36,5 @@ class FixUrlProtocolListener implements EventSubscriberInterface
      * @return void
      */
-    public function onSubmit(FormEvent $event)
+    public function onSubmit(FormEvent $event): void
     {
         $data = $event->getData();
diff --git a/src/Symfony/Component/Form/Extension/Core/EventListener/MergeCollectionListener.php b/src/Symfony/Component/Form/Extension/Core/EventListener/MergeCollectionListener.php
index 62cd0a42a7..55ab20aabc 100644
--- a/src/Symfony/Component/Form/Extension/Core/EventListener/MergeCollectionListener.php
+++ b/src/Symfony/Component/Form/Extension/Core/EventListener/MergeCollectionListener.php
@@ -45,5 +45,5 @@ class MergeCollectionListener implements EventSubscriberInterface
      * @return void
      */
-    public function onSubmit(FormEvent $event)
+    public function onSubmit(FormEvent $event): void
     {
         $dataToMergeInto = $event->getForm()->getNormData();
diff --git a/src/Symfony/Component/Form/Extension/Core/EventListener/ResizeFormListener.php b/src/Symfony/Component/Form/Extension/Core/EventListener/ResizeFormListener.php
index cec439754e..0ef6b26c3e 100644
--- a/src/Symfony/Component/Form/Extension/Core/EventListener/ResizeFormListener.php
+++ b/src/Symfony/Component/Form/Extension/Core/EventListener/ResizeFormListener.php
@@ -56,5 +56,5 @@ class ResizeFormListener implements EventSubscriberInterface
      * @return void
      */
-    public function preSetData(FormEvent $event)
+    public function preSetData(FormEvent $event): void
     {
         $form = $event->getForm();
@@ -81,5 +81,5 @@ class ResizeFormListener implements EventSubscriberInterface
      * @return void
      */
-    public function preSubmit(FormEvent $event)
+    public function preSubmit(FormEvent $event): void
     {
         $form = $event->getForm();
@@ -114,5 +114,5 @@ class ResizeFormListener implements EventSubscriberInterface
      * @return void
      */
-    public function onSubmit(FormEvent $event)
+    public function onSubmit(FormEvent $event): void
     {
         $form = $event->getForm();
diff --git a/src/Symfony/Component/Form/Extension/Core/EventListener/TransformationFailureListener.php b/src/Symfony/Component/Form/Extension/Core/EventListener/TransformationFailureListener.php
index c9c216b59f..82b8cfb33b 100644
--- a/src/Symfony/Component/Form/Extension/Core/EventListener/TransformationFailureListener.php
+++ b/src/Symfony/Component/Form/Extension/Core/EventListener/TransformationFailureListener.php
@@ -40,5 +40,5 @@ class TransformationFailureListener implements EventSubscriberInterface
      * @return void
      */
-    public function convertTransformationFailureToFormError(FormEvent $event)
+    public function convertTransformationFailureToFormError(FormEvent $event): void
     {
         $form = $event->getForm();
diff --git a/src/Symfony/Component/Form/Extension/Core/EventListener/TrimListener.php b/src/Symfony/Component/Form/Extension/Core/EventListener/TrimListener.php
index 81a55f3cb0..ea669fb590 100644
--- a/src/Symfony/Component/Form/Extension/Core/EventListener/TrimListener.php
+++ b/src/Symfony/Component/Form/Extension/Core/EventListener/TrimListener.php
@@ -27,5 +27,5 @@ class TrimListener implements EventSubscriberInterface
      * @return void
      */
-    public function preSubmit(FormEvent $event)
+    public function preSubmit(FormEvent $event): void
     {
         $data = $event->getData();
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/BaseType.php b/src/Symfony/Component/Form/Extension/Core/Type/BaseType.php
index 5e2ae22481..760cb1a132 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/BaseType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/BaseType.php
@@ -33,5 +33,5 @@ abstract class BaseType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->setDisabled($options['disabled']);
@@ -42,5 +42,5 @@ abstract class BaseType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $name = $form->getName();
@@ -129,5 +129,5 @@ abstract class BaseType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/BirthdayType.php b/src/Symfony/Component/Form/Extension/Core/Type/BirthdayType.php
index fa60d016eb..fdb786cc61 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/BirthdayType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/BirthdayType.php
@@ -20,5 +20,5 @@ class BirthdayType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/ButtonType.php b/src/Symfony/Component/Form/Extension/Core/Type/ButtonType.php
index d710546407..5ff4dc9989 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/ButtonType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/ButtonType.php
@@ -35,5 +35,5 @@ class ButtonType extends BaseType implements ButtonTypeInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         parent::configureOptions($resolver);
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/CheckboxType.php b/src/Symfony/Component/Form/Extension/Core/Type/CheckboxType.php
index 291ede93ef..a4128a3880 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/CheckboxType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/CheckboxType.php
@@ -24,5 +24,5 @@ class CheckboxType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         // Unlike in other types, where the data is NULL by default, it
@@ -39,5 +39,5 @@ class CheckboxType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars = array_replace($view->vars, [
@@ -50,5 +50,5 @@ class CheckboxType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $emptyData = static fn (FormInterface $form, $viewData) => $viewData;
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/ChoiceType.php b/src/Symfony/Component/Form/Extension/Core/Type/ChoiceType.php
index 4dcd3b6877..16e18de555 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/ChoiceType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/ChoiceType.php
@@ -66,5 +66,5 @@ class ChoiceType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $unknownValues = [];
@@ -222,5 +222,5 @@ class ChoiceType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $choiceTranslationDomain = $options['choice_translation_domain'];
@@ -279,5 +279,5 @@ class ChoiceType extends AbstractType
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['expanded']) {
@@ -299,5 +299,5 @@ class ChoiceType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $emptyData = static function (Options $options) {
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/CollectionType.php b/src/Symfony/Component/Form/Extension/Core/Type/CollectionType.php
index 0216e61dd5..0ca3eebc0b 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/CollectionType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/CollectionType.php
@@ -25,5 +25,5 @@ class CollectionType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $resizePrototypeOptions = null;
@@ -58,5 +58,5 @@ class CollectionType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars = array_replace($view->vars, [
@@ -74,5 +74,5 @@ class CollectionType extends AbstractType
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         $prefixOffset = -2;
@@ -108,5 +108,5 @@ class CollectionType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $entryOptionsNormalizer = static function (Options $options, $value) {
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/ColorType.php b/src/Symfony/Component/Form/Extension/Core/Type/ColorType.php
index 31538fc3c7..de208cdade 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/ColorType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/ColorType.php
@@ -37,5 +37,5 @@ class ColorType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if (!$options['html5']) {
@@ -67,5 +67,5 @@ class ColorType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/CountryType.php b/src/Symfony/Component/Form/Extension/Core/Type/CountryType.php
index 6f872660a0..f352beb90d 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/CountryType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/CountryType.php
@@ -26,5 +26,5 @@ class CountryType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/CurrencyType.php b/src/Symfony/Component/Form/Extension/Core/Type/CurrencyType.php
index 89edc6f630..fc06bbb299 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/CurrencyType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/CurrencyType.php
@@ -26,5 +26,5 @@ class CurrencyType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/DateIntervalType.php b/src/Symfony/Component/Form/Extension/Core/Type/DateIntervalType.php
index 655ef6682f..0e525d09f6 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/DateIntervalType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/DateIntervalType.php
@@ -47,5 +47,5 @@ class DateIntervalType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if (!$options['with_years'] && !$options['with_months'] && !$options['with_weeks'] && !$options['with_days'] && !$options['with_hours'] && !$options['with_minutes'] && !$options['with_seconds']) {
@@ -152,5 +152,5 @@ class DateIntervalType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $vars = [
@@ -167,5 +167,5 @@ class DateIntervalType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $compound = static fn (Options $options) => 'single_text' !== $options['widget'];
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/DateTimeType.php b/src/Symfony/Component/Form/Extension/Core/Type/DateTimeType.php
index 32c58447cd..ec35f6ee41 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/DateTimeType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/DateTimeType.php
@@ -51,5 +51,5 @@ class DateTimeType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $parts = ['year', 'month', 'day', 'hour'];
@@ -200,5 +200,5 @@ class DateTimeType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['widget'] = $options['widget'];
@@ -228,5 +228,5 @@ class DateTimeType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $compound = static fn (Options $options) => 'single_text' !== $options['widget'];
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/DateType.php b/src/Symfony/Component/Form/Extension/Core/Type/DateType.php
index 3b68dc241a..474139a6ee 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/DateType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/DateType.php
@@ -47,5 +47,5 @@ class DateType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $dateFormat = \is_int($options['format']) ? $options['format'] : self::DEFAULT_FORMAT;
@@ -184,5 +184,5 @@ class DateType extends AbstractType
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['widget'] = $options['widget'];
@@ -224,5 +224,5 @@ class DateType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $compound = static fn (Options $options) => 'single_text' !== $options['widget'];
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/EmailType.php b/src/Symfony/Component/Form/Extension/Core/Type/EmailType.php
index 64d01ee67a..0cd6cd3b79 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/EmailType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/EmailType.php
@@ -20,5 +20,5 @@ class EmailType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/FileType.php b/src/Symfony/Component/Form/Extension/Core/Type/FileType.php
index cf8e1a7439..2ee4fa5fea 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/FileType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/FileType.php
@@ -45,5 +45,5 @@ class FileType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         // Ensure that submitted data is always an uploaded file or an array of some
@@ -89,5 +89,5 @@ class FileType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['multiple']) {
@@ -105,5 +105,5 @@ class FileType extends AbstractType
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['multipart'] = true;
@@ -113,5 +113,5 @@ class FileType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $dataClass = null;
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/FormType.php b/src/Symfony/Component/Form/Extension/Core/Type/FormType.php
index 82aa77f0a3..f3abe461c9 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/FormType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/FormType.php
@@ -42,5 +42,5 @@ class FormType extends BaseType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         parent::buildForm($builder, $options);
@@ -73,5 +73,5 @@ class FormType extends BaseType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         parent::buildView($view, $form, $options);
@@ -115,5 +115,5 @@ class FormType extends BaseType
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         $multipart = false;
@@ -132,5 +132,5 @@ class FormType extends BaseType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         parent::configureOptions($resolver);
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/HiddenType.php b/src/Symfony/Component/Form/Extension/Core/Type/HiddenType.php
index c4e5eb2ccf..495525f889 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/HiddenType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/HiddenType.php
@@ -20,5 +20,5 @@ class HiddenType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/IntegerType.php b/src/Symfony/Component/Form/Extension/Core/Type/IntegerType.php
index a287b66b7c..12dc4a1f71 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/IntegerType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/IntegerType.php
@@ -24,5 +24,5 @@ class IntegerType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->addViewTransformer(new IntegerToLocalizedStringTransformer($options['grouping'], $options['rounding_mode'], !$options['grouping'] ? 'en' : null));
@@ -32,5 +32,5 @@ class IntegerType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['grouping']) {
@@ -42,5 +42,5 @@ class IntegerType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/LanguageType.php b/src/Symfony/Component/Form/Extension/Core/Type/LanguageType.php
index eeb9e591a1..b0eb640a5f 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/LanguageType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/LanguageType.php
@@ -27,5 +27,5 @@ class LanguageType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/LocaleType.php b/src/Symfony/Component/Form/Extension/Core/Type/LocaleType.php
index e98134febd..9f2662031e 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/LocaleType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/LocaleType.php
@@ -26,5 +26,5 @@ class LocaleType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/MoneyType.php b/src/Symfony/Component/Form/Extension/Core/Type/MoneyType.php
index 9c9e5b4d7c..c8d4ecf232 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/MoneyType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/MoneyType.php
@@ -28,5 +28,5 @@ class MoneyType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         // Values used in HTML5 number inputs should be formatted as in "1234.5", ie. 'en' format without grouping,
@@ -46,5 +46,5 @@ class MoneyType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['money_pattern'] = self::getPattern($options['currency']);
@@ -58,5 +58,5 @@ class MoneyType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
@@ -107,5 +107,5 @@ class MoneyType extends AbstractType
      * @return string
      */
-    protected static function getPattern(?string $currency)
+    protected static function getPattern(?string $currency): string
     {
         if (!$currency) {
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/NumberType.php b/src/Symfony/Component/Form/Extension/Core/Type/NumberType.php
index 578991f9fd..16f39e873b 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/NumberType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/NumberType.php
@@ -27,5 +27,5 @@ class NumberType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->addViewTransformer(new NumberToLocalizedStringTransformer(
@@ -44,5 +44,5 @@ class NumberType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['html5']) {
@@ -60,5 +60,5 @@ class NumberType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/PasswordType.php b/src/Symfony/Component/Form/Extension/Core/Type/PasswordType.php
index 0c247f0f30..08d7cefb9a 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/PasswordType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/PasswordType.php
@@ -22,5 +22,5 @@ class PasswordType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['always_empty'] || !$form->isSubmitted()) {
@@ -32,5 +32,5 @@ class PasswordType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/PercentType.php b/src/Symfony/Component/Form/Extension/Core/Type/PercentType.php
index f71e288b3e..30fad82d81 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/PercentType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/PercentType.php
@@ -24,5 +24,5 @@ class PercentType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->addViewTransformer(new PercentToLocalizedStringTransformer(
@@ -37,5 +37,5 @@ class PercentType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['symbol'] = $options['symbol'];
@@ -49,5 +49,5 @@ class PercentType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/RadioType.php b/src/Symfony/Component/Form/Extension/Core/Type/RadioType.php
index 4b97b0ae21..1889bb0e1e 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/RadioType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/RadioType.php
@@ -20,5 +20,5 @@ class RadioType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/RangeType.php b/src/Symfony/Component/Form/Extension/Core/Type/RangeType.php
index 2e33a977d9..ed7e88b5af 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/RangeType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/RangeType.php
@@ -20,5 +20,5 @@ class RangeType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/RepeatedType.php b/src/Symfony/Component/Form/Extension/Core/Type/RepeatedType.php
index 4176f93e52..8f133ee41d 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/RepeatedType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/RepeatedType.php
@@ -22,5 +22,5 @@ class RepeatedType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         // Overwrite required option for child fields
@@ -48,5 +48,5 @@ class RepeatedType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/SearchType.php b/src/Symfony/Component/Form/Extension/Core/Type/SearchType.php
index 0dca6e42a8..aa51e40efa 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/SearchType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/SearchType.php
@@ -20,5 +20,5 @@ class SearchType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/SubmitType.php b/src/Symfony/Component/Form/Extension/Core/Type/SubmitType.php
index 3f1b5f95c9..d586bb1463 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/SubmitType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/SubmitType.php
@@ -28,5 +28,5 @@ class SubmitType extends AbstractType implements SubmitButtonTypeInterface
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['clicked'] = $form->isClicked();
@@ -40,5 +40,5 @@ class SubmitType extends AbstractType implements SubmitButtonTypeInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefault('validate', true);
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/TelType.php b/src/Symfony/Component/Form/Extension/Core/Type/TelType.php
index 05fdd41626..b6565675ee 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/TelType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/TelType.php
@@ -20,5 +20,5 @@ class TelType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/TextType.php b/src/Symfony/Component/Form/Extension/Core/Type/TextType.php
index 479ce054d8..e909f2fa3b 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/TextType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/TextType.php
@@ -22,5 +22,5 @@ class TextType extends AbstractType implements DataTransformerInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         // When empty_data is explicitly set to an empty string,
@@ -37,5 +37,5 @@ class TextType extends AbstractType implements DataTransformerInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/TextareaType.php b/src/Symfony/Component/Form/Extension/Core/Type/TextareaType.php
index 40e7580d80..18c58e30c0 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/TextareaType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/TextareaType.php
@@ -21,5 +21,5 @@ class TextareaType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['pattern'] = null;
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/TimeType.php b/src/Symfony/Component/Form/Extension/Core/Type/TimeType.php
index c7d5276960..25d2444547 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/TimeType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/TimeType.php
@@ -38,5 +38,5 @@ class TimeType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $parts = ['hour'];
@@ -214,5 +214,5 @@ class TimeType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars = array_replace($view->vars, [
@@ -245,5 +245,5 @@ class TimeType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $compound = static fn (Options $options) => 'single_text' !== $options['widget'];
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/TimezoneType.php b/src/Symfony/Component/Form/Extension/Core/Type/TimezoneType.php
index a5d4bc61c0..b104414403 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/TimezoneType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/TimezoneType.php
@@ -29,5 +29,5 @@ class TimezoneType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if ('datetimezone' === $options['input']) {
@@ -41,5 +41,5 @@ class TimezoneType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/TransformationFailureExtension.php b/src/Symfony/Component/Form/Extension/Core/Type/TransformationFailureExtension.php
index 029ad4d439..3814f6ada0 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/TransformationFailureExtension.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/TransformationFailureExtension.php
@@ -32,5 +32,5 @@ class TransformationFailureExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if (!isset($options['constraints'])) {
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/UlidType.php b/src/Symfony/Component/Form/Extension/Core/Type/UlidType.php
index ea3da07c02..78b57ad153 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/UlidType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/UlidType.php
@@ -25,5 +25,5 @@ class UlidType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder
@@ -35,5 +35,5 @@ class UlidType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/UrlType.php b/src/Symfony/Component/Form/Extension/Core/Type/UrlType.php
index 385c7a25fa..4a8fcc71f2 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/UrlType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/UrlType.php
@@ -24,5 +24,5 @@ class UrlType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if (null !== $options['default_protocol']) {
@@ -34,5 +34,5 @@ class UrlType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['default_protocol']) {
@@ -45,5 +45,5 @@ class UrlType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/UuidType.php b/src/Symfony/Component/Form/Extension/Core/Type/UuidType.php
index 7c0f65b9a0..d79b4d30e6 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/UuidType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/UuidType.php
@@ -25,5 +25,5 @@ class UuidType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder
@@ -35,5 +35,5 @@ class UuidType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Core/Type/WeekType.php b/src/Symfony/Component/Form/Extension/Core/Type/WeekType.php
index 8027a41a99..9ffba28dac 100644
--- a/src/Symfony/Component/Form/Extension/Core/Type/WeekType.php
+++ b/src/Symfony/Component/Form/Extension/Core/Type/WeekType.php
@@ -32,5 +32,5 @@ class WeekType extends AbstractType
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if ('string' === $options['input']) {
@@ -87,5 +87,5 @@ class WeekType extends AbstractType
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $view->vars['widget'] = $options['widget'];
@@ -99,5 +99,5 @@ class WeekType extends AbstractType
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $compound = static fn (Options $options) => 'single_text' !== $options['widget'];
diff --git a/src/Symfony/Component/Form/Extension/Csrf/EventListener/CsrfValidationListener.php b/src/Symfony/Component/Form/Extension/Csrf/EventListener/CsrfValidationListener.php
index eca450a165..72330772b9 100644
--- a/src/Symfony/Component/Form/Extension/Csrf/EventListener/CsrfValidationListener.php
+++ b/src/Symfony/Component/Form/Extension/Csrf/EventListener/CsrfValidationListener.php
@@ -55,5 +55,5 @@ class CsrfValidationListener implements EventSubscriberInterface
      * @return void
      */
-    public function preSubmit(FormEvent $event)
+    public function preSubmit(FormEvent $event): void
     {
         $form = $event->getForm();
diff --git a/src/Symfony/Component/Form/Extension/Csrf/Type/FormTypeCsrfExtension.php b/src/Symfony/Component/Form/Extension/Csrf/Type/FormTypeCsrfExtension.php
index 8c3d45dec0..ff7934deed 100644
--- a/src/Symfony/Component/Form/Extension/Csrf/Type/FormTypeCsrfExtension.php
+++ b/src/Symfony/Component/Form/Extension/Csrf/Type/FormTypeCsrfExtension.php
@@ -51,5 +51,5 @@ class FormTypeCsrfExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if (!$options['csrf_protection']) {
@@ -75,5 +75,5 @@ class FormTypeCsrfExtension extends AbstractTypeExtension
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         if ($options['csrf_protection'] && !$view->parent && $options['compound']) {
@@ -94,5 +94,5 @@ class FormTypeCsrfExtension extends AbstractTypeExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/DataCollector/EventListener/DataCollectorListener.php b/src/Symfony/Component/Form/Extension/DataCollector/EventListener/DataCollectorListener.php
index 41a52e091e..fce936b740 100644
--- a/src/Symfony/Component/Form/Extension/DataCollector/EventListener/DataCollectorListener.php
+++ b/src/Symfony/Component/Form/Extension/DataCollector/EventListener/DataCollectorListener.php
@@ -47,5 +47,5 @@ class DataCollectorListener implements EventSubscriberInterface
      * @return void
      */
-    public function postSetData(FormEvent $event)
+    public function postSetData(FormEvent $event): void
     {
         if ($event->getForm()->isRoot()) {
@@ -63,5 +63,5 @@ class DataCollectorListener implements EventSubscriberInterface
      * @return void
      */
-    public function postSubmit(FormEvent $event)
+    public function postSubmit(FormEvent $event): void
     {
         if ($event->getForm()->isRoot()) {
diff --git a/src/Symfony/Component/Form/Extension/DataCollector/FormDataCollectorInterface.php b/src/Symfony/Component/Form/Extension/DataCollector/FormDataCollectorInterface.php
index 346c101fe3..40ed4b5e8f 100644
--- a/src/Symfony/Component/Form/Extension/DataCollector/FormDataCollectorInterface.php
+++ b/src/Symfony/Component/Form/Extension/DataCollector/FormDataCollectorInterface.php
@@ -29,5 +29,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function collectConfiguration(FormInterface $form);
+    public function collectConfiguration(FormInterface $form): void;
 
     /**
@@ -36,5 +36,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function collectDefaultData(FormInterface $form);
+    public function collectDefaultData(FormInterface $form): void;
 
     /**
@@ -43,5 +43,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function collectSubmittedData(FormInterface $form);
+    public function collectSubmittedData(FormInterface $form): void;
 
     /**
@@ -50,5 +50,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function collectViewVariables(FormView $view);
+    public function collectViewVariables(FormView $view): void;
 
     /**
@@ -57,5 +57,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function associateFormWithView(FormInterface $form, FormView $view);
+    public function associateFormWithView(FormInterface $form, FormView $view): void;
 
     /**
@@ -67,5 +67,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function buildPreliminaryFormTree(FormInterface $form);
+    public function buildPreliminaryFormTree(FormInterface $form): void;
 
     /**
@@ -89,5 +89,5 @@ interface FormDataCollectorInterface extends DataCollectorInterface
      * @return void
      */
-    public function buildFinalFormTree(FormInterface $form, FormView $view);
+    public function buildFinalFormTree(FormInterface $form, FormView $view): void;
 
     /**
diff --git a/src/Symfony/Component/Form/Extension/DataCollector/Proxy/ResolvedTypeDataCollectorProxy.php b/src/Symfony/Component/Form/Extension/DataCollector/Proxy/ResolvedTypeDataCollectorProxy.php
index 6c8cf3ee24..0d8fba357e 100644
--- a/src/Symfony/Component/Form/Extension/DataCollector/Proxy/ResolvedTypeDataCollectorProxy.php
+++ b/src/Symfony/Component/Form/Extension/DataCollector/Proxy/ResolvedTypeDataCollectorProxy.php
@@ -75,5 +75,5 @@ class ResolvedTypeDataCollectorProxy implements ResolvedFormTypeInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $this->proxiedType->buildForm($builder, $options);
@@ -83,5 +83,5 @@ class ResolvedTypeDataCollectorProxy implements ResolvedFormTypeInterface
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $this->proxiedType->buildView($view, $form, $options);
@@ -91,5 +91,5 @@ class ResolvedTypeDataCollectorProxy implements ResolvedFormTypeInterface
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         $this->proxiedType->finishView($view, $form, $options);
diff --git a/src/Symfony/Component/Form/Extension/DataCollector/Type/DataCollectorTypeExtension.php b/src/Symfony/Component/Form/Extension/DataCollector/Type/DataCollectorTypeExtension.php
index f1e3c903ec..20721f3040 100644
--- a/src/Symfony/Component/Form/Extension/DataCollector/Type/DataCollectorTypeExtension.php
+++ b/src/Symfony/Component/Form/Extension/DataCollector/Type/DataCollectorTypeExtension.php
@@ -36,5 +36,5 @@ class DataCollectorTypeExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->addEventSubscriber($this->listener);
diff --git a/src/Symfony/Component/Form/Extension/HtmlSanitizer/Type/TextTypeHtmlSanitizerExtension.php b/src/Symfony/Component/Form/Extension/HtmlSanitizer/Type/TextTypeHtmlSanitizerExtension.php
index 8e92ea74a5..633d1985db 100644
--- a/src/Symfony/Component/Form/Extension/HtmlSanitizer/Type/TextTypeHtmlSanitizerExtension.php
+++ b/src/Symfony/Component/Form/Extension/HtmlSanitizer/Type/TextTypeHtmlSanitizerExtension.php
@@ -39,5 +39,5 @@ class TextTypeHtmlSanitizerExtension extends AbstractTypeExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver
@@ -51,5 +51,5 @@ class TextTypeHtmlSanitizerExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if (!$options['sanitize_html']) {
diff --git a/src/Symfony/Component/Form/Extension/HttpFoundation/HttpFoundationRequestHandler.php b/src/Symfony/Component/Form/Extension/HttpFoundation/HttpFoundationRequestHandler.php
index b4e835c95a..9cbcc28e31 100644
--- a/src/Symfony/Component/Form/Extension/HttpFoundation/HttpFoundationRequestHandler.php
+++ b/src/Symfony/Component/Form/Extension/HttpFoundation/HttpFoundationRequestHandler.php
@@ -39,5 +39,5 @@ class HttpFoundationRequestHandler implements RequestHandlerInterface
      * @return void
      */
-    public function handleRequest(FormInterface $form, mixed $request = null)
+    public function handleRequest(FormInterface $form, mixed $request = null): void
     {
         if (!$request instanceof Request) {
diff --git a/src/Symfony/Component/Form/Extension/HttpFoundation/Type/FormTypeHttpFoundationExtension.php b/src/Symfony/Component/Form/Extension/HttpFoundation/Type/FormTypeHttpFoundationExtension.php
index cc3e5e1207..f9c85b9a0a 100644
--- a/src/Symfony/Component/Form/Extension/HttpFoundation/Type/FormTypeHttpFoundationExtension.php
+++ b/src/Symfony/Component/Form/Extension/HttpFoundation/Type/FormTypeHttpFoundationExtension.php
@@ -33,5 +33,5 @@ class FormTypeHttpFoundationExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->setRequestHandler($this->requestHandler);
diff --git a/src/Symfony/Component/Form/Extension/PasswordHasher/EventListener/PasswordHasherListener.php b/src/Symfony/Component/Form/Extension/PasswordHasher/EventListener/PasswordHasherListener.php
index 4854dd3e73..b61c5664f6 100644
--- a/src/Symfony/Component/Form/Extension/PasswordHasher/EventListener/PasswordHasherListener.php
+++ b/src/Symfony/Component/Form/Extension/PasswordHasher/EventListener/PasswordHasherListener.php
@@ -39,5 +39,5 @@ class PasswordHasherListener
      * @return void
      */
-    public function registerPassword(FormEvent $event)
+    public function registerPassword(FormEvent $event): void
     {
         if (null === $event->getData() || '' === $event->getData()) {
@@ -57,5 +57,5 @@ class PasswordHasherListener
      * @return void
      */
-    public function hashPasswords(FormEvent $event)
+    public function hashPasswords(FormEvent $event): void
     {
         $form = $event->getForm();
diff --git a/src/Symfony/Component/Form/Extension/PasswordHasher/Type/FormTypePasswordHasherExtension.php b/src/Symfony/Component/Form/Extension/PasswordHasher/Type/FormTypePasswordHasherExtension.php
index 5308992863..e799b6ba31 100644
--- a/src/Symfony/Component/Form/Extension/PasswordHasher/Type/FormTypePasswordHasherExtension.php
+++ b/src/Symfony/Component/Form/Extension/PasswordHasher/Type/FormTypePasswordHasherExtension.php
@@ -31,5 +31,5 @@ class FormTypePasswordHasherExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->addEventListener(FormEvents::POST_SUBMIT, [$this->passwordHasherListener, 'hashPasswords']);
diff --git a/src/Symfony/Component/Form/Extension/PasswordHasher/Type/PasswordTypePasswordHasherExtension.php b/src/Symfony/Component/Form/Extension/PasswordHasher/Type/PasswordTypePasswordHasherExtension.php
index 6f022fb1bf..aede2bbb52 100644
--- a/src/Symfony/Component/Form/Extension/PasswordHasher/Type/PasswordTypePasswordHasherExtension.php
+++ b/src/Symfony/Component/Form/Extension/PasswordHasher/Type/PasswordTypePasswordHasherExtension.php
@@ -33,5 +33,5 @@ class PasswordTypePasswordHasherExtension extends AbstractTypeExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         if ($options['hash_property_path']) {
@@ -43,5 +43,5 @@ class PasswordTypePasswordHasherExtension extends AbstractTypeExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php b/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php
index d664e9b500..fbff1c16bf 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php
@@ -33,5 +33,5 @@ class FormValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $form, Constraint $formConstraint)
+    public function validate(mixed $form, Constraint $formConstraint): void
     {
         if (!$formConstraint instanceof Form) {
diff --git a/src/Symfony/Component/Form/Extension/Validator/EventListener/ValidationListener.php b/src/Symfony/Component/Form/Extension/Validator/EventListener/ValidationListener.php
index e2d4357622..ed84c8b4cf 100644
--- a/src/Symfony/Component/Form/Extension/Validator/EventListener/ValidationListener.php
+++ b/src/Symfony/Component/Form/Extension/Validator/EventListener/ValidationListener.php
@@ -41,5 +41,5 @@ class ValidationListener implements EventSubscriberInterface
      * @return void
      */
-    public function validateForm(FormEvent $event)
+    public function validateForm(FormEvent $event): void
     {
         $form = $event->getForm();
diff --git a/src/Symfony/Component/Form/Extension/Validator/Type/BaseValidatorExtension.php b/src/Symfony/Component/Form/Extension/Validator/Type/BaseValidatorExtension.php
index ea01d03699..e9c7e410af 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Type/BaseValidatorExtension.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Type/BaseValidatorExtension.php
@@ -28,5 +28,5 @@ abstract class BaseValidatorExtension extends AbstractTypeExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         // Make sure that validation groups end up as null, closure or array
diff --git a/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php b/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php
index 54eebaf63e..e6be9e5266 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php
@@ -41,5 +41,5 @@ class FormTypeValidatorExtension extends BaseValidatorExtension
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $builder->addEventSubscriber(new ValidationListener($this->validator, $this->violationMapper));
@@ -49,5 +49,5 @@ class FormTypeValidatorExtension extends BaseValidatorExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         parent::configureOptions($resolver);
diff --git a/src/Symfony/Component/Form/Extension/Validator/Type/RepeatedTypeValidatorExtension.php b/src/Symfony/Component/Form/Extension/Validator/Type/RepeatedTypeValidatorExtension.php
index d41dc0168c..0cb2b3c6c8 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Type/RepeatedTypeValidatorExtension.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Type/RepeatedTypeValidatorExtension.php
@@ -25,5 +25,5 @@ class RepeatedTypeValidatorExtension extends AbstractTypeExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         // Map errors to the first field
diff --git a/src/Symfony/Component/Form/Extension/Validator/Type/UploadValidatorExtension.php b/src/Symfony/Component/Form/Extension/Validator/Type/UploadValidatorExtension.php
index b7a19ed26a..30c8b9e57c 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Type/UploadValidatorExtension.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Type/UploadValidatorExtension.php
@@ -36,5 +36,5 @@ class UploadValidatorExtension extends AbstractTypeExtension
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver)
+    public function configureOptions(OptionsResolver $resolver): void
     {
         $translator = $this->translator;
diff --git a/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapper.php b/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapper.php
index 2f2ccefd30..689a6d5cab 100644
--- a/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapper.php
+++ b/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapper.php
@@ -42,5 +42,5 @@ class ViolationMapper implements ViolationMapperInterface
      * @return void
      */
-    public function mapViolation(ConstraintViolation $violation, FormInterface $form, bool $allowNonSynchronized = false)
+    public function mapViolation(ConstraintViolation $violation, FormInterface $form, bool $allowNonSynchronized = false): void
     {
         $this->allowNonSynchronized = $allowNonSynchronized;
diff --git a/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapperInterface.php b/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapperInterface.php
index a72d41df9e..6a58a1bddc 100644
--- a/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapperInterface.php
+++ b/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationMapperInterface.php
@@ -28,4 +28,4 @@ interface ViolationMapperInterface
      * @return void
      */
-    public function mapViolation(ConstraintViolation $violation, FormInterface $form, bool $allowNonSynchronized = false);
+    public function mapViolation(ConstraintViolation $violation, FormInterface $form, bool $allowNonSynchronized = false): void;
 }
diff --git a/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationPathIterator.php b/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationPathIterator.php
index ed363a7b15..967d95cc27 100644
--- a/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationPathIterator.php
+++ b/src/Symfony/Component/Form/Extension/Validator/ViolationMapper/ViolationPathIterator.php
@@ -27,5 +27,5 @@ class ViolationPathIterator extends PropertyPathIterator
      * @return bool
      */
-    public function mapsForm()
+    public function mapsForm(): bool
     {
         return $this->path->mapsForm($this->key());
diff --git a/src/Symfony/Component/Form/FormConfigBuilder.php b/src/Symfony/Component/Form/FormConfigBuilder.php
index 9fed3d1a0a..5cd4eb5f16 100644
--- a/src/Symfony/Component/Form/FormConfigBuilder.php
+++ b/src/Symfony/Component/Form/FormConfigBuilder.php
@@ -537,5 +537,5 @@ class FormConfigBuilder implements FormConfigBuilderInterface
      * @return $this
      */
-    public function setFormFactory(FormFactoryInterface $formFactory)
+    public function setFormFactory(FormFactoryInterface $formFactory): static
     {
         if ($this->locked) {
diff --git a/src/Symfony/Component/Form/FormConfigBuilderInterface.php b/src/Symfony/Component/Form/FormConfigBuilderInterface.php
index 09b9149801..6b22b9f9e8 100644
--- a/src/Symfony/Component/Form/FormConfigBuilderInterface.php
+++ b/src/Symfony/Component/Form/FormConfigBuilderInterface.php
@@ -209,5 +209,5 @@ interface FormConfigBuilderInterface extends FormConfigInterface
      * @return $this
      */
-    public function setFormFactory(FormFactoryInterface $formFactory);
+    public function setFormFactory(FormFactoryInterface $formFactory): static;
 
     /**
diff --git a/src/Symfony/Component/Form/FormError.php b/src/Symfony/Component/Form/FormError.php
index 572783c7ac..37d609af00 100644
--- a/src/Symfony/Component/Form/FormError.php
+++ b/src/Symfony/Component/Form/FormError.php
@@ -104,5 +104,5 @@ class FormError
      * @throws BadMethodCallException If the method is called more than once
      */
-    public function setOrigin(FormInterface $origin)
+    public function setOrigin(FormInterface $origin): void
     {
         if (null !== $this->origin) {
diff --git a/src/Symfony/Component/Form/FormEvent.php b/src/Symfony/Component/Form/FormEvent.php
index 1e6aa34d63..3f05ff971a 100644
--- a/src/Symfony/Component/Form/FormEvent.php
+++ b/src/Symfony/Component/Form/FormEvent.php
@@ -49,5 +49,5 @@ class FormEvent extends Event
      * @return void
      */
-    public function setData(mixed $data)
+    public function setData(mixed $data): void
     {
         $this->data = $data;
diff --git a/src/Symfony/Component/Form/FormRenderer.php b/src/Symfony/Component/Form/FormRenderer.php
index 18dec4946b..9272277b5c 100644
--- a/src/Symfony/Component/Form/FormRenderer.php
+++ b/src/Symfony/Component/Form/FormRenderer.php
@@ -46,5 +46,5 @@ class FormRenderer implements FormRendererInterface
      * @return void
      */
-    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true)
+    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true): void
     {
         $this->engine->setTheme($view, $themes, $useDefaultThemes);
diff --git a/src/Symfony/Component/Form/FormRendererEngineInterface.php b/src/Symfony/Component/Form/FormRendererEngineInterface.php
index e7de3544a1..739c7b835e 100644
--- a/src/Symfony/Component/Form/FormRendererEngineInterface.php
+++ b/src/Symfony/Component/Form/FormRendererEngineInterface.php
@@ -28,5 +28,5 @@ interface FormRendererEngineInterface
      * @return void
      */
-    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true);
+    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true): void;
 
     /**
@@ -133,4 +133,4 @@ interface FormRendererEngineInterface
      * @return string
      */
-    public function renderBlock(FormView $view, mixed $resource, string $blockName, array $variables = []);
+    public function renderBlock(FormView $view, mixed $resource, string $blockName, array $variables = []): string;
 }
diff --git a/src/Symfony/Component/Form/FormRendererInterface.php b/src/Symfony/Component/Form/FormRendererInterface.php
index 8e805727ce..188a668c77 100644
--- a/src/Symfony/Component/Form/FormRendererInterface.php
+++ b/src/Symfony/Component/Form/FormRendererInterface.php
@@ -35,5 +35,5 @@ interface FormRendererInterface
      * @return void
      */
-    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true);
+    public function setTheme(FormView $view, mixed $themes, bool $useDefaultThemes = true): void;
 
     /**
diff --git a/src/Symfony/Component/Form/FormTypeExtensionInterface.php b/src/Symfony/Component/Form/FormTypeExtensionInterface.php
index 1937834515..25712a13d7 100644
--- a/src/Symfony/Component/Form/FormTypeExtensionInterface.php
+++ b/src/Symfony/Component/Form/FormTypeExtensionInterface.php
@@ -31,5 +31,5 @@ interface FormTypeExtensionInterface
      * @see FormTypeInterface::buildForm()
      */
-    public function buildForm(FormBuilderInterface $builder, array $options);
+    public function buildForm(FormBuilderInterface $builder, array $options): void;
 
     /**
@@ -45,5 +45,5 @@ interface FormTypeExtensionInterface
      * @see FormTypeInterface::buildView()
      */
-    public function buildView(FormView $view, FormInterface $form, array $options);
+    public function buildView(FormView $view, FormInterface $form, array $options): void;
 
     /**
@@ -59,10 +59,10 @@ interface FormTypeExtensionInterface
      * @see FormTypeInterface::finishView()
      */
-    public function finishView(FormView $view, FormInterface $form, array $options);
+    public function finishView(FormView $view, FormInterface $form, array $options): void;
 
     /**
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver);
+    public function configureOptions(OptionsResolver $resolver): void;
 
     /**
diff --git a/src/Symfony/Component/Form/FormTypeGuesserInterface.php b/src/Symfony/Component/Form/FormTypeGuesserInterface.php
index 61e2c5f80d..4d6b335474 100644
--- a/src/Symfony/Component/Form/FormTypeGuesserInterface.php
+++ b/src/Symfony/Component/Form/FormTypeGuesserInterface.php
@@ -22,5 +22,5 @@ interface FormTypeGuesserInterface
      * @return Guess\TypeGuess|null
      */
-    public function guessType(string $class, string $property);
+    public function guessType(string $class, string $property): ?Guess\TypeGuess;
 
     /**
@@ -29,5 +29,5 @@ interface FormTypeGuesserInterface
      * @return Guess\ValueGuess|null
      */
-    public function guessRequired(string $class, string $property);
+    public function guessRequired(string $class, string $property): ?Guess\ValueGuess;
 
     /**
@@ -36,5 +36,5 @@ interface FormTypeGuesserInterface
      * @return Guess\ValueGuess|null
      */
-    public function guessMaxLength(string $class, string $property);
+    public function guessMaxLength(string $class, string $property): ?Guess\ValueGuess;
 
     /**
@@ -50,4 +50,4 @@ interface FormTypeGuesserInterface
      * @return Guess\ValueGuess|null
      */
-    public function guessPattern(string $class, string $property);
+    public function guessPattern(string $class, string $property): ?Guess\ValueGuess;
 }
diff --git a/src/Symfony/Component/Form/FormTypeInterface.php b/src/Symfony/Component/Form/FormTypeInterface.php
index 0c586d3f71..6c625cf403 100644
--- a/src/Symfony/Component/Form/FormTypeInterface.php
+++ b/src/Symfony/Component/Form/FormTypeInterface.php
@@ -31,5 +31,5 @@ interface FormTypeInterface
      * @see FormTypeExtensionInterface::buildForm()
      */
-    public function buildForm(FormBuilderInterface $builder, array $options);
+    public function buildForm(FormBuilderInterface $builder, array $options): void;
 
     /**
@@ -49,5 +49,5 @@ interface FormTypeInterface
      * @see FormTypeExtensionInterface::buildView()
      */
-    public function buildView(FormView $view, FormInterface $form, array $options);
+    public function buildView(FormView $view, FormInterface $form, array $options): void;
 
     /**
@@ -68,5 +68,5 @@ interface FormTypeInterface
      * @see FormTypeExtensionInterface::finishView()
      */
-    public function finishView(FormView $view, FormInterface $form, array $options);
+    public function finishView(FormView $view, FormInterface $form, array $options): void;
 
     /**
@@ -75,5 +75,5 @@ interface FormTypeInterface
      * @return void
      */
-    public function configureOptions(OptionsResolver $resolver);
+    public function configureOptions(OptionsResolver $resolver): void;
 
     /**
@@ -85,5 +85,5 @@ interface FormTypeInterface
      * @return string
      */
-    public function getBlockPrefix();
+    public function getBlockPrefix(): string;
 
     /**
@@ -92,4 +92,4 @@ interface FormTypeInterface
      * @return string|null
      */
-    public function getParent();
+    public function getParent(): ?string;
 }
diff --git a/src/Symfony/Component/Form/FormView.php b/src/Symfony/Component/Form/FormView.php
index e04fa13b09..231b75810e 100644
--- a/src/Symfony/Component/Form/FormView.php
+++ b/src/Symfony/Component/Form/FormView.php
@@ -96,5 +96,5 @@ class FormView implements \ArrayAccess, \IteratorAggregate, \Countable
      * @return void
      */
-    public function setMethodRendered()
+    public function setMethodRendered(): void
     {
         $this->methodRendered = true;
diff --git a/src/Symfony/Component/Form/NativeRequestHandler.php b/src/Symfony/Component/Form/NativeRequestHandler.php
index 11c4d4d9c0..a09361d59a 100644
--- a/src/Symfony/Component/Form/NativeRequestHandler.php
+++ b/src/Symfony/Component/Form/NativeRequestHandler.php
@@ -45,5 +45,5 @@ class NativeRequestHandler implements RequestHandlerInterface
      * @throws Exception\UnexpectedTypeException If the $request is not null
      */
-    public function handleRequest(FormInterface $form, mixed $request = null)
+    public function handleRequest(FormInterface $form, mixed $request = null): void
     {
         if (null !== $request) {
diff --git a/src/Symfony/Component/Form/RequestHandlerInterface.php b/src/Symfony/Component/Form/RequestHandlerInterface.php
index 39fd458ee4..ccd77ccecc 100644
--- a/src/Symfony/Component/Form/RequestHandlerInterface.php
+++ b/src/Symfony/Component/Form/RequestHandlerInterface.php
@@ -24,5 +24,5 @@ interface RequestHandlerInterface
      * @return void
      */
-    public function handleRequest(FormInterface $form, mixed $request = null);
+    public function handleRequest(FormInterface $form, mixed $request = null): void;
 
     /**
diff --git a/src/Symfony/Component/Form/ResolvedFormType.php b/src/Symfony/Component/Form/ResolvedFormType.php
index f05db1533b..0e67c63c66 100644
--- a/src/Symfony/Component/Form/ResolvedFormType.php
+++ b/src/Symfony/Component/Form/ResolvedFormType.php
@@ -96,5 +96,5 @@ class ResolvedFormType implements ResolvedFormTypeInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options)
+    public function buildForm(FormBuilderInterface $builder, array $options): void
     {
         $this->parent?->buildForm($builder, $options);
@@ -110,5 +110,5 @@ class ResolvedFormType implements ResolvedFormTypeInterface
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options)
+    public function buildView(FormView $view, FormInterface $form, array $options): void
     {
         $this->parent?->buildView($view, $form, $options);
@@ -124,5 +124,5 @@ class ResolvedFormType implements ResolvedFormTypeInterface
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options)
+    public function finishView(FormView $view, FormInterface $form, array $options): void
     {
         $this->parent?->finishView($view, $form, $options);
diff --git a/src/Symfony/Component/Form/ResolvedFormTypeInterface.php b/src/Symfony/Component/Form/ResolvedFormTypeInterface.php
index e0b96a5ac3..7982e0cab3 100644
--- a/src/Symfony/Component/Form/ResolvedFormTypeInterface.php
+++ b/src/Symfony/Component/Form/ResolvedFormTypeInterface.php
@@ -60,5 +60,5 @@ interface ResolvedFormTypeInterface
      * @return void
      */
-    public function buildForm(FormBuilderInterface $builder, array $options);
+    public function buildForm(FormBuilderInterface $builder, array $options): void;
 
     /**
@@ -69,5 +69,5 @@ interface ResolvedFormTypeInterface
      * @return void
      */
-    public function buildView(FormView $view, FormInterface $form, array $options);
+    public function buildView(FormView $view, FormInterface $form, array $options): void;
 
     /**
@@ -78,5 +78,5 @@ interface ResolvedFormTypeInterface
      * @return void
      */
-    public function finishView(FormView $view, FormInterface $form, array $options);
+    public function finishView(FormView $view, FormInterface $form, array $options): void;
 
     /**
diff --git a/src/Symfony/Component/HttpClient/CachingHttpClient.php b/src/Symfony/Component/HttpClient/CachingHttpClient.php
index 0b6e495806..8cef2cad7c 100644
--- a/src/Symfony/Component/HttpClient/CachingHttpClient.php
+++ b/src/Symfony/Component/HttpClient/CachingHttpClient.php
@@ -140,5 +140,5 @@ class CachingHttpClient implements HttpClientInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         if ($this->client instanceof ResetInterface) {
diff --git a/src/Symfony/Component/HttpClient/DecoratorTrait.php b/src/Symfony/Component/HttpClient/DecoratorTrait.php
index 472437e465..1dfe39146b 100644
--- a/src/Symfony/Component/HttpClient/DecoratorTrait.php
+++ b/src/Symfony/Component/HttpClient/DecoratorTrait.php
@@ -52,5 +52,5 @@ trait DecoratorTrait
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         if ($this->client instanceof ResetInterface) {
diff --git a/src/Symfony/Component/HttpClient/HttpClientTrait.php b/src/Symfony/Component/HttpClient/HttpClientTrait.php
index 48782153b4..f2bbcf288d 100644
--- a/src/Symfony/Component/HttpClient/HttpClientTrait.php
+++ b/src/Symfony/Component/HttpClient/HttpClientTrait.php
@@ -679,5 +679,5 @@ trait HttpClientTrait
      * @return string
      */
-    private static function removeDotSegments(string $path)
+    private static function removeDotSegments(string $path): string
     {
         $result = '';
diff --git a/src/Symfony/Component/HttpClient/MockHttpClient.php b/src/Symfony/Component/HttpClient/MockHttpClient.php
index 5d8a2dccff..300c56dc6d 100644
--- a/src/Symfony/Component/HttpClient/MockHttpClient.php
+++ b/src/Symfony/Component/HttpClient/MockHttpClient.php
@@ -110,5 +110,5 @@ class MockHttpClient implements HttpClientInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->requestsCount = 0;
diff --git a/src/Symfony/Component/HttpClient/ScopingHttpClient.php b/src/Symfony/Component/HttpClient/ScopingHttpClient.php
index a87171d2ca..cec8a6f027 100644
--- a/src/Symfony/Component/HttpClient/ScopingHttpClient.php
+++ b/src/Symfony/Component/HttpClient/ScopingHttpClient.php
@@ -97,5 +97,5 @@ class ScopingHttpClient implements HttpClientInterface, ResetInterface, LoggerAw
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         if ($this->client instanceof ResetInterface) {
diff --git a/src/Symfony/Component/HttpFoundation/BinaryFileResponse.php b/src/Symfony/Component/HttpFoundation/BinaryFileResponse.php
index cd716e590e..68a0479ef4 100644
--- a/src/Symfony/Component/HttpFoundation/BinaryFileResponse.php
+++ b/src/Symfony/Component/HttpFoundation/BinaryFileResponse.php
@@ -362,5 +362,5 @@ class BinaryFileResponse extends Response
      * @return void
      */
-    public static function trustXSendfileTypeHeader()
+    public static function trustXSendfileTypeHeader(): void
     {
         self::$trustXSendfileTypeHeader = true;
diff --git a/src/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php b/src/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php
index fe65e920d9..6a78e6e779 100644
--- a/src/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php
+++ b/src/Symfony/Component/HttpFoundation/ExpressionRequestMatcher.php
@@ -33,5 +33,5 @@ class ExpressionRequestMatcher extends RequestMatcher
      * @return void
      */
-    public function setExpression(ExpressionLanguage $language, Expression|string $expression)
+    public function setExpression(ExpressionLanguage $language, Expression|string $expression): void
     {
         $this->language = $language;
diff --git a/src/Symfony/Component/HttpFoundation/FileBag.php b/src/Symfony/Component/HttpFoundation/FileBag.php
index b74a02e2e1..51b4f7f1c3 100644
--- a/src/Symfony/Component/HttpFoundation/FileBag.php
+++ b/src/Symfony/Component/HttpFoundation/FileBag.php
@@ -35,5 +35,5 @@ class FileBag extends ParameterBag
      * @return void
      */
-    public function replace(array $files = [])
+    public function replace(array $files = []): void
     {
         $this->parameters = [];
@@ -44,5 +44,5 @@ class FileBag extends ParameterBag
      * @return void
      */
-    public function set(string $key, mixed $value)
+    public function set(string $key, mixed $value): void
     {
         if (!\is_array($value) && !$value instanceof UploadedFile) {
@@ -56,5 +56,5 @@ class FileBag extends ParameterBag
      * @return void
      */
-    public function add(array $files = [])
+    public function add(array $files = []): void
     {
         foreach ($files as $key => $file) {
diff --git a/src/Symfony/Component/HttpFoundation/HeaderBag.php b/src/Symfony/Component/HttpFoundation/HeaderBag.php
index c49a239726..440f3297de 100644
--- a/src/Symfony/Component/HttpFoundation/HeaderBag.php
+++ b/src/Symfony/Component/HttpFoundation/HeaderBag.php
@@ -90,5 +90,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function replace(array $headers = [])
+    public function replace(array $headers = []): void
     {
         $this->headers = [];
@@ -101,5 +101,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function add(array $headers)
+    public function add(array $headers): void
     {
         foreach ($headers as $key => $values) {
@@ -134,5 +134,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function set(string $key, string|array|null $values, bool $replace = true)
+    public function set(string $key, string|array|null $values, bool $replace = true): void
     {
         $key = strtr($key, self::UPPER, self::LOWER);
@@ -180,5 +180,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function remove(string $key)
+    public function remove(string $key): void
     {
         $key = strtr($key, self::UPPER, self::LOWER);
@@ -214,5 +214,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addCacheControlDirective(string $key, bool|string $value = true)
+    public function addCacheControlDirective(string $key, bool|string $value = true): void
     {
         $this->cacheControl[$key] = $value;
@@ -242,5 +242,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function removeCacheControlDirective(string $key)
+    public function removeCacheControlDirective(string $key): void
     {
         unset($this->cacheControl[$key]);
@@ -270,5 +270,5 @@ class HeaderBag implements \IteratorAggregate, \Countable
      * @return string
      */
-    protected function getCacheControlHeader()
+    protected function getCacheControlHeader(): string
     {
         ksort($this->cacheControl);
diff --git a/src/Symfony/Component/HttpFoundation/ParameterBag.php b/src/Symfony/Component/HttpFoundation/ParameterBag.php
index 9d7012de35..545339d4ef 100644
--- a/src/Symfony/Component/HttpFoundation/ParameterBag.php
+++ b/src/Symfony/Component/HttpFoundation/ParameterBag.php
@@ -64,5 +64,5 @@ class ParameterBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function replace(array $parameters = [])
+    public function replace(array $parameters = []): void
     {
         $this->parameters = $parameters;
@@ -74,5 +74,5 @@ class ParameterBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function add(array $parameters = [])
+    public function add(array $parameters = []): void
     {
         $this->parameters = array_replace($this->parameters, $parameters);
@@ -87,5 +87,5 @@ class ParameterBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function set(string $key, mixed $value)
+    public function set(string $key, mixed $value): void
     {
         $this->parameters[$key] = $value;
@@ -105,5 +105,5 @@ class ParameterBag implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function remove(string $key)
+    public function remove(string $key): void
     {
         unset($this->parameters[$key]);
diff --git a/src/Symfony/Component/HttpFoundation/Request.php b/src/Symfony/Component/HttpFoundation/Request.php
index 633b4a63e2..b69b8cc723 100644
--- a/src/Symfony/Component/HttpFoundation/Request.php
+++ b/src/Symfony/Component/HttpFoundation/Request.php
@@ -269,5 +269,5 @@ class Request
      * @return void
      */
-    public function initialize(array $query = [], array $request = [], array $attributes = [], array $cookies = [], array $files = [], array $server = [], $content = null)
+    public function initialize(array $query = [], array $request = [], array $attributes = [], array $cookies = [], array $files = [], array $server = [], $content = null): void
     {
         $this->request = new InputBag($request);
@@ -429,5 +429,5 @@ class Request
      * @return void
      */
-    public static function setFactory(?callable $callable)
+    public static function setFactory(?callable $callable): void
     {
         self::$requestFactory = $callable;
@@ -535,5 +535,5 @@ class Request
      * @return void
      */
-    public function overrideGlobals()
+    public function overrideGlobals(): void
     {
         $this->server->set('QUERY_STRING', static::normalizeQueryString(http_build_query($this->query->all(), '', '&')));
@@ -577,5 +577,5 @@ class Request
      * @return void
      */
-    public static function setTrustedProxies(array $proxies, int $trustedHeaderSet)
+    public static function setTrustedProxies(array $proxies, int $trustedHeaderSet): void
     {
         self::$trustedProxies = array_reduce($proxies, function ($proxies, $proxy) {
@@ -620,5 +620,5 @@ class Request
      * @return void
      */
-    public static function setTrustedHosts(array $hostPatterns)
+    public static function setTrustedHosts(array $hostPatterns): void
     {
         self::$trustedHostPatterns = array_map(fn ($hostPattern) => sprintf('{%s}i', $hostPattern), $hostPatterns);
@@ -668,5 +668,5 @@ class Request
      * @return void
      */
-    public static function enableHttpMethodParameterOverride()
+    public static function enableHttpMethodParameterOverride(): void
     {
         self::$httpMethodParameterOverride = true;
@@ -755,5 +755,5 @@ class Request
      * @return void
      */
-    public function setSession(SessionInterface $session)
+    public function setSession(SessionInterface $session): void
     {
         $this->session = $session;
@@ -1178,5 +1178,5 @@ class Request
      * @return void
      */
-    public function setMethod(string $method)
+    public function setMethod(string $method): void
     {
         $this->method = null;
@@ -1301,5 +1301,5 @@ class Request
      * @return void
      */
-    public function setFormat(?string $format, string|array $mimeTypes)
+    public function setFormat(?string $format, string|array $mimeTypes): void
     {
         if (null === static::$formats) {
@@ -1333,5 +1333,5 @@ class Request
      * @return void
      */
-    public function setRequestFormat(?string $format)
+    public function setRequestFormat(?string $format): void
     {
         $this->format = $format;
@@ -1365,5 +1365,5 @@ class Request
      * @return void
      */
-    public function setDefaultLocale(string $locale)
+    public function setDefaultLocale(string $locale): void
     {
         $this->defaultLocale = $locale;
@@ -1387,5 +1387,5 @@ class Request
      * @return void
      */
-    public function setLocale(string $locale)
+    public function setLocale(string $locale): void
     {
         $this->setPhpDefaultLocale($this->locale = $locale);
@@ -1736,5 +1736,5 @@ class Request
      * @return string
      */
-    protected function prepareRequestUri()
+    protected function prepareRequestUri(): string
     {
         $requestUri = '';
@@ -1907,5 +1907,5 @@ class Request
      * @return void
      */
-    protected static function initializeFormats()
+    protected static function initializeFormats(): void
     {
         static::$formats = [
diff --git a/src/Symfony/Component/HttpFoundation/RequestMatcher.php b/src/Symfony/Component/HttpFoundation/RequestMatcher.php
index 8c5f1d8134..fdd3a666e9 100644
--- a/src/Symfony/Component/HttpFoundation/RequestMatcher.php
+++ b/src/Symfony/Component/HttpFoundation/RequestMatcher.php
@@ -73,5 +73,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchScheme(string|array|null $scheme)
+    public function matchScheme(string|array|null $scheme): void
     {
         $this->schemes = null !== $scheme ? array_map('strtolower', (array) $scheme) : [];
@@ -83,5 +83,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchHost(?string $regexp)
+    public function matchHost(?string $regexp): void
     {
         $this->host = $regexp;
@@ -95,5 +95,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchPort(?int $port)
+    public function matchPort(?int $port): void
     {
         $this->port = $port;
@@ -105,5 +105,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchPath(?string $regexp)
+    public function matchPath(?string $regexp): void
     {
         $this->path = $regexp;
@@ -117,5 +117,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchIp(string $ip)
+    public function matchIp(string $ip): void
     {
         $this->matchIps($ip);
@@ -129,5 +129,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchIps(string|array|null $ips)
+    public function matchIps(string|array|null $ips): void
     {
         $ips = null !== $ips ? (array) $ips : [];
@@ -143,5 +143,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchMethod(string|array|null $method)
+    public function matchMethod(string|array|null $method): void
     {
         $this->methods = null !== $method ? array_map('strtoupper', (array) $method) : [];
@@ -153,5 +153,5 @@ class RequestMatcher implements RequestMatcherInterface
      * @return void
      */
-    public function matchAttribute(string $key, string $regexp)
+    public function matchAttribute(string $key, string $regexp): void
     {
         $this->attributes[$key] = $regexp;
diff --git a/src/Symfony/Component/HttpFoundation/RequestStack.php b/src/Symfony/Component/HttpFoundation/RequestStack.php
index 5aa8ba7934..80742b0764 100644
--- a/src/Symfony/Component/HttpFoundation/RequestStack.php
+++ b/src/Symfony/Component/HttpFoundation/RequestStack.php
@@ -35,5 +35,5 @@ class RequestStack
      * @return void
      */
-    public function push(Request $request)
+    public function push(Request $request): void
     {
         $this->requests[] = $request;
diff --git a/src/Symfony/Component/HttpFoundation/ResponseHeaderBag.php b/src/Symfony/Component/HttpFoundation/ResponseHeaderBag.php
index 10450ca5e2..3e034007fb 100644
--- a/src/Symfony/Component/HttpFoundation/ResponseHeaderBag.php
+++ b/src/Symfony/Component/HttpFoundation/ResponseHeaderBag.php
@@ -59,5 +59,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return array
      */
-    public function allPreserveCaseWithoutCookies()
+    public function allPreserveCaseWithoutCookies(): array
     {
         $headers = $this->allPreserveCase();
@@ -72,5 +72,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return void
      */
-    public function replace(array $headers = [])
+    public function replace(array $headers = []): void
     {
         $this->headerNames = [];
@@ -107,5 +107,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return void
      */
-    public function set(string $key, string|array|null $values, bool $replace = true)
+    public function set(string $key, string|array|null $values, bool $replace = true): void
     {
         $uniqueKey = strtr($key, self::UPPER, self::LOWER);
@@ -138,5 +138,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return void
      */
-    public function remove(string $key)
+    public function remove(string $key): void
     {
         $uniqueKey = strtr($key, self::UPPER, self::LOWER);
@@ -173,5 +173,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return void
      */
-    public function setCookie(Cookie $cookie)
+    public function setCookie(Cookie $cookie): void
     {
         $this->cookies[$cookie->getDomain()][$cookie->getPath()][$cookie->getName()] = $cookie;
@@ -184,5 +184,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return void
      */
-    public function removeCookie(string $name, ?string $path = '/', string $domain = null)
+    public function removeCookie(string $name, ?string $path = '/', string $domain = null): void
     {
         $path ??= '/';
@@ -237,5 +237,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return void
      */
-    public function clearCookie(string $name, ?string $path = '/', string $domain = null, bool $secure = false, bool $httpOnly = true, string $sameSite = null)
+    public function clearCookie(string $name, ?string $path = '/', string $domain = null, bool $secure = false, bool $httpOnly = true, string $sameSite = null): void
     {
         $this->setCookie(new Cookie($name, null, 1, $path, $domain, $secure, $httpOnly, false, $sameSite));
@@ -247,5 +247,5 @@ class ResponseHeaderBag extends HeaderBag
      * @return string
      */
-    public function makeDisposition(string $disposition, string $filename, string $filenameFallback = '')
+    public function makeDisposition(string $disposition, string $filename, string $filenameFallback = ''): string
     {
         return HeaderUtils::makeDisposition($disposition, $filename, $filenameFallback);
diff --git a/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php b/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php
index ad5a6590a5..cf296c1d6d 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php
@@ -40,5 +40,5 @@ class AttributeBag implements AttributeBagInterface, \IteratorAggregate, \Counta
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -48,5 +48,5 @@ class AttributeBag implements AttributeBagInterface, \IteratorAggregate, \Counta
      * @return void
      */
-    public function initialize(array &$attributes)
+    public function initialize(array &$attributes): void
     {
         $this->attributes = &$attributes;
@@ -71,5 +71,5 @@ class AttributeBag implements AttributeBagInterface, \IteratorAggregate, \Counta
      * @return void
      */
-    public function set(string $name, mixed $value)
+    public function set(string $name, mixed $value): void
     {
         $this->attributes[$name] = $value;
@@ -84,5 +84,5 @@ class AttributeBag implements AttributeBagInterface, \IteratorAggregate, \Counta
      * @return void
      */
-    public function replace(array $attributes)
+    public function replace(array $attributes): void
     {
         $this->attributes = [];
diff --git a/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBagInterface.php b/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBagInterface.php
index e8cd0b5a4d..27eca96974 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBagInterface.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBagInterface.php
@@ -36,5 +36,5 @@ interface AttributeBagInterface extends SessionBagInterface
      * @return void
      */
-    public function set(string $name, mixed $value);
+    public function set(string $name, mixed $value): void;
 
     /**
@@ -48,5 +48,5 @@ interface AttributeBagInterface extends SessionBagInterface
      * @return void
      */
-    public function replace(array $attributes);
+    public function replace(array $attributes): void;
 
     /**
diff --git a/src/Symfony/Component/HttpFoundation/Session/Flash/AutoExpireFlashBag.php b/src/Symfony/Component/HttpFoundation/Session/Flash/AutoExpireFlashBag.php
index 80bbeda0f8..c4d461cd3a 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Flash/AutoExpireFlashBag.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Flash/AutoExpireFlashBag.php
@@ -39,5 +39,5 @@ class AutoExpireFlashBag implements FlashBagInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -47,5 +47,5 @@ class AutoExpireFlashBag implements FlashBagInterface
      * @return void
      */
-    public function initialize(array &$flashes)
+    public function initialize(array &$flashes): void
     {
         $this->flashes = &$flashes;
@@ -61,5 +61,5 @@ class AutoExpireFlashBag implements FlashBagInterface
      * @return void
      */
-    public function add(string $type, mixed $message)
+    public function add(string $type, mixed $message): void
     {
         $this->flashes['new'][$type][] = $message;
@@ -103,5 +103,5 @@ class AutoExpireFlashBag implements FlashBagInterface
      * @return void
      */
-    public function setAll(array $messages)
+    public function setAll(array $messages): void
     {
         $this->flashes['new'] = $messages;
@@ -111,5 +111,5 @@ class AutoExpireFlashBag implements FlashBagInterface
      * @return void
      */
-    public function set(string $type, string|array $messages)
+    public function set(string $type, string|array $messages): void
     {
         $this->flashes['new'][$type] = (array) $messages;
diff --git a/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php b/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php
index 659d59d186..3da6888cec 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php
@@ -39,5 +39,5 @@ class FlashBag implements FlashBagInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -47,5 +47,5 @@ class FlashBag implements FlashBagInterface
      * @return void
      */
-    public function initialize(array &$flashes)
+    public function initialize(array &$flashes): void
     {
         $this->flashes = &$flashes;
@@ -55,5 +55,5 @@ class FlashBag implements FlashBagInterface
      * @return void
      */
-    public function add(string $type, mixed $message)
+    public function add(string $type, mixed $message): void
     {
         $this->flashes[$type][] = $message;
@@ -94,5 +94,5 @@ class FlashBag implements FlashBagInterface
      * @return void
      */
-    public function set(string $type, string|array $messages)
+    public function set(string $type, string|array $messages): void
     {
         $this->flashes[$type] = (array) $messages;
@@ -102,5 +102,5 @@ class FlashBag implements FlashBagInterface
      * @return void
      */
-    public function setAll(array $messages)
+    public function setAll(array $messages): void
     {
         $this->flashes = $messages;
diff --git a/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBagInterface.php b/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBagInterface.php
index bbcf7f8b7d..6ef5b35e7d 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBagInterface.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBagInterface.php
@@ -26,5 +26,5 @@ interface FlashBagInterface extends SessionBagInterface
      * @return void
      */
-    public function add(string $type, mixed $message);
+    public function add(string $type, mixed $message): void;
 
     /**
@@ -33,5 +33,5 @@ interface FlashBagInterface extends SessionBagInterface
      * @return void
      */
-    public function set(string $type, string|array $messages);
+    public function set(string $type, string|array $messages): void;
 
     /**
@@ -65,5 +65,5 @@ interface FlashBagInterface extends SessionBagInterface
      * @return void
      */
-    public function setAll(array $messages);
+    public function setAll(array $messages): void;
 
     /**
diff --git a/src/Symfony/Component/HttpFoundation/Session/Session.php b/src/Symfony/Component/HttpFoundation/Session/Session.php
index b45be2f8c3..ce73fdb85f 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Session.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Session.php
@@ -73,5 +73,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function set(string $name, mixed $value)
+    public function set(string $name, mixed $value): void
     {
         $this->getAttributeBag()->set($name, $value);
@@ -86,5 +86,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function replace(array $attributes)
+    public function replace(array $attributes): void
     {
         $this->getAttributeBag()->replace($attributes);
@@ -99,5 +99,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $this->getAttributeBag()->clear();
@@ -167,5 +167,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function save()
+    public function save(): void
     {
         $this->storage->save();
@@ -180,5 +180,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function setId(string $id)
+    public function setId(string $id): void
     {
         if ($this->storage->getId() !== $id) {
@@ -195,5 +195,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->storage->setName($name);
@@ -213,5 +213,5 @@ class Session implements FlashBagAwareSessionInterface, \IteratorAggregate, \Cou
      * @return void
      */
-    public function registerBag(SessionBagInterface $bag)
+    public function registerBag(SessionBagInterface $bag): void
     {
         $this->storage->registerBag(new SessionBagProxy($bag, $this->data, $this->usageIndex, $this->usageReporter));
diff --git a/src/Symfony/Component/HttpFoundation/Session/SessionBagInterface.php b/src/Symfony/Component/HttpFoundation/Session/SessionBagInterface.php
index e1c2505549..d88b64acdd 100644
--- a/src/Symfony/Component/HttpFoundation/Session/SessionBagInterface.php
+++ b/src/Symfony/Component/HttpFoundation/Session/SessionBagInterface.php
@@ -29,5 +29,5 @@ interface SessionBagInterface
      * @return void
      */
-    public function initialize(array &$array);
+    public function initialize(array &$array): void;
 
     /**
diff --git a/src/Symfony/Component/HttpFoundation/Session/SessionInterface.php b/src/Symfony/Component/HttpFoundation/Session/SessionInterface.php
index 534883d2d2..1240e36f74 100644
--- a/src/Symfony/Component/HttpFoundation/Session/SessionInterface.php
+++ b/src/Symfony/Component/HttpFoundation/Session/SessionInterface.php
@@ -38,5 +38,5 @@ interface SessionInterface
      * @return void
      */
-    public function setId(string $id);
+    public function setId(string $id): void;
 
     /**
@@ -50,5 +50,5 @@ interface SessionInterface
      * @return void
      */
-    public function setName(string $name);
+    public function setName(string $name): void;
 
     /**
@@ -86,5 +86,5 @@ interface SessionInterface
      * @return void
      */
-    public function save();
+    public function save(): void;
 
     /**
@@ -103,5 +103,5 @@ interface SessionInterface
      * @return void
      */
-    public function set(string $name, mixed $value);
+    public function set(string $name, mixed $value): void;
 
     /**
@@ -115,5 +115,5 @@ interface SessionInterface
      * @return void
      */
-    public function replace(array $attributes);
+    public function replace(array $attributes): void;
 
     /**
@@ -129,5 +129,5 @@ interface SessionInterface
      * @return void
      */
-    public function clear();
+    public function clear(): void;
 
     /**
@@ -141,5 +141,5 @@ interface SessionInterface
      * @return void
      */
-    public function registerBag(SessionBagInterface $bag);
+    public function registerBag(SessionBagInterface $bag): void;
 
     /**
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php b/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php
index 65452a5207..ce0357e36b 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php
@@ -242,5 +242,5 @@ class PdoSessionHandler extends AbstractSessionHandler
      * @throws \DomainException When an unsupported PDO driver is used
      */
-    public function createTable()
+    public function createTable(): void
     {
         // connect if we are not yet
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php b/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php
index ebe4b748ad..059a6b5ac8 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php
@@ -55,5 +55,5 @@ class MetadataBag implements SessionBagInterface
      * @return void
      */
-    public function initialize(array &$array)
+    public function initialize(array &$array): void
     {
         $this->meta = &$array;
@@ -89,5 +89,5 @@ class MetadataBag implements SessionBagInterface
      * @return void
      */
-    public function stampNew(int $lifetime = null)
+    public function stampNew(int $lifetime = null): void
     {
         $this->stampCreated($lifetime);
@@ -135,5 +135,5 @@ class MetadataBag implements SessionBagInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/MockArraySessionStorage.php b/src/Symfony/Component/HttpFoundation/Session/Storage/MockArraySessionStorage.php
index d30b56d691..0f002902bd 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/MockArraySessionStorage.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/MockArraySessionStorage.php
@@ -72,5 +72,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setSessionData(array $array)
+    public function setSessionData(array $array): void
     {
         $this->data = $array;
@@ -112,5 +112,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setId(string $id)
+    public function setId(string $id): void
     {
         if ($this->started) {
@@ -129,5 +129,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -137,5 +137,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function save()
+    public function save(): void
     {
         if (!$this->started || $this->closed) {
@@ -150,5 +150,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         // clear out the bags
@@ -167,5 +167,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function registerBag(SessionBagInterface $bag)
+    public function registerBag(SessionBagInterface $bag): void
     {
         $this->bags[$bag->getName()] = $bag;
@@ -193,5 +193,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setMetadataBag(MetadataBag $bag = null)
+    public function setMetadataBag(MetadataBag $bag = null): void
     {
         if (1 > \func_num_args()) {
@@ -223,5 +223,5 @@ class MockArraySessionStorage implements SessionStorageInterface
      * @return void
      */
-    protected function loadSession()
+    protected function loadSession(): void
     {
         $bags = array_merge($this->bags, [$this->metadataBag]);
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php b/src/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php
index 95f69f2e13..971b890f0f 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/MockFileSessionStorage.php
@@ -77,5 +77,5 @@ class MockFileSessionStorage extends MockArraySessionStorage
      * @return void
      */
-    public function save()
+    public function save(): void
     {
         if (!$this->started) {
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php b/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php
index 7c6b6f9296..0b63abb810 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php
@@ -187,5 +187,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setId(string $id)
+    public function setId(string $id): void
     {
         $this->saveHandler->setId($id);
@@ -200,5 +200,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->saveHandler->setName($name);
@@ -232,5 +232,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function save()
+    public function save(): void
     {
         // Store a copy so we can restore the bags in case the session was not left empty
@@ -274,5 +274,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         // clear out the bags
@@ -291,5 +291,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function registerBag(SessionBagInterface $bag)
+    public function registerBag(SessionBagInterface $bag): void
     {
         if ($this->started) {
@@ -318,5 +318,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setMetadataBag(MetadataBag $metaBag = null)
+    public function setMetadataBag(MetadataBag $metaBag = null): void
     {
         if (1 > \func_num_args()) {
@@ -351,5 +351,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         if (headers_sent() || \PHP_SESSION_ACTIVE === session_status()) {
@@ -397,5 +397,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @throws \InvalidArgumentException
      */
-    public function setSaveHandler(AbstractProxy|\SessionHandlerInterface $saveHandler = null)
+    public function setSaveHandler(AbstractProxy|\SessionHandlerInterface $saveHandler = null): void
     {
         if (1 > \func_num_args()) {
@@ -430,5 +430,5 @@ class NativeSessionStorage implements SessionStorageInterface
      * @return void
      */
-    protected function loadSession(array &$session = null)
+    protected function loadSession(array &$session = null): void
     {
         if (null === $session) {
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/PhpBridgeSessionStorage.php b/src/Symfony/Component/HttpFoundation/Session/Storage/PhpBridgeSessionStorage.php
index 28cb3c3d05..fc5452c5b0 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/PhpBridgeSessionStorage.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/PhpBridgeSessionStorage.php
@@ -45,5 +45,5 @@ class PhpBridgeSessionStorage extends NativeSessionStorage
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         // clear out the bags and nothing else that may be set
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php b/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php
index 2fcd06b10b..4981f75360 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php
@@ -76,5 +76,5 @@ abstract class AbstractProxy
      * @throws \LogicException
      */
-    public function setId(string $id)
+    public function setId(string $id): void
     {
         if ($this->isActive()) {
@@ -100,5 +100,5 @@ abstract class AbstractProxy
      * @throws \LogicException
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         if ($this->isActive()) {
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/SessionStorageInterface.php b/src/Symfony/Component/HttpFoundation/Session/Storage/SessionStorageInterface.php
index ed2189e4e7..28e90cdcf9 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/SessionStorageInterface.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/SessionStorageInterface.php
@@ -44,5 +44,5 @@ interface SessionStorageInterface
      * @return void
      */
-    public function setId(string $id);
+    public function setId(string $id): void;
 
     /**
@@ -56,5 +56,5 @@ interface SessionStorageInterface
      * @return void
      */
-    public function setName(string $name);
+    public function setName(string $name): void;
 
     /**
@@ -100,5 +100,5 @@ interface SessionStorageInterface
      *                           is already closed
      */
-    public function save();
+    public function save(): void;
 
     /**
@@ -107,5 +107,5 @@ interface SessionStorageInterface
      * @return void
      */
-    public function clear();
+    public function clear(): void;
 
     /**
@@ -121,5 +121,5 @@ interface SessionStorageInterface
      * @return void
      */
-    public function registerBag(SessionBagInterface $bag);
+    public function registerBag(SessionBagInterface $bag): void;
 
     public function getMetadataBag(): MetadataBag;
diff --git a/src/Symfony/Component/HttpKernel/Bundle/Bundle.php b/src/Symfony/Component/HttpKernel/Bundle/Bundle.php
index 2ddf55f2cb..52049a92b4 100644
--- a/src/Symfony/Component/HttpKernel/Bundle/Bundle.php
+++ b/src/Symfony/Component/HttpKernel/Bundle/Bundle.php
@@ -35,5 +35,5 @@ abstract class Bundle implements BundleInterface
      * @return void
      */
-    public function boot()
+    public function boot(): void
     {
     }
@@ -42,5 +42,5 @@ abstract class Bundle implements BundleInterface
      * @return void
      */
-    public function shutdown()
+    public function shutdown(): void
     {
     }
@@ -52,5 +52,5 @@ abstract class Bundle implements BundleInterface
      * @return void
      */
-    public function build(ContainerBuilder $container)
+    public function build(ContainerBuilder $container): void
     {
     }
@@ -122,5 +122,5 @@ abstract class Bundle implements BundleInterface
      * @return void
      */
-    public function registerCommands(Application $application)
+    public function registerCommands(Application $application): void
     {
     }
diff --git a/src/Symfony/Component/HttpKernel/Bundle/BundleInterface.php b/src/Symfony/Component/HttpKernel/Bundle/BundleInterface.php
index 02cb9641db..abe408eb24 100644
--- a/src/Symfony/Component/HttpKernel/Bundle/BundleInterface.php
+++ b/src/Symfony/Component/HttpKernel/Bundle/BundleInterface.php
@@ -28,5 +28,5 @@ interface BundleInterface extends ContainerAwareInterface
      * @return void
      */
-    public function boot();
+    public function boot(): void;
 
     /**
@@ -35,5 +35,5 @@ interface BundleInterface extends ContainerAwareInterface
      * @return void
      */
-    public function shutdown();
+    public function shutdown(): void;
 
     /**
@@ -44,5 +44,5 @@ interface BundleInterface extends ContainerAwareInterface
      * @return void
      */
-    public function build(ContainerBuilder $container);
+    public function build(ContainerBuilder $container): void;
 
     /**
diff --git a/src/Symfony/Component/HttpKernel/CacheClearer/CacheClearerInterface.php b/src/Symfony/Component/HttpKernel/CacheClearer/CacheClearerInterface.php
index 5ca4265624..1cb3611f8d 100644
--- a/src/Symfony/Component/HttpKernel/CacheClearer/CacheClearerInterface.php
+++ b/src/Symfony/Component/HttpKernel/CacheClearer/CacheClearerInterface.php
@@ -24,4 +24,4 @@ interface CacheClearerInterface
      * @return void
      */
-    public function clear(string $cacheDir);
+    public function clear(string $cacheDir): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/CacheClearer/Psr6CacheClearer.php b/src/Symfony/Component/HttpKernel/CacheClearer/Psr6CacheClearer.php
index 3c99b74af3..fdb68feb2c 100644
--- a/src/Symfony/Component/HttpKernel/CacheClearer/Psr6CacheClearer.php
+++ b/src/Symfony/Component/HttpKernel/CacheClearer/Psr6CacheClearer.php
@@ -61,5 +61,5 @@ class Psr6CacheClearer implements CacheClearerInterface
      * @return void
      */
-    public function clear(string $cacheDir)
+    public function clear(string $cacheDir): void
     {
         foreach ($this->pools as $pool) {
diff --git a/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmer.php b/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmer.php
index f940ba4a72..5178dc96bb 100644
--- a/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmer.php
+++ b/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmer.php
@@ -22,5 +22,5 @@ abstract class CacheWarmer implements CacheWarmerInterface
      * @return void
      */
-    protected function writeCacheFile(string $file, $content)
+    protected function writeCacheFile(string $file, $content): void
     {
         $tmpFile = @tempnam(\dirname($file), basename($file));
diff --git a/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmerInterface.php b/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmerInterface.php
index 1f1740b7e2..22dc8ea26a 100644
--- a/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmerInterface.php
+++ b/src/Symfony/Component/HttpKernel/CacheWarmer/CacheWarmerInterface.php
@@ -29,4 +29,4 @@ interface CacheWarmerInterface extends WarmableInterface
      * @return bool
      */
-    public function isOptional();
+    public function isOptional(): bool;
 }
diff --git a/src/Symfony/Component/HttpKernel/CacheWarmer/WarmableInterface.php b/src/Symfony/Component/HttpKernel/CacheWarmer/WarmableInterface.php
index 2f442cb536..d98909cfae 100644
--- a/src/Symfony/Component/HttpKernel/CacheWarmer/WarmableInterface.php
+++ b/src/Symfony/Component/HttpKernel/CacheWarmer/WarmableInterface.php
@@ -24,4 +24,4 @@ interface WarmableInterface
      * @return string[] A list of classes or files to preload on PHP 7.4+
      */
-    public function warmUp(string $cacheDir);
+    public function warmUp(string $cacheDir): array;
 }
diff --git a/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php b/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php
index 698ed31397..c5a3eea409 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php
@@ -59,5 +59,5 @@ abstract class DataCollector implements DataCollectorInterface
      * @return callable[] The casters to add to the cloner
      */
-    protected function getCasters()
+    protected function getCasters(): array
     {
         $casters = [
diff --git a/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php b/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php
index 8df94ccb8f..42288d8a02 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/DataCollectorInterface.php
@@ -28,5 +28,5 @@ interface DataCollectorInterface extends ResetInterface
      * @return void
      */
-    public function collect(Request $request, Response $response, \Throwable $exception = null);
+    public function collect(Request $request, Response $response, \Throwable $exception = null): void;
 
     /**
@@ -35,4 +35,4 @@ interface DataCollectorInterface extends ResetInterface
      * @return string
      */
-    public function getName();
+    public function getName(): string;
 }
diff --git a/src/Symfony/Component/HttpKernel/DataCollector/LateDataCollectorInterface.php b/src/Symfony/Component/HttpKernel/DataCollector/LateDataCollectorInterface.php
index efa1a4f737..752eb19faf 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/LateDataCollectorInterface.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/LateDataCollectorInterface.php
@@ -24,4 +24,4 @@ interface LateDataCollectorInterface
      * @return void
      */
-    public function lateCollect();
+    public function lateCollect(): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php b/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php
index 094683ccce..5582af522e 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php
@@ -199,5 +199,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestRequest()
+    public function getRequestRequest(): ParameterBag
     {
         return new ParameterBag($this->data['request_request']->getValue());
@@ -207,5 +207,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestQuery()
+    public function getRequestQuery(): ParameterBag
     {
         return new ParameterBag($this->data['request_query']->getValue());
@@ -215,5 +215,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestFiles()
+    public function getRequestFiles(): ParameterBag
     {
         return new ParameterBag($this->data['request_files']->getValue());
@@ -223,5 +223,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestHeaders()
+    public function getRequestHeaders(): ParameterBag
     {
         return new ParameterBag($this->data['request_headers']->getValue());
@@ -231,5 +231,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestServer(bool $raw = false)
+    public function getRequestServer(bool $raw = false): ParameterBag
     {
         return new ParameterBag($this->data['request_server']->getValue($raw));
@@ -239,5 +239,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestCookies(bool $raw = false)
+    public function getRequestCookies(bool $raw = false): ParameterBag
     {
         return new ParameterBag($this->data['request_cookies']->getValue($raw));
@@ -247,5 +247,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getRequestAttributes()
+    public function getRequestAttributes(): ParameterBag
     {
         return new ParameterBag($this->data['request_attributes']->getValue());
@@ -255,5 +255,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getResponseHeaders()
+    public function getResponseHeaders(): ParameterBag
     {
         return new ParameterBag($this->data['response_headers']->getValue());
@@ -263,5 +263,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getResponseCookies()
+    public function getResponseCookies(): ParameterBag
     {
         return new ParameterBag($this->data['response_cookies']->getValue());
@@ -301,5 +301,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return bool
      */
-    public function isJsonRequest()
+    public function isJsonRequest(): bool
     {
         return 1 === preg_match('{^application/(?:\w+\++)*json$}i', $this->data['request_headers']['content-type']);
@@ -309,5 +309,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return string|null
      */
-    public function getPrettyJson()
+    public function getPrettyJson(): ?string
     {
         $decoded = json_decode($this->getContent());
@@ -344,5 +344,5 @@ class RequestDataCollector extends DataCollector implements EventSubscriberInter
      * @return ParameterBag
      */
-    public function getDotenvVars()
+    public function getDotenvVars(): ParameterBag
     {
         return new ParameterBag($this->data['dotenv_vars']->getValue());
diff --git a/src/Symfony/Component/HttpKernel/DataCollector/RouterDataCollector.php b/src/Symfony/Component/HttpKernel/DataCollector/RouterDataCollector.php
index 444138da70..42a3c28b5f 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/RouterDataCollector.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/RouterDataCollector.php
@@ -52,5 +52,5 @@ class RouterDataCollector extends DataCollector
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->controllers = new \SplObjectStorage();
@@ -66,5 +66,5 @@ class RouterDataCollector extends DataCollector
      * @return string
      */
-    protected function guessRoute(Request $request, string|object|array $controller)
+    protected function guessRoute(Request $request, string|object|array $controller): string
     {
         return 'n/a';
@@ -76,5 +76,5 @@ class RouterDataCollector extends DataCollector
      * @return void
      */
-    public function onKernelController(ControllerEvent $event)
+    public function onKernelController(ControllerEvent $event): void
     {
         $this->controllers[$event->getRequest()] = $event->getController();
diff --git a/src/Symfony/Component/HttpKernel/Debug/FileLinkFormatter.php b/src/Symfony/Component/HttpKernel/Debug/FileLinkFormatter.php
index fcb100859f..8bf3ef09d5 100644
--- a/src/Symfony/Component/HttpKernel/Debug/FileLinkFormatter.php
+++ b/src/Symfony/Component/HttpKernel/Debug/FileLinkFormatter.php
@@ -53,5 +53,5 @@ class FileLinkFormatter
      * @return string|false
      */
-    public function format(string $file, int $line): string|bool
+    public function format(string $file, int $line): string|false
     {
         if ($fmt = $this->getFileLinkFormat()) {
diff --git a/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php b/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php
index 4f6c34bc74..c84198c912 100644
--- a/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php
+++ b/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php
@@ -27,5 +27,5 @@ class TraceableEventDispatcher extends BaseTraceableEventDispatcher
      * @return void
      */
-    protected function beforeDispatch(string $eventName, object $event)
+    protected function beforeDispatch(string $eventName, object $event): void
     {
         switch ($eventName) {
@@ -62,5 +62,5 @@ class TraceableEventDispatcher extends BaseTraceableEventDispatcher
      * @return void
      */
-    protected function afterDispatch(string $eventName, object $event)
+    protected function afterDispatch(string $eventName, object $event): void
     {
         switch ($eventName) {
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/AddAnnotatedClassesToCachePass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/AddAnnotatedClassesToCachePass.php
index 1924b1ddb0..62c58c8e8b 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/AddAnnotatedClassesToCachePass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/AddAnnotatedClassesToCachePass.php
@@ -35,5 +35,5 @@ class AddAnnotatedClassesToCachePass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $annotatedClasses = [];
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/ConfigurableExtension.php b/src/Symfony/Component/HttpKernel/DependencyInjection/ConfigurableExtension.php
index 12d468cf04..2ca89c128e 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/ConfigurableExtension.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/ConfigurableExtension.php
@@ -38,4 +38,4 @@ abstract class ConfigurableExtension extends Extension
      * @return void
      */
-    abstract protected function loadInternal(array $mergedConfig, ContainerBuilder $container);
+    abstract protected function loadInternal(array $mergedConfig, ContainerBuilder $container): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/ControllerArgumentValueResolverPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/ControllerArgumentValueResolverPass.php
index d3b157418e..8bddae02da 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/ControllerArgumentValueResolverPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/ControllerArgumentValueResolverPass.php
@@ -34,5 +34,5 @@ class ControllerArgumentValueResolverPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('argument_resolver')) {
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/Extension.php b/src/Symfony/Component/HttpKernel/DependencyInjection/Extension.php
index d72efa1724..ea38e4d301 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/Extension.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/Extension.php
@@ -38,5 +38,5 @@ abstract class Extension extends BaseExtension
      * @return void
      */
-    public function addAnnotatedClassesToCompile(array $annotatedClasses)
+    public function addAnnotatedClassesToCompile(array $annotatedClasses): void
     {
         $this->annotatedClasses = array_merge($this->annotatedClasses, $annotatedClasses);
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/FragmentRendererPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/FragmentRendererPass.php
index f41d58b81b..cb2b5c484c 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/FragmentRendererPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/FragmentRendererPass.php
@@ -29,5 +29,5 @@ class FragmentRendererPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('fragment.handler')) {
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/LoggerPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/LoggerPass.php
index 2b6cb00793..6bf9e49796 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/LoggerPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/LoggerPass.php
@@ -29,5 +29,5 @@ class LoggerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $container->setAlias(LoggerInterface::class, 'logger')
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/MergeExtensionConfigurationPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/MergeExtensionConfigurationPass.php
index cec23e1970..946d9f6802 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/MergeExtensionConfigurationPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/MergeExtensionConfigurationPass.php
@@ -35,5 +35,5 @@ class MergeExtensionConfigurationPass extends BaseMergeExtensionConfigurationPas
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         foreach ($this->extensions as $extension) {
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterControllerArgumentLocatorsPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterControllerArgumentLocatorsPass.php
index d0e05340d8..18b5beb201 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterControllerArgumentLocatorsPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterControllerArgumentLocatorsPass.php
@@ -37,5 +37,5 @@ class RegisterControllerArgumentLocatorsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('argument_resolver.service') && !$container->hasDefinition('argument_resolver.not_tagged_controller')) {
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterLocaleAwareServicesPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterLocaleAwareServicesPass.php
index 2a01365bd3..d321073903 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterLocaleAwareServicesPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/RegisterLocaleAwareServicesPass.php
@@ -27,5 +27,5 @@ class RegisterLocaleAwareServicesPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('locale_aware_listener')) {
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/RemoveEmptyControllerArgumentLocatorsPass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/RemoveEmptyControllerArgumentLocatorsPass.php
index 7a21fe0e59..1a87f4f7e5 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/RemoveEmptyControllerArgumentLocatorsPass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/RemoveEmptyControllerArgumentLocatorsPass.php
@@ -25,5 +25,5 @@ class RemoveEmptyControllerArgumentLocatorsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $controllerLocator = $container->findDefinition('argument_resolver.controller_locator');
diff --git a/src/Symfony/Component/HttpKernel/DependencyInjection/ResettableServicePass.php b/src/Symfony/Component/HttpKernel/DependencyInjection/ResettableServicePass.php
index da9f8d6320..cfef739f87 100644
--- a/src/Symfony/Component/HttpKernel/DependencyInjection/ResettableServicePass.php
+++ b/src/Symfony/Component/HttpKernel/DependencyInjection/ResettableServicePass.php
@@ -27,5 +27,5 @@ class ResettableServicePass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->has('services_resetter')) {
diff --git a/src/Symfony/Component/HttpKernel/Event/RequestEvent.php b/src/Symfony/Component/HttpKernel/Event/RequestEvent.php
index b81a79b780..e05ed715e2 100644
--- a/src/Symfony/Component/HttpKernel/Event/RequestEvent.php
+++ b/src/Symfony/Component/HttpKernel/Event/RequestEvent.php
@@ -40,5 +40,5 @@ class RequestEvent extends KernelEvent
      * @return void
      */
-    public function setResponse(Response $response)
+    public function setResponse(Response $response): void
     {
         $this->response = $response;
diff --git a/src/Symfony/Component/HttpKernel/EventListener/CacheAttributeListener.php b/src/Symfony/Component/HttpKernel/EventListener/CacheAttributeListener.php
index 723e758cd0..f3a5618e3d 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/CacheAttributeListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/CacheAttributeListener.php
@@ -50,5 +50,5 @@ class CacheAttributeListener implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelControllerArguments(ControllerArgumentsEvent $event)
+    public function onKernelControllerArguments(ControllerArgumentsEvent $event): void
     {
         $request = $event->getRequest();
@@ -96,5 +96,5 @@ class CacheAttributeListener implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelResponse(ResponseEvent $event)
+    public function onKernelResponse(ResponseEvent $event): void
     {
         $request = $event->getRequest();
diff --git a/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php b/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php
index b10bd37f43..e3a50b3852 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php
@@ -40,5 +40,5 @@ class DumpListener implements EventSubscriberInterface
      * @return void
      */
-    public function configure()
+    public function configure(): void
     {
         $cloner = $this->cloner;
diff --git a/src/Symfony/Component/HttpKernel/EventListener/ErrorListener.php b/src/Symfony/Component/HttpKernel/EventListener/ErrorListener.php
index cc6936cfda..c4a74bdd93 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/ErrorListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/ErrorListener.php
@@ -55,5 +55,5 @@ class ErrorListener implements EventSubscriberInterface
      * @return void
      */
-    public function logKernelException(ExceptionEvent $event)
+    public function logKernelException(ExceptionEvent $event): void
     {
         $throwable = $event->getThrowable();
@@ -96,5 +96,5 @@ class ErrorListener implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelException(ExceptionEvent $event)
+    public function onKernelException(ExceptionEvent $event): void
     {
         if (null === $this->controller) {
@@ -142,5 +142,5 @@ class ErrorListener implements EventSubscriberInterface
      * @return void
      */
-    public function onControllerArguments(ControllerArgumentsEvent $event)
+    public function onControllerArguments(ControllerArgumentsEvent $event): void
     {
         $e = $event->getRequest()->attributes->get('exception');
diff --git a/src/Symfony/Component/HttpKernel/Exception/HttpException.php b/src/Symfony/Component/HttpKernel/Exception/HttpException.php
index e12abce004..3354a5aebf 100644
--- a/src/Symfony/Component/HttpKernel/Exception/HttpException.php
+++ b/src/Symfony/Component/HttpKernel/Exception/HttpException.php
@@ -43,5 +43,5 @@ class HttpException extends \RuntimeException implements HttpExceptionInterface
      * @return void
      */
-    public function setHeaders(array $headers)
+    public function setHeaders(array $headers): void
     {
         $this->headers = $headers;
diff --git a/src/Symfony/Component/HttpKernel/Fragment/FragmentHandler.php b/src/Symfony/Component/HttpKernel/Fragment/FragmentHandler.php
index 62b21e6d4e..67984f7e75 100644
--- a/src/Symfony/Component/HttpKernel/Fragment/FragmentHandler.php
+++ b/src/Symfony/Component/HttpKernel/Fragment/FragmentHandler.php
@@ -52,5 +52,5 @@ class FragmentHandler
      * @return void
      */
-    public function addRenderer(FragmentRendererInterface $renderer)
+    public function addRenderer(FragmentRendererInterface $renderer): void
     {
         $this->renderers[$renderer->getName()] = $renderer;
diff --git a/src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php b/src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php
index d563182f96..2a041ab414 100644
--- a/src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php
+++ b/src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php
@@ -107,5 +107,5 @@ class InlineFragmentRenderer extends RoutableFragmentRenderer
      * @return Request
      */
-    protected function createSubRequest(string $uri, Request $request)
+    protected function createSubRequest(string $uri, Request $request): Request
     {
         $cookies = $request->cookies->all();
diff --git a/src/Symfony/Component/HttpKernel/Fragment/RoutableFragmentRenderer.php b/src/Symfony/Component/HttpKernel/Fragment/RoutableFragmentRenderer.php
index 47027233a7..2be5cfc7de 100644
--- a/src/Symfony/Component/HttpKernel/Fragment/RoutableFragmentRenderer.php
+++ b/src/Symfony/Component/HttpKernel/Fragment/RoutableFragmentRenderer.php
@@ -35,5 +35,5 @@ abstract class RoutableFragmentRenderer implements FragmentRendererInterface
      * @return void
      */
-    public function setFragmentPath(string $path)
+    public function setFragmentPath(string $path): void
     {
         $this->fragmentPath = $path;
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/AbstractSurrogate.php b/src/Symfony/Component/HttpKernel/HttpCache/AbstractSurrogate.php
index 95518bed2b..2f7d5ee3b5 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/AbstractSurrogate.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/AbstractSurrogate.php
@@ -63,5 +63,5 @@ abstract class AbstractSurrogate implements SurrogateInterface
      * @return void
      */
-    public function addSurrogateCapability(Request $request)
+    public function addSurrogateCapability(Request $request): void
     {
         $current = $request->headers->get('Surrogate-Capability');
@@ -112,5 +112,5 @@ abstract class AbstractSurrogate implements SurrogateInterface
      * @return void
      */
-    protected function removeFromControl(Response $response)
+    protected function removeFromControl(Response $response): void
     {
         if (!$response->headers->has('Surrogate-Control')) {
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/Esi.php b/src/Symfony/Component/HttpKernel/HttpCache/Esi.php
index 5db840a802..c16398a8ea 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/Esi.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/Esi.php
@@ -36,5 +36,5 @@ class Esi extends AbstractSurrogate
      * @return void
      */
-    public function addSurrogateControl(Response $response)
+    public function addSurrogateControl(Response $response): void
     {
         if (str_contains($response->getContent(), '<esi:include')) {
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php b/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php
index eabacfec62..d882807f38 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php
@@ -246,5 +246,5 @@ class HttpCache implements HttpKernelInterface, TerminableInterface
      * @return void
      */
-    public function terminate(Request $request, Response $response)
+    public function terminate(Request $request, Response $response): void
     {
         // Do not call any listeners in case of a cache hit.
@@ -466,5 +466,5 @@ class HttpCache implements HttpKernelInterface, TerminableInterface
      * @return Response
      */
-    protected function forward(Request $request, bool $catch = false, Response $entry = null)
+    protected function forward(Request $request, bool $catch = false, Response $entry = null): Response
     {
         $this->surrogate?->addSurrogateCapability($request);
@@ -600,5 +600,5 @@ class HttpCache implements HttpKernelInterface, TerminableInterface
      * @throws \Exception
      */
-    protected function store(Request $request, Response $response)
+    protected function store(Request $request, Response $response): void
     {
         try {
@@ -678,5 +678,5 @@ class HttpCache implements HttpKernelInterface, TerminableInterface
      * @return void
      */
-    protected function processResponseBody(Request $request, Response $response)
+    protected function processResponseBody(Request $request, Response $response): void
     {
         if ($this->surrogate?->needsParsing($response)) {
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategy.php b/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategy.php
index 57b5d21961..6ec129beb9 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategy.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategy.php
@@ -58,5 +58,5 @@ class ResponseCacheStrategy implements ResponseCacheStrategyInterface
      * @return void
      */
-    public function add(Response $response)
+    public function add(Response $response): void
     {
         ++$this->embeddedResponses;
@@ -102,5 +102,5 @@ class ResponseCacheStrategy implements ResponseCacheStrategyInterface
      * @return void
      */
-    public function update(Response $response)
+    public function update(Response $response): void
     {
         // if we have no embedded Response, do nothing
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategyInterface.php b/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategyInterface.php
index 33c8bd9412..8fe6df2512 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategyInterface.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/ResponseCacheStrategyInterface.php
@@ -31,5 +31,5 @@ interface ResponseCacheStrategyInterface
      * @return void
      */
-    public function add(Response $response);
+    public function add(Response $response): void;
 
     /**
@@ -38,4 +38,4 @@ interface ResponseCacheStrategyInterface
      * @return void
      */
-    public function update(Response $response);
+    public function update(Response $response): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/Ssi.php b/src/Symfony/Component/HttpKernel/HttpCache/Ssi.php
index b17c90ac60..86008d6933 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/Ssi.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/Ssi.php
@@ -30,5 +30,5 @@ class Ssi extends AbstractSurrogate
      * @return void
      */
-    public function addSurrogateControl(Response $response)
+    public function addSurrogateControl(Response $response): void
     {
         if (str_contains($response->getContent(), '<!--#include')) {
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/Store.php b/src/Symfony/Component/HttpKernel/HttpCache/Store.php
index 3f21e383f4..cb04c3ba4a 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/Store.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/Store.php
@@ -59,5 +59,5 @@ class Store implements StoreInterface
      * @return void
      */
-    public function cleanup()
+    public function cleanup(): void
     {
         // unlock everything
@@ -254,5 +254,5 @@ class Store implements StoreInterface
      * @throws \RuntimeException
      */
-    public function invalidate(Request $request)
+    public function invalidate(Request $request): void
     {
         $modified = false;
@@ -421,5 +421,5 @@ class Store implements StoreInterface
      * @return string
      */
-    public function getPath(string $key)
+    public function getPath(string $key): string
     {
         return $this->root.\DIRECTORY_SEPARATOR.substr($key, 0, 2).\DIRECTORY_SEPARATOR.substr($key, 2, 2).\DIRECTORY_SEPARATOR.substr($key, 4, 2).\DIRECTORY_SEPARATOR.substr($key, 6);
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/StoreInterface.php b/src/Symfony/Component/HttpKernel/HttpCache/StoreInterface.php
index b73cb7a9e6..daecd76c19 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/StoreInterface.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/StoreInterface.php
@@ -45,5 +45,5 @@ interface StoreInterface
      * @return void
      */
-    public function invalidate(Request $request);
+    public function invalidate(Request $request): void;
 
     /**
@@ -80,4 +80,4 @@ interface StoreInterface
      * @return void
      */
-    public function cleanup();
+    public function cleanup(): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/HttpCache/SurrogateInterface.php b/src/Symfony/Component/HttpKernel/HttpCache/SurrogateInterface.php
index e444458f73..058a4023f8 100644
--- a/src/Symfony/Component/HttpKernel/HttpCache/SurrogateInterface.php
+++ b/src/Symfony/Component/HttpKernel/HttpCache/SurrogateInterface.php
@@ -37,5 +37,5 @@ interface SurrogateInterface
      * @return void
      */
-    public function addSurrogateCapability(Request $request);
+    public function addSurrogateCapability(Request $request): void;
 
     /**
@@ -46,5 +46,5 @@ interface SurrogateInterface
      * @return void
      */
-    public function addSurrogateControl(Response $response);
+    public function addSurrogateControl(Response $response): void;
 
     /**
diff --git a/src/Symfony/Component/HttpKernel/HttpKernel.php b/src/Symfony/Component/HttpKernel/HttpKernel.php
index 794a55dc18..1fb8cbaa5d 100644
--- a/src/Symfony/Component/HttpKernel/HttpKernel.php
+++ b/src/Symfony/Component/HttpKernel/HttpKernel.php
@@ -96,5 +96,5 @@ class HttpKernel implements HttpKernelInterface, TerminableInterface
      * @return void
      */
-    public function terminate(Request $request, Response $response)
+    public function terminate(Request $request, Response $response): void
     {
         $this->dispatcher->dispatch(new TerminateEvent($this, $request, $response), KernelEvents::TERMINATE);
diff --git a/src/Symfony/Component/HttpKernel/HttpKernelBrowser.php b/src/Symfony/Component/HttpKernel/HttpKernelBrowser.php
index 0f3630e7fe..ddf77b8a19 100644
--- a/src/Symfony/Component/HttpKernel/HttpKernelBrowser.php
+++ b/src/Symfony/Component/HttpKernel/HttpKernelBrowser.php
@@ -51,5 +51,5 @@ class HttpKernelBrowser extends AbstractBrowser
      * @return void
      */
-    public function catchExceptions(bool $catchExceptions)
+    public function catchExceptions(bool $catchExceptions): void
     {
         $this->catchExceptions = $catchExceptions;
@@ -61,5 +61,5 @@ class HttpKernelBrowser extends AbstractBrowser
      * @return Response
      */
-    protected function doRequest(object $request)
+    protected function doRequest(object $request): Response
     {
         $response = $this->kernel->handle($request, HttpKernelInterface::MAIN_REQUEST, $this->catchExceptions);
@@ -77,5 +77,5 @@ class HttpKernelBrowser extends AbstractBrowser
      * @return string
      */
-    protected function getScript(object $request)
+    protected function getScript(object $request): string
     {
         $kernel = var_export(serialize($this->kernel), true);
@@ -116,5 +116,5 @@ EOF;
      * @return string
      */
-    protected function getHandleScript()
+    protected function getHandleScript(): string
     {
         return <<<'EOF'
diff --git a/src/Symfony/Component/HttpKernel/Kernel.php b/src/Symfony/Component/HttpKernel/Kernel.php
index f9a969b659..e8d115c435 100644
--- a/src/Symfony/Component/HttpKernel/Kernel.php
+++ b/src/Symfony/Component/HttpKernel/Kernel.php
@@ -107,5 +107,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    public function boot()
+    public function boot(): void
     {
         if (true === $this->booted) {
@@ -138,5 +138,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    public function reboot(?string $warmupDir)
+    public function reboot(?string $warmupDir): void
     {
         $this->shutdown();
@@ -148,5 +148,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    public function terminate(Request $request, Response $response)
+    public function terminate(Request $request, Response $response): void
     {
         if (false === $this->booted) {
@@ -162,5 +162,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    public function shutdown()
+    public function shutdown(): void
     {
         if (false === $this->booted) {
@@ -340,5 +340,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @throws \LogicException if two bundles share a common name
      */
-    protected function initializeBundles()
+    protected function initializeBundles(): void
     {
         // init bundles
@@ -360,5 +360,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    protected function build(ContainerBuilder $container)
+    protected function build(ContainerBuilder $container): void
     {
     }
@@ -400,5 +400,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    protected function initializeContainer()
+    protected function initializeContainer(): void
     {
         $class = $this->getContainerClass();
@@ -614,5 +614,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    protected function prepareContainer(ContainerBuilder $container)
+    protected function prepareContainer(ContainerBuilder $container): void
     {
         $extensions = [];
@@ -667,5 +667,5 @@ abstract class Kernel implements KernelInterface, RebootableInterface, Terminabl
      * @return void
      */
-    protected function dumpContainer(ConfigCache $cache, ContainerBuilder $container, string $class, string $baseClass)
+    protected function dumpContainer(ConfigCache $cache, ContainerBuilder $container, string $class, string $baseClass): void
     {
         // cache the container
diff --git a/src/Symfony/Component/HttpKernel/KernelInterface.php b/src/Symfony/Component/HttpKernel/KernelInterface.php
index 14a053ab30..737af1b649 100644
--- a/src/Symfony/Component/HttpKernel/KernelInterface.php
+++ b/src/Symfony/Component/HttpKernel/KernelInterface.php
@@ -37,5 +37,5 @@ interface KernelInterface extends HttpKernelInterface
      * @return void
      */
-    public function registerContainerConfiguration(LoaderInterface $loader);
+    public function registerContainerConfiguration(LoaderInterface $loader): void;
 
     /**
@@ -44,5 +44,5 @@ interface KernelInterface extends HttpKernelInterface
      * @return void
      */
-    public function boot();
+    public function boot(): void;
 
     /**
@@ -53,5 +53,5 @@ interface KernelInterface extends HttpKernelInterface
      * @return void
      */
-    public function shutdown();
+    public function shutdown(): void;
 
     /**
diff --git a/src/Symfony/Component/HttpKernel/Log/DebugLoggerInterface.php b/src/Symfony/Component/HttpKernel/Log/DebugLoggerInterface.php
index 1940c80a90..5f28605ada 100644
--- a/src/Symfony/Component/HttpKernel/Log/DebugLoggerInterface.php
+++ b/src/Symfony/Component/HttpKernel/Log/DebugLoggerInterface.php
@@ -34,5 +34,5 @@ interface DebugLoggerInterface
      * }>
      */
-    public function getLogs(Request $request = null);
+    public function getLogs(Request $request = null): array;
 
     /**
@@ -41,5 +41,5 @@ interface DebugLoggerInterface
      * @return int
      */
-    public function countErrors(Request $request = null);
+    public function countErrors(Request $request = null): int;
 
     /**
@@ -48,4 +48,4 @@ interface DebugLoggerInterface
      * @return void
      */
-    public function clear();
+    public function clear(): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php b/src/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php
index 0fdbfc44ba..67ad8c64c1 100644
--- a/src/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php
+++ b/src/Symfony/Component/HttpKernel/Profiler/FileProfilerStorage.php
@@ -91,5 +91,5 @@ class FileProfilerStorage implements ProfilerStorageInterface
      * @return void
      */
-    public function purge()
+    public function purge(): void
     {
         $flags = \FilesystemIterator::SKIP_DOTS;
@@ -249,5 +249,5 @@ class FileProfilerStorage implements ProfilerStorageInterface
      * @return Profile
      */
-    protected function createProfileFromData(string $token, array $data, Profile $parent = null)
+    protected function createProfileFromData(string $token, array $data, Profile $parent = null): Profile
     {
         $profile = new Profile($token);
diff --git a/src/Symfony/Component/HttpKernel/Profiler/Profile.php b/src/Symfony/Component/HttpKernel/Profiler/Profile.php
index 8de1468ac6..858ef75b57 100644
--- a/src/Symfony/Component/HttpKernel/Profiler/Profile.php
+++ b/src/Symfony/Component/HttpKernel/Profiler/Profile.php
@@ -48,5 +48,5 @@ class Profile
      * @return void
      */
-    public function setToken(string $token)
+    public function setToken(string $token): void
     {
         $this->token = $token;
@@ -66,5 +66,5 @@ class Profile
      * @return void
      */
-    public function setParent(self $parent)
+    public function setParent(self $parent): void
     {
         $this->parent = $parent;
@@ -98,5 +98,5 @@ class Profile
      * @return void
      */
-    public function setIp(?string $ip)
+    public function setIp(?string $ip): void
     {
         $this->ip = $ip;
@@ -114,5 +114,5 @@ class Profile
      * @return void
      */
-    public function setMethod(string $method)
+    public function setMethod(string $method): void
     {
         $this->method = $method;
@@ -130,5 +130,5 @@ class Profile
      * @return void
      */
-    public function setUrl(?string $url)
+    public function setUrl(?string $url): void
     {
         $this->url = $url;
@@ -143,5 +143,5 @@ class Profile
      * @return void
      */
-    public function setTime(int $time)
+    public function setTime(int $time): void
     {
         $this->time = $time;
@@ -151,5 +151,5 @@ class Profile
      * @return void
      */
-    public function setStatusCode(int $statusCode)
+    public function setStatusCode(int $statusCode): void
     {
         $this->statusCode = $statusCode;
@@ -178,5 +178,5 @@ class Profile
      * @return void
      */
-    public function setChildren(array $children)
+    public function setChildren(array $children): void
     {
         $this->children = [];
@@ -191,5 +191,5 @@ class Profile
      * @return void
      */
-    public function addChild(self $child)
+    public function addChild(self $child): void
     {
         $this->children[] = $child;
@@ -239,5 +239,5 @@ class Profile
      * @return void
      */
-    public function setCollectors(array $collectors)
+    public function setCollectors(array $collectors): void
     {
         $this->collectors = [];
@@ -252,5 +252,5 @@ class Profile
      * @return void
      */
-    public function addCollector(DataCollectorInterface $collector)
+    public function addCollector(DataCollectorInterface $collector): void
     {
         $this->collectors[$collector->getName()] = $collector;
diff --git a/src/Symfony/Component/HttpKernel/Profiler/Profiler.php b/src/Symfony/Component/HttpKernel/Profiler/Profiler.php
index 58508e5b48..2c7f3c06da 100644
--- a/src/Symfony/Component/HttpKernel/Profiler/Profiler.php
+++ b/src/Symfony/Component/HttpKernel/Profiler/Profiler.php
@@ -50,5 +50,5 @@ class Profiler implements ResetInterface
      * @return void
      */
-    public function disable()
+    public function disable(): void
     {
         $this->enabled = false;
@@ -60,5 +60,5 @@ class Profiler implements ResetInterface
      * @return void
      */
-    public function enable()
+    public function enable(): void
     {
         $this->enabled = true;
@@ -114,5 +114,5 @@ class Profiler implements ResetInterface
      * @return void
      */
-    public function purge()
+    public function purge(): void
     {
         $this->storage->purge();
@@ -172,5 +172,5 @@ class Profiler implements ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         foreach ($this->collectors as $collector) {
@@ -195,5 +195,5 @@ class Profiler implements ResetInterface
      * @return void
      */
-    public function set(array $collectors = [])
+    public function set(array $collectors = []): void
     {
         $this->collectors = [];
@@ -208,5 +208,5 @@ class Profiler implements ResetInterface
      * @return void
      */
-    public function add(DataCollectorInterface $collector)
+    public function add(DataCollectorInterface $collector): void
     {
         $this->collectors[$collector->getName()] = $collector;
diff --git a/src/Symfony/Component/HttpKernel/Profiler/ProfilerStorageInterface.php b/src/Symfony/Component/HttpKernel/Profiler/ProfilerStorageInterface.php
index 247e51fce9..73d8d4bf43 100644
--- a/src/Symfony/Component/HttpKernel/Profiler/ProfilerStorageInterface.php
+++ b/src/Symfony/Component/HttpKernel/Profiler/ProfilerStorageInterface.php
@@ -53,4 +53,4 @@ interface ProfilerStorageInterface
      * @return void
      */
-    public function purge();
+    public function purge(): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/RebootableInterface.php b/src/Symfony/Component/HttpKernel/RebootableInterface.php
index e973f55400..3d39172b25 100644
--- a/src/Symfony/Component/HttpKernel/RebootableInterface.php
+++ b/src/Symfony/Component/HttpKernel/RebootableInterface.php
@@ -29,4 +29,4 @@ interface RebootableInterface
      * @return void
      */
-    public function reboot(?string $warmupDir);
+    public function reboot(?string $warmupDir): void;
 }
diff --git a/src/Symfony/Component/HttpKernel/TerminableInterface.php b/src/Symfony/Component/HttpKernel/TerminableInterface.php
index 341ef73c4d..805391d171 100644
--- a/src/Symfony/Component/HttpKernel/TerminableInterface.php
+++ b/src/Symfony/Component/HttpKernel/TerminableInterface.php
@@ -31,4 +31,4 @@ interface TerminableInterface
      * @return void
      */
-    public function terminate(Request $request, Response $response);
+    public function terminate(Request $request, Response $response): void;
 }
diff --git a/src/Symfony/Component/Intl/Data/Bundle/Compiler/BundleCompilerInterface.php b/src/Symfony/Component/Intl/Data/Bundle/Compiler/BundleCompilerInterface.php
index db2c6b8bbc..16f0cc14c5 100644
--- a/src/Symfony/Component/Intl/Data/Bundle/Compiler/BundleCompilerInterface.php
+++ b/src/Symfony/Component/Intl/Data/Bundle/Compiler/BundleCompilerInterface.php
@@ -27,4 +27,4 @@ interface BundleCompilerInterface
      * @return void
      */
-    public function compile(string $sourcePath, string $targetDir);
+    public function compile(string $sourcePath, string $targetDir): void;
 }
diff --git a/src/Symfony/Component/Intl/Data/Bundle/Writer/BundleWriterInterface.php b/src/Symfony/Component/Intl/Data/Bundle/Writer/BundleWriterInterface.php
index cb9e76fd09..fc86193476 100644
--- a/src/Symfony/Component/Intl/Data/Bundle/Writer/BundleWriterInterface.php
+++ b/src/Symfony/Component/Intl/Data/Bundle/Writer/BundleWriterInterface.php
@@ -24,4 +24,4 @@ interface BundleWriterInterface
      * @return void
      */
-    public function write(string $path, string $locale, mixed $data);
+    public function write(string $path, string $locale, mixed $data): void;
 }
diff --git a/src/Symfony/Component/Intl/Util/IntlTestHelper.php b/src/Symfony/Component/Intl/Util/IntlTestHelper.php
index d22f2e6953..1dcdcdf4ea 100644
--- a/src/Symfony/Component/Intl/Util/IntlTestHelper.php
+++ b/src/Symfony/Component/Intl/Util/IntlTestHelper.php
@@ -33,5 +33,5 @@ class IntlTestHelper
      * @return void
      */
-    public static function requireIntl(TestCase $testCase, string $minimumIcuVersion = null)
+    public static function requireIntl(TestCase $testCase, string $minimumIcuVersion = null): void
     {
         $minimumIcuVersion ??= Intl::getIcuStubVersion();
@@ -67,5 +67,5 @@ class IntlTestHelper
      * @return void
      */
-    public static function requireFullIntl(TestCase $testCase, string $minimumIcuVersion = null)
+    public static function requireFullIntl(TestCase $testCase, string $minimumIcuVersion = null): void
     {
         // We only run tests if the intl extension is loaded...
@@ -89,5 +89,5 @@ class IntlTestHelper
      * @return void
      */
-    public static function require32Bit(TestCase $testCase)
+    public static function require32Bit(TestCase $testCase): void
     {
         if (4 !== \PHP_INT_SIZE) {
@@ -101,5 +101,5 @@ class IntlTestHelper
      * @return void
      */
-    public static function require64Bit(TestCase $testCase)
+    public static function require64Bit(TestCase $testCase): void
     {
         if (8 !== \PHP_INT_SIZE) {
diff --git a/src/Symfony/Component/Ldap/Adapter/AbstractConnection.php b/src/Symfony/Component/Ldap/Adapter/AbstractConnection.php
index 7c85f09258..369b3fb239 100644
--- a/src/Symfony/Component/Ldap/Adapter/AbstractConnection.php
+++ b/src/Symfony/Component/Ldap/Adapter/AbstractConnection.php
@@ -34,5 +34,5 @@ abstract class AbstractConnection implements ConnectionInterface
      * @return void
      */
-    protected function configureOptions(OptionsResolver $resolver)
+    protected function configureOptions(OptionsResolver $resolver): void
     {
         $resolver->setDefaults([
diff --git a/src/Symfony/Component/Ldap/Adapter/ConnectionInterface.php b/src/Symfony/Component/Ldap/Adapter/ConnectionInterface.php
index 93d13c831d..5701c2ff67 100644
--- a/src/Symfony/Component/Ldap/Adapter/ConnectionInterface.php
+++ b/src/Symfony/Component/Ldap/Adapter/ConnectionInterface.php
@@ -35,4 +35,4 @@ interface ConnectionInterface
      * @return void
      */
-    public function bind(string $dn = null, #[\SensitiveParameter] string $password = null);
+    public function bind(string $dn = null, #[\SensitiveParameter] string $password = null): void;
 }
diff --git a/src/Symfony/Component/Ldap/Adapter/EntryManagerInterface.php b/src/Symfony/Component/Ldap/Adapter/EntryManagerInterface.php
index 9b356b10b2..68942b21dc 100644
--- a/src/Symfony/Component/Ldap/Adapter/EntryManagerInterface.php
+++ b/src/Symfony/Component/Ldap/Adapter/EntryManagerInterface.php
@@ -31,5 +31,5 @@ interface EntryManagerInterface
      * @throws LdapException
      */
-    public function add(Entry $entry);
+    public function add(Entry $entry): static;
 
     /**
@@ -41,5 +41,5 @@ interface EntryManagerInterface
      * @throws LdapException
      */
-    public function update(Entry $entry);
+    public function update(Entry $entry): static;
 
     /**
@@ -51,5 +51,5 @@ interface EntryManagerInterface
      * @throws LdapException
      */
-    public function move(Entry $entry, string $newParent);
+    public function move(Entry $entry, string $newParent): static;
 
     /**
@@ -61,5 +61,5 @@ interface EntryManagerInterface
      * @throws LdapException
      */
-    public function rename(Entry $entry, string $newRdn, bool $removeOldRdn = true);
+    public function rename(Entry $entry, string $newRdn, bool $removeOldRdn = true): static;
 
     /**
@@ -71,4 +71,4 @@ interface EntryManagerInterface
      * @throws LdapException
      */
-    public function remove(Entry $entry);
+    public function remove(Entry $entry): static;
 }
diff --git a/src/Symfony/Component/Ldap/Adapter/ExtLdap/Connection.php b/src/Symfony/Component/Ldap/Adapter/ExtLdap/Connection.php
index 2daa651b7a..95b9e73916 100644
--- a/src/Symfony/Component/Ldap/Adapter/ExtLdap/Connection.php
+++ b/src/Symfony/Component/Ldap/Adapter/ExtLdap/Connection.php
@@ -67,5 +67,5 @@ class Connection extends AbstractConnection
      * @return void
      */
-    public function bind(string $dn = null, #[\SensitiveParameter] string $password = null)
+    public function bind(string $dn = null, #[\SensitiveParameter] string $password = null): void
     {
         if (!$this->connection) {
@@ -102,5 +102,5 @@ class Connection extends AbstractConnection
      * @return void
      */
-    public function setOption(string $name, array|string|int|bool $value)
+    public function setOption(string $name, array|string|int|bool $value): void
     {
         if (!@ldap_set_option($this->connection, ConnectionOptions::getOption($name), $value)) {
@@ -112,5 +112,5 @@ class Connection extends AbstractConnection
      * @return array|string|int|null
      */
-    public function getOption(string $name)
+    public function getOption(string $name): array|string|int|null
     {
         if (!@ldap_get_option($this->connection, ConnectionOptions::getOption($name), $ret)) {
@@ -124,5 +124,5 @@ class Connection extends AbstractConnection
      * @return void
      */
-    protected function configureOptions(OptionsResolver $resolver)
+    protected function configureOptions(OptionsResolver $resolver): void
     {
         parent::configureOptions($resolver);
diff --git a/src/Symfony/Component/Ldap/Adapter/ExtLdap/EntryManager.php b/src/Symfony/Component/Ldap/Adapter/ExtLdap/EntryManager.php
index 20f0922384..4eea54731e 100644
--- a/src/Symfony/Component/Ldap/Adapter/ExtLdap/EntryManager.php
+++ b/src/Symfony/Component/Ldap/Adapter/ExtLdap/EntryManager.php
@@ -35,5 +35,5 @@ class EntryManager implements EntryManagerInterface
      * @return $this
      */
-    public function add(Entry $entry)
+    public function add(Entry $entry): static
     {
         $con = $this->getConnectionResource();
@@ -49,5 +49,5 @@ class EntryManager implements EntryManagerInterface
      * @return $this
      */
-    public function update(Entry $entry)
+    public function update(Entry $entry): static
     {
         $con = $this->getConnectionResource();
@@ -63,5 +63,5 @@ class EntryManager implements EntryManagerInterface
      * @return $this
      */
-    public function remove(Entry $entry)
+    public function remove(Entry $entry): static
     {
         $con = $this->getConnectionResource();
@@ -82,5 +82,5 @@ class EntryManager implements EntryManagerInterface
      * @throws LdapException
      */
-    public function addAttributeValues(Entry $entry, string $attribute, array $values)
+    public function addAttributeValues(Entry $entry, string $attribute, array $values): static
     {
         $con = $this->getConnectionResource();
@@ -101,5 +101,5 @@ class EntryManager implements EntryManagerInterface
      * @throws LdapException
      */
-    public function removeAttributeValues(Entry $entry, string $attribute, array $values)
+    public function removeAttributeValues(Entry $entry, string $attribute, array $values): static
     {
         $con = $this->getConnectionResource();
@@ -115,5 +115,5 @@ class EntryManager implements EntryManagerInterface
      * @return $this
      */
-    public function rename(Entry $entry, string $newRdn, bool $removeOldRdn = true)
+    public function rename(Entry $entry, string $newRdn, bool $removeOldRdn = true): static
     {
         $con = $this->getConnectionResource();
@@ -134,5 +134,5 @@ class EntryManager implements EntryManagerInterface
      * @throws LdapException     if an error is thrown during the rename operation
      */
-    public function move(Entry $entry, string $newParent)
+    public function move(Entry $entry, string $newParent): static
     {
         $con = $this->getConnectionResource();
@@ -168,5 +168,5 @@ class EntryManager implements EntryManagerInterface
      * @throws UpdateOperationException in case of an error
      */
-    public function applyOperations(string $dn, iterable $operations)
+    public function applyOperations(string $dn, iterable $operations): static
     {
         $operationsMapped = [];
diff --git a/src/Symfony/Component/Ldap/Entry.php b/src/Symfony/Component/Ldap/Entry.php
index 0d008d8ecd..96b07b4845 100644
--- a/src/Symfony/Component/Ldap/Entry.php
+++ b/src/Symfony/Component/Ldap/Entry.php
@@ -100,5 +100,5 @@ class Entry
      * @return void
      */
-    public function setAttribute(string $name, array $value)
+    public function setAttribute(string $name, array $value): void
     {
         $this->attributes[$name] = $value;
@@ -111,5 +111,5 @@ class Entry
      * @return void
      */
-    public function removeAttribute(string $name)
+    public function removeAttribute(string $name): void
     {
         unset($this->attributes[$name]);
diff --git a/src/Symfony/Component/Ldap/LdapInterface.php b/src/Symfony/Component/Ldap/LdapInterface.php
index 60628cd74e..49fd392918 100644
--- a/src/Symfony/Component/Ldap/LdapInterface.php
+++ b/src/Symfony/Component/Ldap/LdapInterface.php
@@ -33,5 +33,5 @@ interface LdapInterface
      * @return void
      */
-    public function bind(string $dn = null, #[\SensitiveParameter] string $password = null);
+    public function bind(string $dn = null, #[\SensitiveParameter] string $password = null): void;
 
     /**
diff --git a/src/Symfony/Component/Ldap/Security/CheckLdapCredentialsListener.php b/src/Symfony/Component/Ldap/Security/CheckLdapCredentialsListener.php
index 7e535ebde1..ebb3df9b2b 100644
--- a/src/Symfony/Component/Ldap/Security/CheckLdapCredentialsListener.php
+++ b/src/Symfony/Component/Ldap/Security/CheckLdapCredentialsListener.php
@@ -40,5 +40,5 @@ class CheckLdapCredentialsListener implements EventSubscriberInterface
      * @return void
      */
-    public function onCheckPassport(CheckPassportEvent $event)
+    public function onCheckPassport(CheckPassportEvent $event): void
     {
         $passport = $event->getPassport();
diff --git a/src/Symfony/Component/Lock/BlockingSharedLockStoreInterface.php b/src/Symfony/Component/Lock/BlockingSharedLockStoreInterface.php
index 6929206c42..f2494e1061 100644
--- a/src/Symfony/Component/Lock/BlockingSharedLockStoreInterface.php
+++ b/src/Symfony/Component/Lock/BlockingSharedLockStoreInterface.php
@@ -26,4 +26,4 @@ interface BlockingSharedLockStoreInterface extends SharedLockStoreInterface
      * @throws LockConflictedException
      */
-    public function waitAndSaveRead(Key $key);
+    public function waitAndSaveRead(Key $key): void;
 }
diff --git a/src/Symfony/Component/Lock/BlockingStoreInterface.php b/src/Symfony/Component/Lock/BlockingStoreInterface.php
index 8a84272a8b..e22fac0538 100644
--- a/src/Symfony/Component/Lock/BlockingStoreInterface.php
+++ b/src/Symfony/Component/Lock/BlockingStoreInterface.php
@@ -26,4 +26,4 @@ interface BlockingStoreInterface extends PersistingStoreInterface
      * @throws LockConflictedException
      */
-    public function waitAndSave(Key $key);
+    public function waitAndSave(Key $key): void;
 }
diff --git a/src/Symfony/Component/Lock/LockFactory.php b/src/Symfony/Component/Lock/LockFactory.php
index 125b6eae50..ac327e8981 100644
--- a/src/Symfony/Component/Lock/LockFactory.php
+++ b/src/Symfony/Component/Lock/LockFactory.php
@@ -44,5 +44,5 @@ class LockFactory implements LoggerAwareInterface
      * @return SharedLockInterface
      */
-    public function createLock(string $resource, ?float $ttl = 300.0, bool $autoRelease = true): LockInterface
+    public function createLock(string $resource, ?float $ttl = 300.0, bool $autoRelease = true): SharedLockInterface
     {
         return $this->createLockFromKey(new Key($resource), $ttl, $autoRelease);
@@ -58,5 +58,5 @@ class LockFactory implements LoggerAwareInterface
      * @return SharedLockInterface
      */
-    public function createLockFromKey(Key $key, ?float $ttl = 300.0, bool $autoRelease = true): LockInterface
+    public function createLockFromKey(Key $key, ?float $ttl = 300.0, bool $autoRelease = true): SharedLockInterface
     {
         $lock = new Lock($key, $this->store, $ttl, $autoRelease);
diff --git a/src/Symfony/Component/Lock/LockInterface.php b/src/Symfony/Component/Lock/LockInterface.php
index 8ff806497c..991252e453 100644
--- a/src/Symfony/Component/Lock/LockInterface.php
+++ b/src/Symfony/Component/Lock/LockInterface.php
@@ -42,5 +42,5 @@ interface LockInterface
      * @throws LockAcquiringException  If the lock cannot be refreshed
      */
-    public function refresh(float $ttl = null);
+    public function refresh(float $ttl = null): void;
 
     /**
@@ -56,5 +56,5 @@ interface LockInterface
      * @throws LockReleasingException If the lock cannot be released
      */
-    public function release();
+    public function release(): void;
 
     public function isExpired(): bool;
diff --git a/src/Symfony/Component/Lock/PersistingStoreInterface.php b/src/Symfony/Component/Lock/PersistingStoreInterface.php
index 10af48c5e6..392446a56a 100644
--- a/src/Symfony/Component/Lock/PersistingStoreInterface.php
+++ b/src/Symfony/Component/Lock/PersistingStoreInterface.php
@@ -29,5 +29,5 @@ interface PersistingStoreInterface
      * @throws LockConflictedException
      */
-    public function save(Key $key);
+    public function save(Key $key): void;
 
     /**
@@ -38,5 +38,5 @@ interface PersistingStoreInterface
      * @throws LockReleasingException
      */
-    public function delete(Key $key);
+    public function delete(Key $key): void;
 
     /**
@@ -54,4 +54,4 @@ interface PersistingStoreInterface
      * @throws LockConflictedException
      */
-    public function putOffExpiration(Key $key, float $ttl);
+    public function putOffExpiration(Key $key, float $ttl): void;
 }
diff --git a/src/Symfony/Component/Lock/SharedLockStoreInterface.php b/src/Symfony/Component/Lock/SharedLockStoreInterface.php
index 8246152493..1814a18bca 100644
--- a/src/Symfony/Component/Lock/SharedLockStoreInterface.php
+++ b/src/Symfony/Component/Lock/SharedLockStoreInterface.php
@@ -26,4 +26,4 @@ interface SharedLockStoreInterface extends PersistingStoreInterface
      * @throws LockConflictedException
      */
-    public function saveRead(Key $key);
+    public function saveRead(Key $key): void;
 }
diff --git a/src/Symfony/Component/Lock/Store/CombinedStore.php b/src/Symfony/Component/Lock/Store/CombinedStore.php
index 9087874c29..5cfd87c4ad 100644
--- a/src/Symfony/Component/Lock/Store/CombinedStore.php
+++ b/src/Symfony/Component/Lock/Store/CombinedStore.php
@@ -57,5 +57,5 @@ class CombinedStore implements SharedLockStoreInterface, LoggerAwareInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $successCount = 0;
@@ -94,5 +94,5 @@ class CombinedStore implements SharedLockStoreInterface, LoggerAwareInterface
      * @return void
      */
-    public function saveRead(Key $key)
+    public function saveRead(Key $key): void
     {
         $successCount = 0;
@@ -135,5 +135,5 @@ class CombinedStore implements SharedLockStoreInterface, LoggerAwareInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         $successCount = 0;
@@ -179,5 +179,5 @@ class CombinedStore implements SharedLockStoreInterface, LoggerAwareInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         foreach ($this->stores as $store) {
diff --git a/src/Symfony/Component/Lock/Store/DoctrineDbalPostgreSqlStore.php b/src/Symfony/Component/Lock/Store/DoctrineDbalPostgreSqlStore.php
index 4344a6f41f..c3ee27f8a5 100644
--- a/src/Symfony/Component/Lock/Store/DoctrineDbalPostgreSqlStore.php
+++ b/src/Symfony/Component/Lock/Store/DoctrineDbalPostgreSqlStore.php
@@ -57,5 +57,5 @@ class DoctrineDbalPostgreSqlStore implements BlockingSharedLockStoreInterface, B
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         // prevent concurrency within the same connection
@@ -92,5 +92,5 @@ class DoctrineDbalPostgreSqlStore implements BlockingSharedLockStoreInterface, B
      * @return void
      */
-    public function saveRead(Key $key)
+    public function saveRead(Key $key): void
     {
         // prevent concurrency within the same connection
@@ -127,5 +127,5 @@ class DoctrineDbalPostgreSqlStore implements BlockingSharedLockStoreInterface, B
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         // postgresql locks forever.
@@ -139,5 +139,5 @@ class DoctrineDbalPostgreSqlStore implements BlockingSharedLockStoreInterface, B
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         // Prevent deleting locks own by an other key in the same connection
@@ -179,5 +179,5 @@ class DoctrineDbalPostgreSqlStore implements BlockingSharedLockStoreInterface, B
      * @return void
      */
-    public function waitAndSave(Key $key)
+    public function waitAndSave(Key $key): void
     {
         // prevent concurrency within the same connection
@@ -205,5 +205,5 @@ class DoctrineDbalPostgreSqlStore implements BlockingSharedLockStoreInterface, B
      * @return void
      */
-    public function waitAndSaveRead(Key $key)
+    public function waitAndSaveRead(Key $key): void
     {
         // prevent concurrency within the same connection
diff --git a/src/Symfony/Component/Lock/Store/DoctrineDbalStore.php b/src/Symfony/Component/Lock/Store/DoctrineDbalStore.php
index 7c749bfec0..f24cc1d51f 100644
--- a/src/Symfony/Component/Lock/Store/DoctrineDbalStore.php
+++ b/src/Symfony/Component/Lock/Store/DoctrineDbalStore.php
@@ -76,5 +76,5 @@ class DoctrineDbalStore implements PersistingStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $key->reduceLifetime($this->initialTtl);
@@ -118,5 +118,5 @@ class DoctrineDbalStore implements PersistingStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, $ttl)
+    public function putOffExpiration(Key $key, $ttl): void
     {
         if ($ttl < 1) {
@@ -152,5 +152,5 @@ class DoctrineDbalStore implements PersistingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $this->conn->delete($this->table, [
diff --git a/src/Symfony/Component/Lock/Store/FlockStore.php b/src/Symfony/Component/Lock/Store/FlockStore.php
index edabbb946c..247e012718 100644
--- a/src/Symfony/Component/Lock/Store/FlockStore.php
+++ b/src/Symfony/Component/Lock/Store/FlockStore.php
@@ -54,5 +54,5 @@ class FlockStore implements BlockingStoreInterface, SharedLockStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $this->lock($key, false, false);
@@ -62,5 +62,5 @@ class FlockStore implements BlockingStoreInterface, SharedLockStoreInterface
      * @return void
      */
-    public function saveRead(Key $key)
+    public function saveRead(Key $key): void
     {
         $this->lock($key, true, false);
@@ -70,5 +70,5 @@ class FlockStore implements BlockingStoreInterface, SharedLockStoreInterface
      * @return void
      */
-    public function waitAndSave(Key $key)
+    public function waitAndSave(Key $key): void
     {
         $this->lock($key, false, true);
@@ -78,5 +78,5 @@ class FlockStore implements BlockingStoreInterface, SharedLockStoreInterface
      * @return void
      */
-    public function waitAndSaveRead(Key $key)
+    public function waitAndSaveRead(Key $key): void
     {
         $this->lock($key, true, true);
@@ -136,5 +136,5 @@ class FlockStore implements BlockingStoreInterface, SharedLockStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         // do nothing, the flock locks forever.
@@ -144,5 +144,5 @@ class FlockStore implements BlockingStoreInterface, SharedLockStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         // The lock is maybe not acquired.
diff --git a/src/Symfony/Component/Lock/Store/InMemoryStore.php b/src/Symfony/Component/Lock/Store/InMemoryStore.php
index 34d3ede5c1..29963f2d14 100644
--- a/src/Symfony/Component/Lock/Store/InMemoryStore.php
+++ b/src/Symfony/Component/Lock/Store/InMemoryStore.php
@@ -30,5 +30,5 @@ class InMemoryStore implements SharedLockStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $hashKey = (string) $key;
@@ -61,5 +61,5 @@ class InMemoryStore implements SharedLockStoreInterface
      * @return void
      */
-    public function saveRead(Key $key)
+    public function saveRead(Key $key): void
     {
         $hashKey = (string) $key;
@@ -88,5 +88,5 @@ class InMemoryStore implements SharedLockStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         // do nothing, memory locks forever.
@@ -96,5 +96,5 @@ class InMemoryStore implements SharedLockStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $hashKey = (string) $key;
diff --git a/src/Symfony/Component/Lock/Store/MemcachedStore.php b/src/Symfony/Component/Lock/Store/MemcachedStore.php
index 88233655f9..abfb1fe7a6 100644
--- a/src/Symfony/Component/Lock/Store/MemcachedStore.php
+++ b/src/Symfony/Component/Lock/Store/MemcachedStore.php
@@ -34,5 +34,5 @@ class MemcachedStore implements PersistingStoreInterface
      * @return bool
      */
-    public static function isSupported()
+    public static function isSupported(): bool
     {
         return \extension_loaded('memcached');
@@ -59,5 +59,5 @@ class MemcachedStore implements PersistingStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $token = $this->getUniqueToken($key);
@@ -74,5 +74,5 @@ class MemcachedStore implements PersistingStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         if ($ttl < 1) {
@@ -113,5 +113,5 @@ class MemcachedStore implements PersistingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $token = $this->getUniqueToken($key);
diff --git a/src/Symfony/Component/Lock/Store/MongoDbStore.php b/src/Symfony/Component/Lock/Store/MongoDbStore.php
index ada843883c..afebb3f3d8 100644
--- a/src/Symfony/Component/Lock/Store/MongoDbStore.php
+++ b/src/Symfony/Component/Lock/Store/MongoDbStore.php
@@ -194,5 +194,5 @@ class MongoDbStore implements PersistingStoreInterface
      * @throws DriverRuntimeException        for other driver errors (e.g. connection errors)
      */
-    public function createTtlIndex(int $expireAfterSeconds = 0)
+    public function createTtlIndex(int $expireAfterSeconds = 0): void
     {
         $this->getCollection()->createIndex(
@@ -211,5 +211,5 @@ class MongoDbStore implements PersistingStoreInterface
      * @throws LockExpiredException when save is called on an expired lock
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $key->reduceLifetime($this->initialTtl);
@@ -237,5 +237,5 @@ class MongoDbStore implements PersistingStoreInterface
      * @throws LockExpiredException
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         $key->reduceLifetime($ttl);
@@ -256,5 +256,5 @@ class MongoDbStore implements PersistingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $this->getCollection()->deleteOne([ // filter
diff --git a/src/Symfony/Component/Lock/Store/PdoStore.php b/src/Symfony/Component/Lock/Store/PdoStore.php
index ec114c13c1..52832c3d05 100644
--- a/src/Symfony/Component/Lock/Store/PdoStore.php
+++ b/src/Symfony/Component/Lock/Store/PdoStore.php
@@ -87,5 +87,5 @@ class PdoStore implements PersistingStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $key->reduceLifetime($this->initialTtl);
@@ -119,5 +119,5 @@ class PdoStore implements PersistingStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         if ($ttl < 1) {
@@ -147,5 +147,5 @@ class PdoStore implements PersistingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $sql = "DELETE FROM $this->table WHERE $this->idCol = :id AND $this->tokenCol = :token";
diff --git a/src/Symfony/Component/Lock/Store/PostgreSqlStore.php b/src/Symfony/Component/Lock/Store/PostgreSqlStore.php
index 87a57ea064..0c89396d79 100644
--- a/src/Symfony/Component/Lock/Store/PostgreSqlStore.php
+++ b/src/Symfony/Component/Lock/Store/PostgreSqlStore.php
@@ -71,5 +71,5 @@ class PostgreSqlStore implements BlockingSharedLockStoreInterface, BlockingStore
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         // prevent concurrency within the same connection
@@ -106,5 +106,5 @@ class PostgreSqlStore implements BlockingSharedLockStoreInterface, BlockingStore
      * @return void
      */
-    public function saveRead(Key $key)
+    public function saveRead(Key $key): void
     {
         // prevent concurrency within the same connection
@@ -142,5 +142,5 @@ class PostgreSqlStore implements BlockingSharedLockStoreInterface, BlockingStore
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         // postgresql locks forever.
@@ -154,5 +154,5 @@ class PostgreSqlStore implements BlockingSharedLockStoreInterface, BlockingStore
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         // Prevent deleting locks own by an other key in the same connection
@@ -195,5 +195,5 @@ class PostgreSqlStore implements BlockingSharedLockStoreInterface, BlockingStore
      * @return void
      */
-    public function waitAndSave(Key $key)
+    public function waitAndSave(Key $key): void
     {
         // prevent concurrency within the same connection
@@ -221,5 +221,5 @@ class PostgreSqlStore implements BlockingSharedLockStoreInterface, BlockingStore
      * @return void
      */
-    public function waitAndSaveRead(Key $key)
+    public function waitAndSaveRead(Key $key): void
     {
         // prevent concurrency within the same connection
diff --git a/src/Symfony/Component/Lock/Store/RedisStore.php b/src/Symfony/Component/Lock/Store/RedisStore.php
index 51d3f72a9f..963c80efda 100644
--- a/src/Symfony/Component/Lock/Store/RedisStore.php
+++ b/src/Symfony/Component/Lock/Store/RedisStore.php
@@ -48,5 +48,5 @@ class RedisStore implements SharedLockStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $script = '
@@ -96,5 +96,5 @@ class RedisStore implements SharedLockStoreInterface
      * @return void
      */
-    public function saveRead(Key $key)
+    public function saveRead(Key $key): void
     {
         $script = '
@@ -139,5 +139,5 @@ class RedisStore implements SharedLockStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         $script = '
@@ -182,5 +182,5 @@ class RedisStore implements SharedLockStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $script = '
diff --git a/src/Symfony/Component/Lock/Store/SemaphoreStore.php b/src/Symfony/Component/Lock/Store/SemaphoreStore.php
index 7af6681a46..628e54ab30 100644
--- a/src/Symfony/Component/Lock/Store/SemaphoreStore.php
+++ b/src/Symfony/Component/Lock/Store/SemaphoreStore.php
@@ -44,5 +44,5 @@ class SemaphoreStore implements BlockingStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         $this->lock($key, false);
@@ -52,5 +52,5 @@ class SemaphoreStore implements BlockingStoreInterface
      * @return void
      */
-    public function waitAndSave(Key $key)
+    public function waitAndSave(Key $key): void
     {
         $this->lock($key, true);
@@ -83,5 +83,5 @@ class SemaphoreStore implements BlockingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         // The lock is maybe not acquired.
@@ -100,5 +100,5 @@ class SemaphoreStore implements BlockingStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         // do nothing, the semaphore locks forever.
diff --git a/src/Symfony/Component/Lock/Store/ZookeeperStore.php b/src/Symfony/Component/Lock/Store/ZookeeperStore.php
index 3d22eeb786..4b5a912202 100644
--- a/src/Symfony/Component/Lock/Store/ZookeeperStore.php
+++ b/src/Symfony/Component/Lock/Store/ZookeeperStore.php
@@ -60,5 +60,5 @@ class ZookeeperStore implements PersistingStoreInterface
      * @return void
      */
-    public function save(Key $key)
+    public function save(Key $key): void
     {
         if ($this->exists($key)) {
@@ -78,5 +78,5 @@ class ZookeeperStore implements PersistingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         if (!$this->exists($key)) {
@@ -106,5 +106,5 @@ class ZookeeperStore implements PersistingStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttl)
+    public function putOffExpiration(Key $key, float $ttl): void
     {
         // do nothing, zookeeper locks forever.
diff --git a/src/Symfony/Component/Mailer/EventListener/MessageLoggerListener.php b/src/Symfony/Component/Mailer/EventListener/MessageLoggerListener.php
index 6c5605fa8e..56914f2e64 100644
--- a/src/Symfony/Component/Mailer/EventListener/MessageLoggerListener.php
+++ b/src/Symfony/Component/Mailer/EventListener/MessageLoggerListener.php
@@ -34,5 +34,5 @@ class MessageLoggerListener implements EventSubscriberInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->events = new MessageEvents();
diff --git a/src/Symfony/Component/Messenger/Bridge/AmazonSqs/Transport/AmazonSqsTransport.php b/src/Symfony/Component/Messenger/Bridge/AmazonSqs/Transport/AmazonSqsTransport.php
index 1a1305f5d8..95fb4347c3 100644
--- a/src/Symfony/Component/Messenger/Bridge/AmazonSqs/Transport/AmazonSqsTransport.php
+++ b/src/Symfony/Component/Messenger/Bridge/AmazonSqs/Transport/AmazonSqsTransport.php
@@ -82,5 +82,5 @@ class AmazonSqsTransport implements TransportInterface, SetupableTransportInterf
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         try {
@@ -94,5 +94,5 @@ class AmazonSqsTransport implements TransportInterface, SetupableTransportInterf
      * @return MessageCountAwareInterface&ReceiverInterface
      */
-    private function getReceiver(): ReceiverInterface
+    private function getReceiver(): MessageCountAwareInterface&ReceiverInterface
     {
         return $this->receiver ??= new AmazonSqsReceiver($this->connection, $this->serializer);
diff --git a/src/Symfony/Component/Messenger/Command/ConsumeMessagesCommand.php b/src/Symfony/Component/Messenger/Command/ConsumeMessagesCommand.php
index 04ad92d116..6606e2bbc4 100644
--- a/src/Symfony/Component/Messenger/Command/ConsumeMessagesCommand.php
+++ b/src/Symfony/Component/Messenger/Command/ConsumeMessagesCommand.php
@@ -128,5 +128,5 @@ EOF
      * @return void
      */
-    protected function interact(InputInterface $input, OutputInterface $output)
+    protected function interact(InputInterface $input, OutputInterface $output): void
     {
         $io = new SymfonyStyle($input, $output instanceof ConsoleOutputInterface ? $output->getErrorOutput() : $output);
diff --git a/src/Symfony/Component/Messenger/Command/DebugCommand.php b/src/Symfony/Component/Messenger/Command/DebugCommand.php
index 5767f06a02..0902128db3 100644
--- a/src/Symfony/Component/Messenger/Command/DebugCommand.php
+++ b/src/Symfony/Component/Messenger/Command/DebugCommand.php
@@ -42,5 +42,5 @@ class DebugCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Messenger/Command/SetupTransportsCommand.php b/src/Symfony/Component/Messenger/Command/SetupTransportsCommand.php
index e506e49487..b7bbbb82a5 100644
--- a/src/Symfony/Component/Messenger/Command/SetupTransportsCommand.php
+++ b/src/Symfony/Component/Messenger/Command/SetupTransportsCommand.php
@@ -43,5 +43,5 @@ class SetupTransportsCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Messenger/Command/StatsCommand.php b/src/Symfony/Component/Messenger/Command/StatsCommand.php
index 3b6d6b8a39..98bc75ecd7 100644
--- a/src/Symfony/Component/Messenger/Command/StatsCommand.php
+++ b/src/Symfony/Component/Messenger/Command/StatsCommand.php
@@ -42,5 +42,5 @@ class StatsCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Messenger/DependencyInjection/MessengerPass.php b/src/Symfony/Component/Messenger/DependencyInjection/MessengerPass.php
index 86fa255015..08cbde055f 100644
--- a/src/Symfony/Component/Messenger/DependencyInjection/MessengerPass.php
+++ b/src/Symfony/Component/Messenger/DependencyInjection/MessengerPass.php
@@ -37,5 +37,5 @@ class MessengerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         $busIds = [];
diff --git a/src/Symfony/Component/Messenger/EventListener/SendFailedMessageForRetryListener.php b/src/Symfony/Component/Messenger/EventListener/SendFailedMessageForRetryListener.php
index 73c4013b6b..c8b52a3c0e 100644
--- a/src/Symfony/Component/Messenger/EventListener/SendFailedMessageForRetryListener.php
+++ b/src/Symfony/Component/Messenger/EventListener/SendFailedMessageForRetryListener.php
@@ -52,5 +52,5 @@ class SendFailedMessageForRetryListener implements EventSubscriberInterface
      * @return void
      */
-    public function onMessageFailed(WorkerMessageFailedEvent $event)
+    public function onMessageFailed(WorkerMessageFailedEvent $event): void
     {
         $retryStrategy = $this->getRetryStrategyForTransport($event->getReceiverName());
diff --git a/src/Symfony/Component/Messenger/EventListener/SendFailedMessageToFailureTransportListener.php b/src/Symfony/Component/Messenger/EventListener/SendFailedMessageToFailureTransportListener.php
index f6cd8aab00..1fd9f9f41e 100644
--- a/src/Symfony/Component/Messenger/EventListener/SendFailedMessageToFailureTransportListener.php
+++ b/src/Symfony/Component/Messenger/EventListener/SendFailedMessageToFailureTransportListener.php
@@ -39,5 +39,5 @@ class SendFailedMessageToFailureTransportListener implements EventSubscriberInte
      * @return void
      */
-    public function onMessageFailed(WorkerMessageFailedEvent $event)
+    public function onMessageFailed(WorkerMessageFailedEvent $event): void
     {
         if ($event->willRetry()) {
diff --git a/src/Symfony/Component/Messenger/Exception/ValidationFailedException.php b/src/Symfony/Component/Messenger/Exception/ValidationFailedException.php
index 0e91372f62..20a62a7e74 100644
--- a/src/Symfony/Component/Messenger/Exception/ValidationFailedException.php
+++ b/src/Symfony/Component/Messenger/Exception/ValidationFailedException.php
@@ -33,5 +33,5 @@ class ValidationFailedException extends RuntimeException
      * @return object
      */
-    public function getViolatingMessage()
+    public function getViolatingMessage(): object
     {
         return $this->violatingMessage;
diff --git a/src/Symfony/Component/Messenger/Stamp/HandlerArgumentsStamp.php b/src/Symfony/Component/Messenger/Stamp/HandlerArgumentsStamp.php
index 3dcdacf88f..f12f6c9437 100644
--- a/src/Symfony/Component/Messenger/Stamp/HandlerArgumentsStamp.php
+++ b/src/Symfony/Component/Messenger/Stamp/HandlerArgumentsStamp.php
@@ -25,5 +25,5 @@ final class HandlerArgumentsStamp implements NonSendableStampInterface
      * @return array
      */
-    public function getAdditionalArguments()
+    public function getAdditionalArguments(): array
     {
         return $this->additionalArguments;
diff --git a/src/Symfony/Component/Messenger/TraceableMessageBus.php b/src/Symfony/Component/Messenger/TraceableMessageBus.php
index d8e6dd4ad9..f96aae262e 100644
--- a/src/Symfony/Component/Messenger/TraceableMessageBus.php
+++ b/src/Symfony/Component/Messenger/TraceableMessageBus.php
@@ -54,5 +54,5 @@ class TraceableMessageBus implements MessageBusInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->dispatchedMessages = [];
diff --git a/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransport.php b/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransport.php
index 4937c4b325..c60e198a4a 100644
--- a/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransport.php
+++ b/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransport.php
@@ -112,5 +112,5 @@ class InMemoryTransport implements TransportInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->sent = $this->queue = $this->rejected = $this->acknowledged = [];
diff --git a/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransportFactory.php b/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransportFactory.php
index 774957c3cc..148d85ba1d 100644
--- a/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransportFactory.php
+++ b/src/Symfony/Component/Messenger/Transport/InMemory/InMemoryTransportFactory.php
@@ -42,5 +42,5 @@ class InMemoryTransportFactory implements TransportFactoryInterface, ResetInterf
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         foreach ($this->createdTransports as $transport) {
diff --git a/src/Symfony/Component/Mime/DependencyInjection/AddMimeTypeGuesserPass.php b/src/Symfony/Component/Mime/DependencyInjection/AddMimeTypeGuesserPass.php
index 70fa786331..f27afd0f01 100644
--- a/src/Symfony/Component/Mime/DependencyInjection/AddMimeTypeGuesserPass.php
+++ b/src/Symfony/Component/Mime/DependencyInjection/AddMimeTypeGuesserPass.php
@@ -26,5 +26,5 @@ class AddMimeTypeGuesserPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if ($container->has('mime_types')) {
diff --git a/src/Symfony/Component/Mime/Email.php b/src/Symfony/Component/Mime/Email.php
index 7f3496d1fc..be6a1eff61 100644
--- a/src/Symfony/Component/Mime/Email.php
+++ b/src/Symfony/Component/Mime/Email.php
@@ -400,5 +400,5 @@ class Email extends Message
      * @return void
      */
-    public function ensureValidity()
+    public function ensureValidity(): void
     {
         $this->ensureBodyValid();
diff --git a/src/Symfony/Component/Mime/Header/AbstractHeader.php b/src/Symfony/Component/Mime/Header/AbstractHeader.php
index 122281127a..8a400918a9 100644
--- a/src/Symfony/Component/Mime/Header/AbstractHeader.php
+++ b/src/Symfony/Component/Mime/Header/AbstractHeader.php
@@ -38,5 +38,5 @@ abstract class AbstractHeader implements HeaderInterface
      * @return void
      */
-    public function setCharset(string $charset)
+    public function setCharset(string $charset): void
     {
         $this->charset = $charset;
@@ -55,5 +55,5 @@ abstract class AbstractHeader implements HeaderInterface
      * @return void
      */
-    public function setLanguage(string $lang)
+    public function setLanguage(string $lang): void
     {
         $this->lang = $lang;
@@ -73,5 +73,5 @@ abstract class AbstractHeader implements HeaderInterface
      * @return void
      */
-    public function setMaxLineLength(int $lineLength)
+    public function setMaxLineLength(int $lineLength): void
     {
         $this->lineLength = $lineLength;
diff --git a/src/Symfony/Component/Mime/Header/HeaderInterface.php b/src/Symfony/Component/Mime/Header/HeaderInterface.php
index 5bc4162c30..7a4e822fe1 100644
--- a/src/Symfony/Component/Mime/Header/HeaderInterface.php
+++ b/src/Symfony/Component/Mime/Header/HeaderInterface.php
@@ -26,5 +26,5 @@ interface HeaderInterface
      * @return void
      */
-    public function setBody(mixed $body);
+    public function setBody(mixed $body): void;
 
     /**
@@ -38,5 +38,5 @@ interface HeaderInterface
      * @return void
      */
-    public function setCharset(string $charset);
+    public function setCharset(string $charset): void;
 
     public function getCharset(): ?string;
@@ -45,5 +45,5 @@ interface HeaderInterface
      * @return void
      */
-    public function setLanguage(string $lang);
+    public function setLanguage(string $lang): void;
 
     public function getLanguage(): ?string;
@@ -54,5 +54,5 @@ interface HeaderInterface
      * @return void
      */
-    public function setMaxLineLength(int $lineLength);
+    public function setMaxLineLength(int $lineLength): void;
 
     public function getMaxLineLength(): int;
diff --git a/src/Symfony/Component/Mime/Header/UnstructuredHeader.php b/src/Symfony/Component/Mime/Header/UnstructuredHeader.php
index 61c06d8f50..883293f6e0 100644
--- a/src/Symfony/Component/Mime/Header/UnstructuredHeader.php
+++ b/src/Symfony/Component/Mime/Header/UnstructuredHeader.php
@@ -33,5 +33,5 @@ class UnstructuredHeader extends AbstractHeader
      * @return void
      */
-    public function setBody(mixed $body)
+    public function setBody(mixed $body): void
     {
         $this->setValue($body);
@@ -56,5 +56,5 @@ class UnstructuredHeader extends AbstractHeader
      * @return void
      */
-    public function setValue(string $value)
+    public function setValue(string $value): void
     {
         $this->value = $value;
diff --git a/src/Symfony/Component/Mime/Message.php b/src/Symfony/Component/Mime/Message.php
index e636c2e8e5..4c0597d16f 100644
--- a/src/Symfony/Component/Mime/Message.php
+++ b/src/Symfony/Component/Mime/Message.php
@@ -129,5 +129,5 @@ class Message extends RawMessage
      * @return void
      */
-    public function ensureValidity()
+    public function ensureValidity(): void
     {
         if (!$this->headers->has('To') && !$this->headers->has('Cc') && !$this->headers->has('Bcc')) {
diff --git a/src/Symfony/Component/Mime/RawMessage.php b/src/Symfony/Component/Mime/RawMessage.php
index aec398c588..687d4e2612 100644
--- a/src/Symfony/Component/Mime/RawMessage.php
+++ b/src/Symfony/Component/Mime/RawMessage.php
@@ -59,5 +59,5 @@ class RawMessage
      * @throws LogicException if the message is not valid
      */
-    public function ensureValidity()
+    public function ensureValidity(): void
     {
     }
diff --git a/src/Symfony/Component/Notifier/EventListener/NotificationLoggerListener.php b/src/Symfony/Component/Notifier/EventListener/NotificationLoggerListener.php
index 70ca6aed9c..b9b5a3262f 100644
--- a/src/Symfony/Component/Notifier/EventListener/NotificationLoggerListener.php
+++ b/src/Symfony/Component/Notifier/EventListener/NotificationLoggerListener.php
@@ -32,5 +32,5 @@ class NotificationLoggerListener implements EventSubscriberInterface, ResetInter
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->events = new NotificationEvents();
diff --git a/src/Symfony/Component/Notifier/EventListener/SendFailedMessageToNotifierListener.php b/src/Symfony/Component/Notifier/EventListener/SendFailedMessageToNotifierListener.php
index 355c136195..ecd14480ad 100644
--- a/src/Symfony/Component/Notifier/EventListener/SendFailedMessageToNotifierListener.php
+++ b/src/Symfony/Component/Notifier/EventListener/SendFailedMessageToNotifierListener.php
@@ -35,5 +35,5 @@ class SendFailedMessageToNotifierListener implements EventSubscriberInterface
      * @return void
      */
-    public function onMessageFailed(WorkerMessageFailedEvent $event)
+    public function onMessageFailed(WorkerMessageFailedEvent $event): void
     {
         if ($event->willRetry()) {
diff --git a/src/Symfony/Component/OptionsResolver/OptionsResolver.php b/src/Symfony/Component/OptionsResolver/OptionsResolver.php
index 724b121dd4..3256576212 100644
--- a/src/Symfony/Component/OptionsResolver/OptionsResolver.php
+++ b/src/Symfony/Component/OptionsResolver/OptionsResolver.php
@@ -491,5 +491,5 @@ class OptionsResolver implements Options
      * @throws AccessException           If called from a lazy option or normalizer
      */
-    public function setNormalizer(string $option, \Closure $normalizer)
+    public function setNormalizer(string $option, \Closure $normalizer): static
     {
         if ($this->locked) {
@@ -575,5 +575,5 @@ class OptionsResolver implements Options
      * @throws AccessException           If called from a lazy option or normalizer
      */
-    public function setAllowedValues(string $option, mixed $allowedValues)
+    public function setAllowedValues(string $option, mixed $allowedValues): static
     {
         if ($this->locked) {
@@ -615,5 +615,5 @@ class OptionsResolver implements Options
      * @throws AccessException           If called from a lazy option or normalizer
      */
-    public function addAllowedValues(string $option, mixed $allowedValues)
+    public function addAllowedValues(string $option, mixed $allowedValues): static
     {
         if ($this->locked) {
@@ -655,5 +655,5 @@ class OptionsResolver implements Options
      * @throws AccessException           If called from a lazy option or normalizer
      */
-    public function setAllowedTypes(string $option, string|array $allowedTypes)
+    public function setAllowedTypes(string $option, string|array $allowedTypes): static
     {
         if ($this->locked) {
@@ -689,5 +689,5 @@ class OptionsResolver implements Options
      * @throws AccessException           If called from a lazy option or normalizer
      */
-    public function addAllowedTypes(string $option, string|array $allowedTypes)
+    public function addAllowedTypes(string $option, string|array $allowedTypes): static
     {
         if ($this->locked) {
diff --git a/src/Symfony/Component/Process/Exception/ProcessFailedException.php b/src/Symfony/Component/Process/Exception/ProcessFailedException.php
index cf006daebf..51b1ccb810 100644
--- a/src/Symfony/Component/Process/Exception/ProcessFailedException.php
+++ b/src/Symfony/Component/Process/Exception/ProcessFailedException.php
@@ -51,5 +51,5 @@ class ProcessFailedException extends RuntimeException
      * @return Process
      */
-    public function getProcess()
+    public function getProcess(): Process
     {
         return $this->process;
diff --git a/src/Symfony/Component/Process/Exception/ProcessTimedOutException.php b/src/Symfony/Component/Process/Exception/ProcessTimedOutException.php
index e507ca3099..75b5f010b8 100644
--- a/src/Symfony/Component/Process/Exception/ProcessTimedOutException.php
+++ b/src/Symfony/Component/Process/Exception/ProcessTimedOutException.php
@@ -42,5 +42,5 @@ class ProcessTimedOutException extends RuntimeException
      * @return Process
      */
-    public function getProcess()
+    public function getProcess(): Process
     {
         return $this->process;
@@ -50,5 +50,5 @@ class ProcessTimedOutException extends RuntimeException
      * @return bool
      */
-    public function isGeneralTimeout()
+    public function isGeneralTimeout(): bool
     {
         return self::TYPE_GENERAL === $this->timeoutType;
@@ -58,5 +58,5 @@ class ProcessTimedOutException extends RuntimeException
      * @return bool
      */
-    public function isIdleTimeout()
+    public function isIdleTimeout(): bool
     {
         return self::TYPE_IDLE === $this->timeoutType;
diff --git a/src/Symfony/Component/Process/ExecutableFinder.php b/src/Symfony/Component/Process/ExecutableFinder.php
index e3387dfe15..b88d942f05 100644
--- a/src/Symfony/Component/Process/ExecutableFinder.php
+++ b/src/Symfony/Component/Process/ExecutableFinder.php
@@ -27,5 +27,5 @@ class ExecutableFinder
      * @return void
      */
-    public function setSuffixes(array $suffixes)
+    public function setSuffixes(array $suffixes): void
     {
         $this->suffixes = $suffixes;
@@ -37,5 +37,5 @@ class ExecutableFinder
      * @return void
      */
-    public function addSuffix(string $suffix)
+    public function addSuffix(string $suffix): void
     {
         $this->suffixes[] = $suffix;
diff --git a/src/Symfony/Component/Process/InputStream.php b/src/Symfony/Component/Process/InputStream.php
index 086f5a9edf..edacc344e9 100644
--- a/src/Symfony/Component/Process/InputStream.php
+++ b/src/Symfony/Component/Process/InputStream.php
@@ -33,5 +33,5 @@ class InputStream implements \IteratorAggregate
      * @return void
      */
-    public function onEmpty(callable $onEmpty = null)
+    public function onEmpty(callable $onEmpty = null): void
     {
         $this->onEmpty = $onEmpty;
@@ -46,5 +46,5 @@ class InputStream implements \IteratorAggregate
      * @return void
      */
-    public function write(mixed $input)
+    public function write(mixed $input): void
     {
         if (null === $input) {
@@ -62,5 +62,5 @@ class InputStream implements \IteratorAggregate
      * @return void
      */
-    public function close()
+    public function close(): void
     {
         $this->open = false;
@@ -72,5 +72,5 @@ class InputStream implements \IteratorAggregate
      * @return bool
      */
-    public function isClosed()
+    public function isClosed(): bool
     {
         return !$this->open;
diff --git a/src/Symfony/Component/Process/PhpProcess.php b/src/Symfony/Component/Process/PhpProcess.php
index ef54a3d2b0..d084e5ba24 100644
--- a/src/Symfony/Component/Process/PhpProcess.php
+++ b/src/Symfony/Component/Process/PhpProcess.php
@@ -59,5 +59,5 @@ class PhpProcess extends Process
      * @return void
      */
-    public function start(callable $callback = null, array $env = [])
+    public function start(callable $callback = null, array $env = []): void
     {
         if (null === $this->getCommandLine()) {
diff --git a/src/Symfony/Component/Process/Process.php b/src/Symfony/Component/Process/Process.php
index 40dbd41620..ac31fdc922 100644
--- a/src/Symfony/Component/Process/Process.php
+++ b/src/Symfony/Component/Process/Process.php
@@ -292,5 +292,5 @@ class Process implements \IteratorAggregate
      * @throws LogicException   In case a callback is provided and output has been disabled
      */
-    public function start(callable $callback = null, array $env = [])
+    public function start(callable $callback = null, array $env = []): void
     {
         if ($this->isRunning()) {
@@ -1147,5 +1147,5 @@ class Process implements \IteratorAggregate
      * @throws ProcessTimedOutException In case the timeout was reached
      */
-    public function checkTimeout()
+    public function checkTimeout(): void
     {
         if (self::STATUS_STARTED !== $this->status) {
@@ -1188,5 +1188,5 @@ class Process implements \IteratorAggregate
      * @return void
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         if ($this->isRunning()) {
@@ -1285,5 +1285,5 @@ class Process implements \IteratorAggregate
      * @return void
      */
-    protected function updateStatus(bool $blocking)
+    protected function updateStatus(bool $blocking): void
     {
         if (self::STATUS_STARTED !== $this->status) {
diff --git a/src/Symfony/Component/PropertyAccess/PropertyAccessor.php b/src/Symfony/Component/PropertyAccess/PropertyAccessor.php
index 0bf5c0afa9..dc0f2eae19 100644
--- a/src/Symfony/Component/PropertyAccess/PropertyAccessor.php
+++ b/src/Symfony/Component/PropertyAccess/PropertyAccessor.php
@@ -123,5 +123,5 @@ class PropertyAccessor implements PropertyAccessorInterface
      * @return void
      */
-    public function setValue(object|array &$objectOrArray, string|PropertyPathInterface $propertyPath, mixed $value)
+    public function setValue(object|array &$objectOrArray, string|PropertyPathInterface $propertyPath, mixed $value): void
     {
         if (\is_object($objectOrArray) && false === strpbrk((string) $propertyPath, '.[')) {
diff --git a/src/Symfony/Component/PropertyAccess/PropertyAccessorInterface.php b/src/Symfony/Component/PropertyAccess/PropertyAccessorInterface.php
index 8336df4d72..f6948564a9 100644
--- a/src/Symfony/Component/PropertyAccess/PropertyAccessorInterface.php
+++ b/src/Symfony/Component/PropertyAccess/PropertyAccessorInterface.php
@@ -46,5 +46,5 @@ interface PropertyAccessorInterface
      * @return void
      */
-    public function setValue(object|array &$objectOrArray, string|PropertyPathInterface $propertyPath, mixed $value);
+    public function setValue(object|array &$objectOrArray, string|PropertyPathInterface $propertyPath, mixed $value): void;
 
     /**
diff --git a/src/Symfony/Component/PropertyAccess/PropertyPathBuilder.php b/src/Symfony/Component/PropertyAccess/PropertyPathBuilder.php
index a0154bd7ce..70c0d942e2 100644
--- a/src/Symfony/Component/PropertyAccess/PropertyPathBuilder.php
+++ b/src/Symfony/Component/PropertyAccess/PropertyPathBuilder.php
@@ -37,5 +37,5 @@ class PropertyPathBuilder
      * @return void
      */
-    public function append(PropertyPathInterface|string $path, int $offset = 0, int $length = 0)
+    public function append(PropertyPathInterface|string $path, int $offset = 0, int $length = 0): void
     {
         if (\is_string($path)) {
@@ -60,5 +60,5 @@ class PropertyPathBuilder
      * @return void
      */
-    public function appendIndex(string $name)
+    public function appendIndex(string $name): void
     {
         $this->elements[] = $name;
@@ -71,5 +71,5 @@ class PropertyPathBuilder
      * @return void
      */
-    public function appendProperty(string $name)
+    public function appendProperty(string $name): void
     {
         $this->elements[] = $name;
@@ -84,5 +84,5 @@ class PropertyPathBuilder
      * @throws OutOfBoundsException if offset is invalid
      */
-    public function remove(int $offset, int $length = 1)
+    public function remove(int $offset, int $length = 1): void
     {
         if (!isset($this->elements[$offset])) {
@@ -103,5 +103,5 @@ class PropertyPathBuilder
      * @throws OutOfBoundsException If the offset is invalid
      */
-    public function replace(int $offset, int $length, PropertyPathInterface|string $path, int $pathOffset = 0, int $pathLength = 0)
+    public function replace(int $offset, int $length, PropertyPathInterface|string $path, int $pathOffset = 0, int $pathLength = 0): void
     {
         if (\is_string($path)) {
@@ -135,5 +135,5 @@ class PropertyPathBuilder
      * @throws OutOfBoundsException If the offset is invalid
      */
-    public function replaceByIndex(int $offset, string $name = null)
+    public function replaceByIndex(int $offset, string $name = null): void
     {
         if (!isset($this->elements[$offset])) {
@@ -155,5 +155,5 @@ class PropertyPathBuilder
      * @throws OutOfBoundsException If the offset is invalid
      */
-    public function replaceByProperty(int $offset, string $name = null)
+    public function replaceByProperty(int $offset, string $name = null): void
     {
         if (!isset($this->elements[$offset])) {
diff --git a/src/Symfony/Component/PropertyAccess/PropertyPathInterface.php b/src/Symfony/Component/PropertyAccess/PropertyPathInterface.php
index 11f6ed405b..53e7b33451 100644
--- a/src/Symfony/Component/PropertyAccess/PropertyPathInterface.php
+++ b/src/Symfony/Component/PropertyAccess/PropertyPathInterface.php
@@ -33,5 +33,5 @@ interface PropertyPathInterface extends \Traversable
      * @return int
      */
-    public function getLength();
+    public function getLength(): int;
 
     /**
@@ -45,5 +45,5 @@ interface PropertyPathInterface extends \Traversable
      * @return self|null
      */
-    public function getParent();
+    public function getParent(): ?\Symfony\Component\PropertyAccess\PropertyPathInterface;
 
     /**
@@ -52,5 +52,5 @@ interface PropertyPathInterface extends \Traversable
      * @return list<string>
      */
-    public function getElements();
+    public function getElements(): array;
 
     /**
@@ -63,5 +63,5 @@ interface PropertyPathInterface extends \Traversable
      * @throws Exception\OutOfBoundsException If the offset is invalid
      */
-    public function getElement(int $index);
+    public function getElement(int $index): string;
 
     /**
@@ -74,5 +74,5 @@ interface PropertyPathInterface extends \Traversable
      * @throws Exception\OutOfBoundsException If the offset is invalid
      */
-    public function isProperty(int $index);
+    public function isProperty(int $index): bool;
 
     /**
@@ -85,4 +85,4 @@ interface PropertyPathInterface extends \Traversable
      * @throws Exception\OutOfBoundsException If the offset is invalid
      */
-    public function isIndex(int $index);
+    public function isIndex(int $index): bool;
 }
diff --git a/src/Symfony/Component/PropertyInfo/DependencyInjection/PropertyInfoPass.php b/src/Symfony/Component/PropertyInfo/DependencyInjection/PropertyInfoPass.php
index 1c240b43da..a96fbefdb9 100644
--- a/src/Symfony/Component/PropertyInfo/DependencyInjection/PropertyInfoPass.php
+++ b/src/Symfony/Component/PropertyInfo/DependencyInjection/PropertyInfoPass.php
@@ -29,5 +29,5 @@ class PropertyInfoPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('property_info')) {
diff --git a/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php b/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php
index f9ee787130..61f8b6d5be 100644
--- a/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php
+++ b/src/Symfony/Component/PropertyInfo/PropertyAccessExtractorInterface.php
@@ -24,5 +24,5 @@ interface PropertyAccessExtractorInterface
      * @return bool|null
      */
-    public function isReadable(string $class, string $property, array $context = []);
+    public function isReadable(string $class, string $property, array $context = []): ?bool;
 
     /**
@@ -31,4 +31,4 @@ interface PropertyAccessExtractorInterface
      * @return bool|null
      */
-    public function isWritable(string $class, string $property, array $context = []);
+    public function isWritable(string $class, string $property, array $context = []): ?bool;
 }
diff --git a/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php b/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php
index 326e6cccb3..ae7c6b612b 100644
--- a/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php
+++ b/src/Symfony/Component/PropertyInfo/PropertyListExtractorInterface.php
@@ -24,4 +24,4 @@ interface PropertyListExtractorInterface
      * @return string[]|null
      */
-    public function getProperties(string $class, array $context = []);
+    public function getProperties(string $class, array $context = []): ?array;
 }
diff --git a/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php b/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php
index 6da0bcb4c8..16e9765b1d 100644
--- a/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php
+++ b/src/Symfony/Component/PropertyInfo/PropertyTypeExtractorInterface.php
@@ -24,4 +24,4 @@ interface PropertyTypeExtractorInterface
      * @return Type[]|null
      */
-    public function getTypes(string $class, string $property, array $context = []);
+    public function getTypes(string $class, string $property, array $context = []): ?array;
 }
diff --git a/src/Symfony/Component/Routing/Annotation/Route.php b/src/Symfony/Component/Routing/Annotation/Route.php
index bb8423101d..bffe81146e 100644
--- a/src/Symfony/Component/Routing/Annotation/Route.php
+++ b/src/Symfony/Component/Routing/Annotation/Route.php
@@ -80,5 +80,5 @@ class Route
      * @return void
      */
-    public function setPath(string $path)
+    public function setPath(string $path): void
     {
         $this->path = $path;
@@ -88,5 +88,5 @@ class Route
      * @return string|null
      */
-    public function getPath()
+    public function getPath(): ?string
     {
         return $this->path;
@@ -96,5 +96,5 @@ class Route
      * @return void
      */
-    public function setLocalizedPaths(array $localizedPaths)
+    public function setLocalizedPaths(array $localizedPaths): void
     {
         $this->localizedPaths = $localizedPaths;
@@ -109,5 +109,5 @@ class Route
      * @return void
      */
-    public function setHost(string $pattern)
+    public function setHost(string $pattern): void
     {
         $this->host = $pattern;
@@ -117,5 +117,5 @@ class Route
      * @return string|null
      */
-    public function getHost()
+    public function getHost(): ?string
     {
         return $this->host;
@@ -125,5 +125,5 @@ class Route
      * @return void
      */
-    public function setName(string $name)
+    public function setName(string $name): void
     {
         $this->name = $name;
@@ -133,5 +133,5 @@ class Route
      * @return string|null
      */
-    public function getName()
+    public function getName(): ?string
     {
         return $this->name;
@@ -141,5 +141,5 @@ class Route
      * @return void
      */
-    public function setRequirements(array $requirements)
+    public function setRequirements(array $requirements): void
     {
         $this->requirements = $requirements;
@@ -149,5 +149,5 @@ class Route
      * @return array
      */
-    public function getRequirements()
+    public function getRequirements(): array
     {
         return $this->requirements;
@@ -157,5 +157,5 @@ class Route
      * @return void
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         $this->options = $options;
@@ -165,5 +165,5 @@ class Route
      * @return array
      */
-    public function getOptions()
+    public function getOptions(): array
     {
         return $this->options;
@@ -173,5 +173,5 @@ class Route
      * @return void
      */
-    public function setDefaults(array $defaults)
+    public function setDefaults(array $defaults): void
     {
         $this->defaults = $defaults;
@@ -181,5 +181,5 @@ class Route
      * @return array
      */
-    public function getDefaults()
+    public function getDefaults(): array
     {
         return $this->defaults;
@@ -189,5 +189,5 @@ class Route
      * @return void
      */
-    public function setSchemes(array|string $schemes)
+    public function setSchemes(array|string $schemes): void
     {
         $this->schemes = (array) $schemes;
@@ -197,5 +197,5 @@ class Route
      * @return array
      */
-    public function getSchemes()
+    public function getSchemes(): array
     {
         return $this->schemes;
@@ -205,5 +205,5 @@ class Route
      * @return void
      */
-    public function setMethods(array|string $methods)
+    public function setMethods(array|string $methods): void
     {
         $this->methods = (array) $methods;
@@ -213,5 +213,5 @@ class Route
      * @return array
      */
-    public function getMethods()
+    public function getMethods(): array
     {
         return $this->methods;
@@ -221,5 +221,5 @@ class Route
      * @return void
      */
-    public function setCondition(?string $condition)
+    public function setCondition(?string $condition): void
     {
         $this->condition = $condition;
@@ -229,5 +229,5 @@ class Route
      * @return string|null
      */
-    public function getCondition()
+    public function getCondition(): ?string
     {
         return $this->condition;
diff --git a/src/Symfony/Component/Routing/DependencyInjection/RoutingResolverPass.php b/src/Symfony/Component/Routing/DependencyInjection/RoutingResolverPass.php
index edbecc1f0e..6f07800fad 100644
--- a/src/Symfony/Component/Routing/DependencyInjection/RoutingResolverPass.php
+++ b/src/Symfony/Component/Routing/DependencyInjection/RoutingResolverPass.php
@@ -29,5 +29,5 @@ class RoutingResolverPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (false === $container->hasDefinition('routing.resolver')) {
diff --git a/src/Symfony/Component/Routing/Generator/ConfigurableRequirementsInterface.php b/src/Symfony/Component/Routing/Generator/ConfigurableRequirementsInterface.php
index cbbbf04595..985bd682f4 100644
--- a/src/Symfony/Component/Routing/Generator/ConfigurableRequirementsInterface.php
+++ b/src/Symfony/Component/Routing/Generator/ConfigurableRequirementsInterface.php
@@ -44,5 +44,5 @@ interface ConfigurableRequirementsInterface
      * @return void
      */
-    public function setStrictRequirements(?bool $enabled);
+    public function setStrictRequirements(?bool $enabled): void;
 
     /**
diff --git a/src/Symfony/Component/Routing/Generator/UrlGenerator.php b/src/Symfony/Component/Routing/Generator/UrlGenerator.php
index e3fb17e81c..cd27f3e387 100644
--- a/src/Symfony/Component/Routing/Generator/UrlGenerator.php
+++ b/src/Symfony/Component/Routing/Generator/UrlGenerator.php
@@ -95,5 +95,5 @@ class UrlGenerator implements UrlGeneratorInterface, ConfigurableRequirementsInt
      * @return void
      */
-    public function setContext(RequestContext $context)
+    public function setContext(RequestContext $context): void
     {
         $this->context = $context;
@@ -108,5 +108,5 @@ class UrlGenerator implements UrlGeneratorInterface, ConfigurableRequirementsInt
      * @return void
      */
-    public function setStrictRequirements(?bool $enabled)
+    public function setStrictRequirements(?bool $enabled): void
     {
         $this->strictRequirements = $enabled;
diff --git a/src/Symfony/Component/Routing/Loader/AnnotationClassLoader.php b/src/Symfony/Component/Routing/Loader/AnnotationClassLoader.php
index decd2a2b1d..a37965ed5b 100644
--- a/src/Symfony/Component/Routing/Loader/AnnotationClassLoader.php
+++ b/src/Symfony/Component/Routing/Loader/AnnotationClassLoader.php
@@ -96,5 +96,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return void
      */
-    public function setRouteAnnotationClass(string $class)
+    public function setRouteAnnotationClass(string $class): void
     {
         $this->routeAnnotationClass = $class;
@@ -148,5 +148,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return void
      */
-    protected function addRoute(RouteCollection $collection, object $annot, array $globals, \ReflectionClass $class, \ReflectionMethod $method)
+    protected function addRoute(RouteCollection $collection, object $annot, array $globals, \ReflectionClass $class, \ReflectionMethod $method): void
     {
         if ($annot->getEnv() && $annot->getEnv() !== $this->env) {
@@ -241,5 +241,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return void
      */
-    public function setResolver(LoaderResolverInterface $resolver)
+    public function setResolver(LoaderResolverInterface $resolver): void
     {
     }
@@ -254,5 +254,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return string
      */
-    protected function getDefaultRouteName(\ReflectionClass $class, \ReflectionMethod $method)
+    protected function getDefaultRouteName(\ReflectionClass $class, \ReflectionMethod $method): string
     {
         $name = str_replace('\\', '_', $class->name).'_'.$method->name;
@@ -269,5 +269,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return array
      */
-    protected function getGlobals(\ReflectionClass $class)
+    protected function getGlobals(\ReflectionClass $class): array
     {
         $globals = $this->resetGlobals();
@@ -354,5 +354,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return Route
      */
-    protected function createRoute(string $path, array $defaults, array $requirements, array $options, ?string $host, array $schemes, array $methods, ?string $condition)
+    protected function createRoute(string $path, array $defaults, array $requirements, array $options, ?string $host, array $schemes, array $methods, ?string $condition): Route
     {
         return new Route($path, $defaults, $requirements, $options, $host, $schemes, $methods, $condition);
@@ -362,5 +362,5 @@ abstract class AnnotationClassLoader implements LoaderInterface
      * @return void
      */
-    abstract protected function configureRoute(Route $route, \ReflectionClass $class, \ReflectionMethod $method, object $annot);
+    abstract protected function configureRoute(Route $route, \ReflectionClass $class, \ReflectionMethod $method, object $annot): void;
 
     /**
diff --git a/src/Symfony/Component/Routing/Loader/XmlFileLoader.php b/src/Symfony/Component/Routing/Loader/XmlFileLoader.php
index 24ec21bb5c..1dac35dc8e 100644
--- a/src/Symfony/Component/Routing/Loader/XmlFileLoader.php
+++ b/src/Symfony/Component/Routing/Loader/XmlFileLoader.php
@@ -67,5 +67,5 @@ class XmlFileLoader extends FileLoader
      * @throws \InvalidArgumentException When the XML is invalid
      */
-    protected function parseNode(RouteCollection $collection, \DOMElement $node, string $path, string $file)
+    protected function parseNode(RouteCollection $collection, \DOMElement $node, string $path, string $file): void
     {
         if (self::NAMESPACE_URI !== $node->namespaceURI) {
@@ -107,5 +107,5 @@ class XmlFileLoader extends FileLoader
      * @throws \InvalidArgumentException When the XML is invalid
      */
-    protected function parseRoute(RouteCollection $collection, \DOMElement $node, string $path)
+    protected function parseRoute(RouteCollection $collection, \DOMElement $node, string $path): void
     {
         if ('' === $id = $node->getAttribute('id')) {
@@ -156,5 +156,5 @@ class XmlFileLoader extends FileLoader
      * @throws \InvalidArgumentException When the XML is invalid
      */
-    protected function parseImport(RouteCollection $collection, \DOMElement $node, string $path, string $file)
+    protected function parseImport(RouteCollection $collection, \DOMElement $node, string $path, string $file): void
     {
         /** @var \DOMElement $resourceElement */
diff --git a/src/Symfony/Component/Routing/Loader/YamlFileLoader.php b/src/Symfony/Component/Routing/Loader/YamlFileLoader.php
index bde72c0eb0..3d6813e1d4 100644
--- a/src/Symfony/Component/Routing/Loader/YamlFileLoader.php
+++ b/src/Symfony/Component/Routing/Loader/YamlFileLoader.php
@@ -116,5 +116,5 @@ class YamlFileLoader extends FileLoader
      * @return void
      */
-    protected function parseRoute(RouteCollection $collection, string $name, array $config, string $path)
+    protected function parseRoute(RouteCollection $collection, string $name, array $config, string $path): void
     {
         if (isset($config['alias'])) {
@@ -176,5 +176,5 @@ class YamlFileLoader extends FileLoader
      * @return void
      */
-    protected function parseImport(RouteCollection $collection, array $config, string $path, string $file)
+    protected function parseImport(RouteCollection $collection, array $config, string $path, string $file): void
     {
         $type = $config['type'] ?? null;
@@ -248,5 +248,5 @@ class YamlFileLoader extends FileLoader
      *                                   something is missing or the combination is nonsense
      */
-    protected function validate(mixed $config, string $name, string $path)
+    protected function validate(mixed $config, string $name, string $path): void
     {
         if (!\is_array($config)) {
diff --git a/src/Symfony/Component/Routing/Matcher/Dumper/CompiledUrlMatcherDumper.php b/src/Symfony/Component/Routing/Matcher/Dumper/CompiledUrlMatcherDumper.php
index e92a5ea3d7..4a0af31349 100644
--- a/src/Symfony/Component/Routing/Matcher/Dumper/CompiledUrlMatcherDumper.php
+++ b/src/Symfony/Component/Routing/Matcher/Dumper/CompiledUrlMatcherDumper.php
@@ -54,5 +54,5 @@ EOF;
      * @return void
      */
-    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider)
+    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider): void
     {
         $this->expressionLanguageProviders[] = $provider;
diff --git a/src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php b/src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php
index 417f156415..75d770d852 100644
--- a/src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php
+++ b/src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php
@@ -33,5 +33,5 @@ class TraceableUrlMatcher extends UrlMatcher
      * @return array
      */
-    public function getTraces(string $pathinfo)
+    public function getTraces(string $pathinfo): array
     {
         $this->traces = [];
@@ -48,5 +48,5 @@ class TraceableUrlMatcher extends UrlMatcher
      * @return array
      */
-    public function getTracesForRequest(Request $request)
+    public function getTracesForRequest(Request $request): array
     {
         $this->request = $request;
diff --git a/src/Symfony/Component/Routing/Matcher/UrlMatcher.php b/src/Symfony/Component/Routing/Matcher/UrlMatcher.php
index d1cee21377..19e949fbc6 100644
--- a/src/Symfony/Component/Routing/Matcher/UrlMatcher.php
+++ b/src/Symfony/Component/Routing/Matcher/UrlMatcher.php
@@ -66,5 +66,5 @@ class UrlMatcher implements UrlMatcherInterface, RequestMatcherInterface
      * @return void
      */
-    public function setContext(RequestContext $context)
+    public function setContext(RequestContext $context): void
     {
         $this->context = $context;
@@ -105,5 +105,5 @@ class UrlMatcher implements UrlMatcherInterface, RequestMatcherInterface
      * @return void
      */
-    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider)
+    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider): void
     {
         $this->expressionLanguageProviders[] = $provider;
@@ -259,5 +259,5 @@ class UrlMatcher implements UrlMatcherInterface, RequestMatcherInterface
      * @return ExpressionLanguage
      */
-    protected function getExpressionLanguage()
+    protected function getExpressionLanguage(): ExpressionLanguage
     {
         if (null === $this->expressionLanguage) {
diff --git a/src/Symfony/Component/Routing/RequestContextAwareInterface.php b/src/Symfony/Component/Routing/RequestContextAwareInterface.php
index 04acbdc800..eedb53c594 100644
--- a/src/Symfony/Component/Routing/RequestContextAwareInterface.php
+++ b/src/Symfony/Component/Routing/RequestContextAwareInterface.php
@@ -19,5 +19,5 @@ interface RequestContextAwareInterface
      * @return void
      */
-    public function setContext(RequestContext $context);
+    public function setContext(RequestContext $context): void;
 
     /**
diff --git a/src/Symfony/Component/Routing/RouteCollection.php b/src/Symfony/Component/Routing/RouteCollection.php
index f244e62bed..a5e918317c 100644
--- a/src/Symfony/Component/Routing/RouteCollection.php
+++ b/src/Symfony/Component/Routing/RouteCollection.php
@@ -86,5 +86,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function add(string $name, Route $route, int $priority = 0)
+    public function add(string $name, Route $route, int $priority = 0): void
     {
         unset($this->routes[$name], $this->priorities[$name], $this->aliases[$name]);
@@ -146,5 +146,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function remove(string|array $name)
+    public function remove(string|array $name): void
     {
         foreach ((array) $name as $n) {
@@ -159,5 +159,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addCollection(self $collection)
+    public function addCollection(self $collection): void
     {
         // we need to remove all routes with the same names first because just replacing them
@@ -188,5 +188,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addPrefix(string $prefix, array $defaults = [], array $requirements = [])
+    public function addPrefix(string $prefix, array $defaults = [], array $requirements = []): void
     {
         $prefix = trim(trim($prefix), '/');
@@ -208,5 +208,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addNamePrefix(string $prefix)
+    public function addNamePrefix(string $prefix): void
     {
         $prefixedRoutes = [];
@@ -238,5 +238,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function setHost(?string $pattern, array $defaults = [], array $requirements = [])
+    public function setHost(?string $pattern, array $defaults = [], array $requirements = []): void
     {
         foreach ($this->routes as $route) {
@@ -254,5 +254,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function setCondition(?string $condition)
+    public function setCondition(?string $condition): void
     {
         foreach ($this->routes as $route) {
@@ -268,5 +268,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addDefaults(array $defaults)
+    public function addDefaults(array $defaults): void
     {
         if ($defaults) {
@@ -284,5 +284,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addRequirements(array $requirements)
+    public function addRequirements(array $requirements): void
     {
         if ($requirements) {
@@ -300,5 +300,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addOptions(array $options)
+    public function addOptions(array $options): void
     {
         if ($options) {
@@ -316,5 +316,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function setSchemes(string|array $schemes)
+    public function setSchemes(string|array $schemes): void
     {
         foreach ($this->routes as $route) {
@@ -330,5 +330,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function setMethods(string|array $methods)
+    public function setMethods(string|array $methods): void
     {
         foreach ($this->routes as $route) {
@@ -353,5 +353,5 @@ class RouteCollection implements \IteratorAggregate, \Countable
      * @return void
      */
-    public function addResource(ResourceInterface $resource)
+    public function addResource(ResourceInterface $resource): void
     {
         $key = (string) $resource;
diff --git a/src/Symfony/Component/Routing/Router.php b/src/Symfony/Component/Routing/Router.php
index 3fa13457b2..efcbc4219f 100644
--- a/src/Symfony/Component/Routing/Router.php
+++ b/src/Symfony/Component/Routing/Router.php
@@ -121,5 +121,5 @@ class Router implements RouterInterface, RequestMatcherInterface
      * @throws \InvalidArgumentException When unsupported option is provided
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         $this->options = [
@@ -156,5 +156,5 @@ class Router implements RouterInterface, RequestMatcherInterface
      * @throws \InvalidArgumentException
      */
-    public function setOption(string $key, mixed $value)
+    public function setOption(string $key, mixed $value): void
     {
         if (!\array_key_exists($key, $this->options)) {
@@ -182,5 +182,5 @@ class Router implements RouterInterface, RequestMatcherInterface
      * @return RouteCollection
      */
-    public function getRouteCollection()
+    public function getRouteCollection(): RouteCollection
     {
         return $this->collection ??= $this->loader->load($this->resource, $this->options['resource_type']);
@@ -190,5 +190,5 @@ class Router implements RouterInterface, RequestMatcherInterface
      * @return void
      */
-    public function setContext(RequestContext $context)
+    public function setContext(RequestContext $context): void
     {
         $this->context = $context;
@@ -212,5 +212,5 @@ class Router implements RouterInterface, RequestMatcherInterface
      * @return void
      */
-    public function setConfigCacheFactory(ConfigCacheFactoryInterface $configCacheFactory)
+    public function setConfigCacheFactory(ConfigCacheFactoryInterface $configCacheFactory): void
     {
         $this->configCacheFactory = $configCacheFactory;
@@ -318,5 +318,5 @@ class Router implements RouterInterface, RequestMatcherInterface
      * @return void
      */
-    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider)
+    public function addExpressionLanguageProvider(ExpressionFunctionProviderInterface $provider): void
     {
         $this->expressionLanguageProviders[] = $provider;
diff --git a/src/Symfony/Component/Routing/RouterInterface.php b/src/Symfony/Component/Routing/RouterInterface.php
index 6912f8a15b..caf18c886a 100644
--- a/src/Symfony/Component/Routing/RouterInterface.php
+++ b/src/Symfony/Component/Routing/RouterInterface.php
@@ -32,4 +32,4 @@ interface RouterInterface extends UrlMatcherInterface, UrlGeneratorInterface
      * @return RouteCollection
      */
-    public function getRouteCollection();
+    public function getRouteCollection(): RouteCollection;
 }
diff --git a/src/Symfony/Component/Security/Core/Authentication/RememberMe/InMemoryTokenProvider.php b/src/Symfony/Component/Security/Core/Authentication/RememberMe/InMemoryTokenProvider.php
index 341883f3c5..d508e0ce1e 100644
--- a/src/Symfony/Component/Security/Core/Authentication/RememberMe/InMemoryTokenProvider.php
+++ b/src/Symfony/Component/Security/Core/Authentication/RememberMe/InMemoryTokenProvider.php
@@ -35,5 +35,5 @@ class InMemoryTokenProvider implements TokenProviderInterface
      * @return void
      */
-    public function updateToken(string $series, #[\SensitiveParameter] string $tokenValue, \DateTime $lastUsed)
+    public function updateToken(string $series, #[\SensitiveParameter] string $tokenValue, \DateTime $lastUsed): void
     {
         if (!isset($this->tokens[$series])) {
@@ -54,5 +54,5 @@ class InMemoryTokenProvider implements TokenProviderInterface
      * @return void
      */
-    public function deleteTokenBySeries(string $series)
+    public function deleteTokenBySeries(string $series): void
     {
         unset($this->tokens[$series]);
@@ -62,5 +62,5 @@ class InMemoryTokenProvider implements TokenProviderInterface
      * @return void
      */
-    public function createNewToken(PersistentTokenInterface $token)
+    public function createNewToken(PersistentTokenInterface $token): void
     {
         $this->tokens[$token->getSeries()] = $token;
diff --git a/src/Symfony/Component/Security/Core/Authentication/RememberMe/TokenProviderInterface.php b/src/Symfony/Component/Security/Core/Authentication/RememberMe/TokenProviderInterface.php
index cf41e0c507..61f7397734 100644
--- a/src/Symfony/Component/Security/Core/Authentication/RememberMe/TokenProviderInterface.php
+++ b/src/Symfony/Component/Security/Core/Authentication/RememberMe/TokenProviderInterface.php
@@ -28,5 +28,5 @@ interface TokenProviderInterface
      * @throws TokenNotFoundException if the token is not found
      */
-    public function loadTokenBySeries(string $series);
+    public function loadTokenBySeries(string $series): PersistentTokenInterface;
 
     /**
@@ -35,5 +35,5 @@ interface TokenProviderInterface
      * @return void
      */
-    public function deleteTokenBySeries(string $series);
+    public function deleteTokenBySeries(string $series): void;
 
     /**
@@ -44,5 +44,5 @@ interface TokenProviderInterface
      * @throws TokenNotFoundException if the token is not found
      */
-    public function updateToken(string $series, #[\SensitiveParameter] string $tokenValue, \DateTime $lastUsed);
+    public function updateToken(string $series, #[\SensitiveParameter] string $tokenValue, \DateTime $lastUsed): void;
 
     /**
@@ -51,4 +51,4 @@ interface TokenProviderInterface
      * @return void
      */
-    public function createNewToken(PersistentTokenInterface $token);
+    public function createNewToken(PersistentTokenInterface $token): void;
 }
diff --git a/src/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php b/src/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php
index 10cb8f776e..0da1b3330e 100644
--- a/src/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php
+++ b/src/Symfony/Component/Security/Core/Authentication/Token/AbstractToken.php
@@ -57,5 +57,5 @@ abstract class AbstractToken implements TokenInterface, \Serializable
      * @return void
      */
-    public function setUser(UserInterface $user)
+    public function setUser(UserInterface $user): void
     {
         $this->user = $user;
@@ -65,5 +65,5 @@ abstract class AbstractToken implements TokenInterface, \Serializable
      * @return void
      */
-    public function eraseCredentials()
+    public function eraseCredentials(): void
     {
         if ($this->getUser() instanceof UserInterface) {
@@ -122,5 +122,5 @@ abstract class AbstractToken implements TokenInterface, \Serializable
      * @return void
      */
-    public function setAttributes(array $attributes)
+    public function setAttributes(array $attributes): void
     {
         $this->attributes = $attributes;
@@ -144,5 +144,5 @@ abstract class AbstractToken implements TokenInterface, \Serializable
      * @return void
      */
-    public function setAttribute(string $name, mixed $value)
+    public function setAttribute(string $name, mixed $value): void
     {
         $this->attributes[$name] = $value;
diff --git a/src/Symfony/Component/Security/Core/Authentication/Token/NullToken.php b/src/Symfony/Component/Security/Core/Authentication/Token/NullToken.php
index eabfe17bba..5a41823338 100644
--- a/src/Symfony/Component/Security/Core/Authentication/Token/NullToken.php
+++ b/src/Symfony/Component/Security/Core/Authentication/Token/NullToken.php
@@ -37,5 +37,5 @@ class NullToken implements TokenInterface
      * @return never
      */
-    public function setUser(UserInterface $user)
+    public function setUser(UserInterface $user): never
     {
         throw new \BadMethodCallException('Cannot set user on a NullToken.');
@@ -50,5 +50,5 @@ class NullToken implements TokenInterface
      * @return void
      */
-    public function eraseCredentials()
+    public function eraseCredentials(): void
     {
     }
@@ -62,5 +62,5 @@ class NullToken implements TokenInterface
      * @return never
      */
-    public function setAttributes(array $attributes)
+    public function setAttributes(array $attributes): never
     {
         throw new \BadMethodCallException('Cannot set attributes of NullToken.');
@@ -80,5 +80,5 @@ class NullToken implements TokenInterface
      * @return never
      */
-    public function setAttribute(string $name, mixed $value)
+    public function setAttribute(string $name, mixed $value): never
     {
         throw new \BadMethodCallException('Cannot add attribute to NullToken.');
diff --git a/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorage.php b/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorage.php
index 0ec6b1cfb9..2e235a6069 100644
--- a/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorage.php
+++ b/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorage.php
@@ -41,5 +41,5 @@ class TokenStorage implements TokenStorageInterface, ResetInterface
      * @return void
      */
-    public function setToken(TokenInterface $token = null)
+    public function setToken(TokenInterface $token = null): void
     {
         if (1 > \func_num_args()) {
@@ -64,5 +64,5 @@ class TokenStorage implements TokenStorageInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->setToken(null);
diff --git a/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorageInterface.php b/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorageInterface.php
index 5fdfa4e9ff..e9c2081934 100644
--- a/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorageInterface.php
+++ b/src/Symfony/Component/Security/Core/Authentication/Token/Storage/TokenStorageInterface.php
@@ -33,4 +33,4 @@ interface TokenStorageInterface
      * @return void
      */
-    public function setToken(?TokenInterface $token);
+    public function setToken(?TokenInterface $token): void;
 }
diff --git a/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php b/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php
index d9b80ae1eb..caf0cfc28c 100644
--- a/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php
+++ b/src/Symfony/Component/Security/Core/Authentication/Token/TokenInterface.php
@@ -55,5 +55,5 @@ interface TokenInterface
      * @throws \InvalidArgumentException
      */
-    public function setUser(UserInterface $user);
+    public function setUser(UserInterface $user): void;
 
     /**
@@ -62,5 +62,5 @@ interface TokenInterface
      * @return void
      */
-    public function eraseCredentials();
+    public function eraseCredentials(): void;
 
     public function getAttributes(): array;
@@ -71,5 +71,5 @@ interface TokenInterface
      * @return void
      */
-    public function setAttributes(array $attributes);
+    public function setAttributes(array $attributes): void;
 
     public function hasAttribute(string $name): bool;
@@ -83,5 +83,5 @@ interface TokenInterface
      * @return void
      */
-    public function setAttribute(string $name, mixed $value);
+    public function setAttribute(string $name, mixed $value): void;
 
     /**
diff --git a/src/Symfony/Component/Security/Core/Authorization/Voter/RoleHierarchyVoter.php b/src/Symfony/Component/Security/Core/Authorization/Voter/RoleHierarchyVoter.php
index c8db1485e0..34bf5a5763 100644
--- a/src/Symfony/Component/Security/Core/Authorization/Voter/RoleHierarchyVoter.php
+++ b/src/Symfony/Component/Security/Core/Authorization/Voter/RoleHierarchyVoter.php
@@ -35,5 +35,5 @@ class RoleHierarchyVoter extends RoleVoter
      * @return array
      */
-    protected function extractRoles(TokenInterface $token)
+    protected function extractRoles(TokenInterface $token): array
     {
         return $this->roleHierarchy->getReachableRoleNames($token->getRoleNames());
diff --git a/src/Symfony/Component/Security/Core/Authorization/Voter/RoleVoter.php b/src/Symfony/Component/Security/Core/Authorization/Voter/RoleVoter.php
index 70dddcfff9..15ac44eae8 100644
--- a/src/Symfony/Component/Security/Core/Authorization/Voter/RoleVoter.php
+++ b/src/Symfony/Component/Security/Core/Authorization/Voter/RoleVoter.php
@@ -62,5 +62,5 @@ class RoleVoter implements CacheableVoterInterface
      * @return array
      */
-    protected function extractRoles(TokenInterface $token)
+    protected function extractRoles(TokenInterface $token): array
     {
         return $token->getRoleNames();
diff --git a/src/Symfony/Component/Security/Core/Authorization/Voter/VoterInterface.php b/src/Symfony/Component/Security/Core/Authorization/Voter/VoterInterface.php
index 8eea57e769..ff4b6142d4 100644
--- a/src/Symfony/Component/Security/Core/Authorization/Voter/VoterInterface.php
+++ b/src/Symfony/Component/Security/Core/Authorization/Voter/VoterInterface.php
@@ -38,4 +38,4 @@ interface VoterInterface
      * @psalm-return self::ACCESS_* must be transformed into @return on Symfony 7
      */
-    public function vote(TokenInterface $token, mixed $subject, array $attributes);
+    public function vote(TokenInterface $token, mixed $subject, array $attributes): int;
 }
diff --git a/src/Symfony/Component/Security/Core/Event/AuthenticationEvent.php b/src/Symfony/Component/Security/Core/Event/AuthenticationEvent.php
index 054dd95728..e6704119b2 100644
--- a/src/Symfony/Component/Security/Core/Event/AuthenticationEvent.php
+++ b/src/Symfony/Component/Security/Core/Event/AuthenticationEvent.php
@@ -32,5 +32,5 @@ class AuthenticationEvent extends Event
      * @return TokenInterface
      */
-    public function getAuthenticationToken()
+    public function getAuthenticationToken(): TokenInterface
     {
         return $this->authenticationToken;
diff --git a/src/Symfony/Component/Security/Core/Exception/AccessDeniedException.php b/src/Symfony/Component/Security/Core/Exception/AccessDeniedException.php
index c95bae03b4..b16304c366 100644
--- a/src/Symfony/Component/Security/Core/Exception/AccessDeniedException.php
+++ b/src/Symfony/Component/Security/Core/Exception/AccessDeniedException.php
@@ -38,5 +38,5 @@ class AccessDeniedException extends RuntimeException
      * @return void
      */
-    public function setAttributes(array|string $attributes)
+    public function setAttributes(array|string $attributes): void
     {
         $this->attributes = (array) $attributes;
@@ -51,5 +51,5 @@ class AccessDeniedException extends RuntimeException
      * @return void
      */
-    public function setSubject(mixed $subject)
+    public function setSubject(mixed $subject): void
     {
         $this->subject = $subject;
diff --git a/src/Symfony/Component/Security/Core/Exception/AccountStatusException.php b/src/Symfony/Component/Security/Core/Exception/AccountStatusException.php
index 5b064929ed..c37e9140a6 100644
--- a/src/Symfony/Component/Security/Core/Exception/AccountStatusException.php
+++ b/src/Symfony/Component/Security/Core/Exception/AccountStatusException.php
@@ -36,5 +36,5 @@ abstract class AccountStatusException extends AuthenticationException
      * @return void
      */
-    public function setUser(UserInterface $user)
+    public function setUser(UserInterface $user): void
     {
         $this->user = $user;
diff --git a/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php b/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php
index adec6f8758..1349f0af1e 100644
--- a/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php
+++ b/src/Symfony/Component/Security/Core/Exception/AuthenticationException.php
@@ -43,5 +43,5 @@ class AuthenticationException extends RuntimeException
      * @return void
      */
-    public function setToken(TokenInterface $token)
+    public function setToken(TokenInterface $token): void
     {
         $this->token = $token;
@@ -94,5 +94,5 @@ class AuthenticationException extends RuntimeException
      * @return string
      */
-    public function getMessageKey()
+    public function getMessageKey(): string
     {
         return 'An authentication exception occurred.';
diff --git a/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAccountStatusException.php b/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAccountStatusException.php
index 829a22cd1b..2c72c15a41 100644
--- a/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAccountStatusException.php
+++ b/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAccountStatusException.php
@@ -42,5 +42,5 @@ class CustomUserMessageAccountStatusException extends AccountStatusException
      * @return void
      */
-    public function setSafeMessage(string $messageKey, array $messageData = [])
+    public function setSafeMessage(string $messageKey, array $messageData = []): void
     {
         $this->messageKey = $messageKey;
diff --git a/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAuthenticationException.php b/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAuthenticationException.php
index 40de92d29f..2e310539a6 100644
--- a/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAuthenticationException.php
+++ b/src/Symfony/Component/Security/Core/Exception/CustomUserMessageAuthenticationException.php
@@ -41,5 +41,5 @@ class CustomUserMessageAuthenticationException extends AuthenticationException
      * @return void
      */
-    public function setSafeMessage(string $messageKey, array $messageData = [])
+    public function setSafeMessage(string $messageKey, array $messageData = []): void
     {
         $this->messageKey = $messageKey;
diff --git a/src/Symfony/Component/Security/Core/Role/RoleHierarchy.php b/src/Symfony/Component/Security/Core/Role/RoleHierarchy.php
index da094d2bbf..f9b6e30c47 100644
--- a/src/Symfony/Component/Security/Core/Role/RoleHierarchy.php
+++ b/src/Symfony/Component/Security/Core/Role/RoleHierarchy.php
@@ -53,5 +53,5 @@ class RoleHierarchy implements RoleHierarchyInterface
      * @return void
      */
-    protected function buildRoleMap()
+    protected function buildRoleMap(): void
     {
         $this->map = [];
diff --git a/src/Symfony/Component/Security/Core/User/InMemoryUserChecker.php b/src/Symfony/Component/Security/Core/User/InMemoryUserChecker.php
index a493b00e79..377dcacc09 100644
--- a/src/Symfony/Component/Security/Core/User/InMemoryUserChecker.php
+++ b/src/Symfony/Component/Security/Core/User/InMemoryUserChecker.php
@@ -24,5 +24,5 @@ class InMemoryUserChecker implements UserCheckerInterface
      * @return void
      */
-    public function checkPreAuth(UserInterface $user)
+    public function checkPreAuth(UserInterface $user): void
     {
         if (!$user instanceof InMemoryUser) {
@@ -40,5 +40,5 @@ class InMemoryUserChecker implements UserCheckerInterface
      * @return void
      */
-    public function checkPostAuth(UserInterface $user)
+    public function checkPostAuth(UserInterface $user): void
     {
     }
diff --git a/src/Symfony/Component/Security/Core/User/InMemoryUserProvider.php b/src/Symfony/Component/Security/Core/User/InMemoryUserProvider.php
index e0aef90a14..651578d1f1 100644
--- a/src/Symfony/Component/Security/Core/User/InMemoryUserProvider.php
+++ b/src/Symfony/Component/Security/Core/User/InMemoryUserProvider.php
@@ -55,5 +55,5 @@ class InMemoryUserProvider implements UserProviderInterface
      * @throws \LogicException
      */
-    public function createUser(UserInterface $user)
+    public function createUser(UserInterface $user): void
     {
         if (!$user instanceof InMemoryUser) {
@@ -100,5 +100,5 @@ class InMemoryUserProvider implements UserProviderInterface
      * @throws UserNotFoundException if user whose given username does not exist
      */
-    private function getUser(string $username): UserInterface
+    private function getUser(string $username): InMemoryUser
     {
         if (!isset($this->users[strtolower($username)])) {
diff --git a/src/Symfony/Component/Security/Core/User/UserCheckerInterface.php b/src/Symfony/Component/Security/Core/User/UserCheckerInterface.php
index 91f21c71d0..95e818392e 100644
--- a/src/Symfony/Component/Security/Core/User/UserCheckerInterface.php
+++ b/src/Symfony/Component/Security/Core/User/UserCheckerInterface.php
@@ -31,5 +31,5 @@ interface UserCheckerInterface
      * @throws AccountStatusException
      */
-    public function checkPreAuth(UserInterface $user);
+    public function checkPreAuth(UserInterface $user): void;
 
     /**
@@ -40,4 +40,4 @@ interface UserCheckerInterface
      * @throws AccountStatusException
      */
-    public function checkPostAuth(UserInterface $user);
+    public function checkPostAuth(UserInterface $user): void;
 }
diff --git a/src/Symfony/Component/Security/Core/User/UserInterface.php b/src/Symfony/Component/Security/Core/User/UserInterface.php
index ef22340a63..d0b1589d97 100644
--- a/src/Symfony/Component/Security/Core/User/UserInterface.php
+++ b/src/Symfony/Component/Security/Core/User/UserInterface.php
@@ -55,5 +55,5 @@ interface UserInterface
      * @return void
      */
-    public function eraseCredentials();
+    public function eraseCredentials(): void;
 
     /**
diff --git a/src/Symfony/Component/Security/Core/User/UserProviderInterface.php b/src/Symfony/Component/Security/Core/User/UserProviderInterface.php
index ec90d413fa..9f1401aa91 100644
--- a/src/Symfony/Component/Security/Core/User/UserProviderInterface.php
+++ b/src/Symfony/Component/Security/Core/User/UserProviderInterface.php
@@ -45,5 +45,5 @@ interface UserProviderInterface
      * @throws UserNotFoundException    if the user is not found
      */
-    public function refreshUser(UserInterface $user);
+    public function refreshUser(UserInterface $user): UserInterface;
 
     /**
@@ -52,5 +52,5 @@ interface UserProviderInterface
      * @return bool
      */
-    public function supportsClass(string $class);
+    public function supportsClass(string $class): bool;
 
     /**
diff --git a/src/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php b/src/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php
index 41670b27e0..cb36ae79c6 100644
--- a/src/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php
+++ b/src/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php
@@ -35,5 +35,5 @@ class UserPasswordValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $password, Constraint $constraint)
+    public function validate(mixed $password, Constraint $constraint): void
     {
         if (!$constraint instanceof UserPassword) {
diff --git a/src/Symfony/Component/Security/Csrf/TokenStorage/ClearableTokenStorageInterface.php b/src/Symfony/Component/Security/Csrf/TokenStorage/ClearableTokenStorageInterface.php
index 185c4a7e33..4d343f24c5 100644
--- a/src/Symfony/Component/Security/Csrf/TokenStorage/ClearableTokenStorageInterface.php
+++ b/src/Symfony/Component/Security/Csrf/TokenStorage/ClearableTokenStorageInterface.php
@@ -22,4 +22,4 @@ interface ClearableTokenStorageInterface extends TokenStorageInterface
      * @return void
      */
-    public function clear();
+    public function clear(): void;
 }
diff --git a/src/Symfony/Component/Security/Csrf/TokenStorage/NativeSessionTokenStorage.php b/src/Symfony/Component/Security/Csrf/TokenStorage/NativeSessionTokenStorage.php
index 7de8b52969..97e61d84da 100644
--- a/src/Symfony/Component/Security/Csrf/TokenStorage/NativeSessionTokenStorage.php
+++ b/src/Symfony/Component/Security/Csrf/TokenStorage/NativeSessionTokenStorage.php
@@ -55,5 +55,5 @@ class NativeSessionTokenStorage implements ClearableTokenStorageInterface
      * @return void
      */
-    public function setToken(string $tokenId, #[\SensitiveParameter] string $token)
+    public function setToken(string $tokenId, #[\SensitiveParameter] string $token): void
     {
         if (!$this->sessionStarted) {
@@ -97,5 +97,5 @@ class NativeSessionTokenStorage implements ClearableTokenStorageInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         unset($_SESSION[$this->namespace]);
diff --git a/src/Symfony/Component/Security/Csrf/TokenStorage/SessionTokenStorage.php b/src/Symfony/Component/Security/Csrf/TokenStorage/SessionTokenStorage.php
index 4b3c3e56a5..7937512868 100644
--- a/src/Symfony/Component/Security/Csrf/TokenStorage/SessionTokenStorage.php
+++ b/src/Symfony/Component/Security/Csrf/TokenStorage/SessionTokenStorage.php
@@ -60,5 +60,5 @@ class SessionTokenStorage implements ClearableTokenStorageInterface
      * @return void
      */
-    public function setToken(string $tokenId, #[\SensitiveParameter] string $token)
+    public function setToken(string $tokenId, #[\SensitiveParameter] string $token): void
     {
         $session = $this->getSession();
@@ -93,5 +93,5 @@ class SessionTokenStorage implements ClearableTokenStorageInterface
      * @return void
      */
-    public function clear()
+    public function clear(): void
     {
         $session = $this->getSession();
diff --git a/src/Symfony/Component/Security/Csrf/TokenStorage/TokenStorageInterface.php b/src/Symfony/Component/Security/Csrf/TokenStorage/TokenStorageInterface.php
index 32c71921bd..060a2505d8 100644
--- a/src/Symfony/Component/Security/Csrf/TokenStorage/TokenStorageInterface.php
+++ b/src/Symfony/Component/Security/Csrf/TokenStorage/TokenStorageInterface.php
@@ -31,5 +31,5 @@ interface TokenStorageInterface
      * @return void
      */
-    public function setToken(string $tokenId, #[\SensitiveParameter] string $token);
+    public function setToken(string $tokenId, #[\SensitiveParameter] string $token): void;
 
     /**
diff --git a/src/Symfony/Component/Security/Http/AccessMap.php b/src/Symfony/Component/Security/Http/AccessMap.php
index 6c05dffa21..4b60abcb25 100644
--- a/src/Symfony/Component/Security/Http/AccessMap.php
+++ b/src/Symfony/Component/Security/Http/AccessMap.php
@@ -31,5 +31,5 @@ class AccessMap implements AccessMapInterface
      * @return void
      */
-    public function add(RequestMatcherInterface $requestMatcher, array $attributes = [], string $channel = null)
+    public function add(RequestMatcherInterface $requestMatcher, array $attributes = [], string $channel = null): void
     {
         $this->map[] = [$requestMatcher, $attributes, $channel];
diff --git a/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationFailureHandler.php b/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationFailureHandler.php
index c6ffa45279..734e29fdf5 100644
--- a/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationFailureHandler.php
+++ b/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationFailureHandler.php
@@ -63,5 +63,5 @@ class DefaultAuthenticationFailureHandler implements AuthenticationFailureHandle
      * @return void
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         $this->options = array_merge($this->defaultOptions, $options);
diff --git a/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationSuccessHandler.php b/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationSuccessHandler.php
index cb7c23b9c8..afa54c74ea 100644
--- a/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationSuccessHandler.php
+++ b/src/Symfony/Component/Security/Http/Authentication/DefaultAuthenticationSuccessHandler.php
@@ -69,5 +69,5 @@ class DefaultAuthenticationSuccessHandler implements AuthenticationSuccessHandle
      * @return void
      */
-    public function setOptions(array $options)
+    public function setOptions(array $options): void
     {
         $this->options = array_merge($this->defaultOptions, $options);
diff --git a/src/Symfony/Component/Security/Http/Authenticator/AccessTokenAuthenticator.php b/src/Symfony/Component/Security/Http/Authenticator/AccessTokenAuthenticator.php
index c925e00050..95d5bd4321 100644
--- a/src/Symfony/Component/Security/Http/Authenticator/AccessTokenAuthenticator.php
+++ b/src/Symfony/Component/Security/Http/Authenticator/AccessTokenAuthenticator.php
@@ -99,5 +99,5 @@ class AccessTokenAuthenticator implements AuthenticatorInterface
      * @return void
      */
-    public function setTranslator(?TranslatorInterface $translator)
+    public function setTranslator(?TranslatorInterface $translator): void
     {
         $this->translator = $translator;
diff --git a/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php b/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php
index 91271d14a3..100c2fb549 100644
--- a/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php
+++ b/src/Symfony/Component/Security/Http/EntryPoint/AuthenticationEntryPointInterface.php
@@ -43,4 +43,4 @@ interface AuthenticationEntryPointInterface
      * @return Response
      */
-    public function start(Request $request, AuthenticationException $authException = null);
+    public function start(Request $request, AuthenticationException $authException = null): Response;
 }
diff --git a/src/Symfony/Component/Security/Http/Event/LoginFailureEvent.php b/src/Symfony/Component/Security/Http/Event/LoginFailureEvent.php
index 3b7c5086f2..97fb99f0b5 100644
--- a/src/Symfony/Component/Security/Http/Event/LoginFailureEvent.php
+++ b/src/Symfony/Component/Security/Http/Event/LoginFailureEvent.php
@@ -70,5 +70,5 @@ class LoginFailureEvent extends Event
      * @return void
      */
-    public function setResponse(?Response $response)
+    public function setResponse(?Response $response): void
     {
         $this->response = $response;
diff --git a/src/Symfony/Component/Security/Http/EventListener/IsGrantedAttributeListener.php b/src/Symfony/Component/Security/Http/EventListener/IsGrantedAttributeListener.php
index 513b6494e5..c0211b6e39 100644
--- a/src/Symfony/Component/Security/Http/EventListener/IsGrantedAttributeListener.php
+++ b/src/Symfony/Component/Security/Http/EventListener/IsGrantedAttributeListener.php
@@ -40,5 +40,5 @@ class IsGrantedAttributeListener implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelControllerArguments(ControllerArgumentsEvent $event)
+    public function onKernelControllerArguments(ControllerArgumentsEvent $event): void
     {
         /** @var IsGranted[] $attributes */
diff --git a/src/Symfony/Component/Security/Http/Firewall.php b/src/Symfony/Component/Security/Http/Firewall.php
index f2f86a5dfa..bd47629587 100644
--- a/src/Symfony/Component/Security/Http/Firewall.php
+++ b/src/Symfony/Component/Security/Http/Firewall.php
@@ -51,5 +51,5 @@ class Firewall implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelRequest(RequestEvent $event)
+    public function onKernelRequest(RequestEvent $event): void
     {
         if (!$event->isMainRequest()) {
@@ -99,5 +99,5 @@ class Firewall implements EventSubscriberInterface
      * @return void
      */
-    public function onKernelFinishRequest(FinishRequestEvent $event)
+    public function onKernelFinishRequest(FinishRequestEvent $event): void
     {
         $request = $event->getRequest();
@@ -112,5 +112,5 @@ class Firewall implements EventSubscriberInterface
      * @return array
      */
-    public static function getSubscribedEvents()
+    public static function getSubscribedEvents(): array
     {
         return [
@@ -123,5 +123,5 @@ class Firewall implements EventSubscriberInterface
      * @return void
      */
-    protected function callListeners(RequestEvent $event, iterable $listeners)
+    protected function callListeners(RequestEvent $event, iterable $listeners): void
     {
         foreach ($listeners as $listener) {
diff --git a/src/Symfony/Component/Security/Http/Firewall/FirewallListenerInterface.php b/src/Symfony/Component/Security/Http/Firewall/FirewallListenerInterface.php
index be200c0d12..69483f8f1d 100644
--- a/src/Symfony/Component/Security/Http/Firewall/FirewallListenerInterface.php
+++ b/src/Symfony/Component/Security/Http/Firewall/FirewallListenerInterface.php
@@ -36,5 +36,5 @@ interface FirewallListenerInterface
      * @return void
      */
-    public function authenticate(RequestEvent $event);
+    public function authenticate(RequestEvent $event): void;
 
     /**
diff --git a/src/Symfony/Component/Security/Http/FirewallMap.php b/src/Symfony/Component/Security/Http/FirewallMap.php
index 36c8c67e38..32a83871e5 100644
--- a/src/Symfony/Component/Security/Http/FirewallMap.php
+++ b/src/Symfony/Component/Security/Http/FirewallMap.php
@@ -35,5 +35,5 @@ class FirewallMap implements FirewallMapInterface
      * @return void
      */
-    public function add(RequestMatcherInterface $requestMatcher = null, array $listeners = [], ExceptionListener $exceptionListener = null, LogoutListener $logoutListener = null)
+    public function add(RequestMatcherInterface $requestMatcher = null, array $listeners = [], ExceptionListener $exceptionListener = null, LogoutListener $logoutListener = null): void
     {
         $this->map[] = [$requestMatcher, $listeners, $exceptionListener, $logoutListener];
diff --git a/src/Symfony/Component/Security/Http/FirewallMapInterface.php b/src/Symfony/Component/Security/Http/FirewallMapInterface.php
index 480ea8ad6b..fa43d6a6e9 100644
--- a/src/Symfony/Component/Security/Http/FirewallMapInterface.php
+++ b/src/Symfony/Component/Security/Http/FirewallMapInterface.php
@@ -38,4 +38,4 @@ interface FirewallMapInterface
      * @return array{iterable<mixed, callable>, ExceptionListener, LogoutListener}
      */
-    public function getListeners(Request $request);
+    public function getListeners(Request $request): array;
 }
diff --git a/src/Symfony/Component/Security/Http/Logout/LogoutUrlGenerator.php b/src/Symfony/Component/Security/Http/Logout/LogoutUrlGenerator.php
index 54f52194c7..72537120f9 100644
--- a/src/Symfony/Component/Security/Http/Logout/LogoutUrlGenerator.php
+++ b/src/Symfony/Component/Security/Http/Logout/LogoutUrlGenerator.php
@@ -50,5 +50,5 @@ class LogoutUrlGenerator
      * @return void
      */
-    public function registerListener(string $key, string $logoutPath, ?string $csrfTokenId, ?string $csrfParameter, CsrfTokenManagerInterface $csrfTokenManager = null, string $context = null)
+    public function registerListener(string $key, string $logoutPath, ?string $csrfTokenId, ?string $csrfParameter, CsrfTokenManagerInterface $csrfTokenManager = null, string $context = null): void
     {
         $this->listeners[$key] = [$logoutPath, $csrfTokenId, $csrfParameter, $csrfTokenManager, $context];
@@ -74,5 +74,5 @@ class LogoutUrlGenerator
      * @return void
      */
-    public function setCurrentFirewall(?string $key, string $context = null)
+    public function setCurrentFirewall(?string $key, string $context = null): void
     {
         $this->currentFirewallName = $key;
diff --git a/src/Symfony/Component/Security/Http/RememberMe/AbstractRememberMeHandler.php b/src/Symfony/Component/Security/Http/RememberMe/AbstractRememberMeHandler.php
index 6c75833c39..5282b7c158 100644
--- a/src/Symfony/Component/Security/Http/RememberMe/AbstractRememberMeHandler.php
+++ b/src/Symfony/Component/Security/Http/RememberMe/AbstractRememberMeHandler.php
@@ -91,5 +91,5 @@ abstract class AbstractRememberMeHandler implements RememberMeHandlerInterface
      * @return void
      */
-    protected function createCookie(?RememberMeDetails $rememberMeDetails)
+    protected function createCookie(?RememberMeDetails $rememberMeDetails): void
     {
         $request = $this->requestStack->getMainRequest();
diff --git a/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategy.php b/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategy.php
index 63ede6193a..a26912201b 100644
--- a/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategy.php
+++ b/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategy.php
@@ -47,5 +47,5 @@ class SessionAuthenticationStrategy implements SessionAuthenticationStrategyInte
      * @return void
      */
-    public function onAuthentication(Request $request, TokenInterface $token)
+    public function onAuthentication(Request $request, TokenInterface $token): void
     {
         switch ($this->strategy) {
diff --git a/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategyInterface.php b/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategyInterface.php
index 880a4eaa22..dd3da4ca7b 100644
--- a/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategyInterface.php
+++ b/src/Symfony/Component/Security/Http/Session/SessionAuthenticationStrategyInterface.php
@@ -33,4 +33,4 @@ interface SessionAuthenticationStrategyInterface
      * @return void
      */
-    public function onAuthentication(Request $request, TokenInterface $token);
+    public function onAuthentication(Request $request, TokenInterface $token): void;
 }
diff --git a/src/Symfony/Component/Semaphore/PersistingStoreInterface.php b/src/Symfony/Component/Semaphore/PersistingStoreInterface.php
index a7e4774f8d..daf487422f 100644
--- a/src/Symfony/Component/Semaphore/PersistingStoreInterface.php
+++ b/src/Symfony/Component/Semaphore/PersistingStoreInterface.php
@@ -29,5 +29,5 @@ interface PersistingStoreInterface
      * @throws SemaphoreAcquiringException
      */
-    public function save(Key $key, float $ttlInSecond);
+    public function save(Key $key, float $ttlInSecond): void;
 
     /**
@@ -38,5 +38,5 @@ interface PersistingStoreInterface
      * @throws SemaphoreReleasingException
      */
-    public function delete(Key $key);
+    public function delete(Key $key): void;
 
     /**
@@ -52,4 +52,4 @@ interface PersistingStoreInterface
      * @throws SemaphoreExpiredException
      */
-    public function putOffExpiration(Key $key, float $ttlInSecond);
+    public function putOffExpiration(Key $key, float $ttlInSecond): void;
 }
diff --git a/src/Symfony/Component/Semaphore/SemaphoreInterface.php b/src/Symfony/Component/Semaphore/SemaphoreInterface.php
index 0f295a057d..7d803a9bc3 100644
--- a/src/Symfony/Component/Semaphore/SemaphoreInterface.php
+++ b/src/Symfony/Component/Semaphore/SemaphoreInterface.php
@@ -38,5 +38,5 @@ interface SemaphoreInterface
      * @throws SemaphoreExpiredException If the semaphore has expired
      */
-    public function refresh(float $ttlInSecond = null);
+    public function refresh(float $ttlInSecond = null): void;
 
     /**
@@ -52,5 +52,5 @@ interface SemaphoreInterface
      * @throws SemaphoreReleasingException If the semaphore cannot be released
      */
-    public function release();
+    public function release(): void;
 
     public function isExpired(): bool;
diff --git a/src/Symfony/Component/Semaphore/Store/RedisStore.php b/src/Symfony/Component/Semaphore/Store/RedisStore.php
index 0e0f551876..1ab8bc9577 100644
--- a/src/Symfony/Component/Semaphore/Store/RedisStore.php
+++ b/src/Symfony/Component/Semaphore/Store/RedisStore.php
@@ -35,5 +35,5 @@ class RedisStore implements PersistingStoreInterface
      * @return void
      */
-    public function save(Key $key, float $ttlInSecond)
+    public function save(Key $key, float $ttlInSecond): void
     {
         if (0 > $ttlInSecond) {
@@ -101,5 +101,5 @@ class RedisStore implements PersistingStoreInterface
      * @return void
      */
-    public function putOffExpiration(Key $key, float $ttlInSecond)
+    public function putOffExpiration(Key $key, float $ttlInSecond): void
     {
         if (0 > $ttlInSecond) {
@@ -146,5 +146,5 @@ class RedisStore implements PersistingStoreInterface
      * @return void
      */
-    public function delete(Key $key)
+    public function delete(Key $key): void
     {
         $script = '
diff --git a/src/Symfony/Component/Serializer/Annotation/MaxDepth.php b/src/Symfony/Component/Serializer/Annotation/MaxDepth.php
index 36afff6a74..e371533b95 100644
--- a/src/Symfony/Component/Serializer/Annotation/MaxDepth.php
+++ b/src/Symfony/Component/Serializer/Annotation/MaxDepth.php
@@ -36,5 +36,5 @@ class MaxDepth
      * @return int
      */
-    public function getMaxDepth()
+    public function getMaxDepth(): int
     {
         return $this->maxDepth;
diff --git a/src/Symfony/Component/Serializer/DependencyInjection/SerializerPass.php b/src/Symfony/Component/Serializer/DependencyInjection/SerializerPass.php
index d0b0deb48c..cab20b5120 100644
--- a/src/Symfony/Component/Serializer/DependencyInjection/SerializerPass.php
+++ b/src/Symfony/Component/Serializer/DependencyInjection/SerializerPass.php
@@ -35,5 +35,5 @@ class SerializerPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('serializer')) {
diff --git a/src/Symfony/Component/Serializer/Encoder/DecoderInterface.php b/src/Symfony/Component/Serializer/Encoder/DecoderInterface.php
index 84a84ad1f3..6f66b6d32a 100644
--- a/src/Symfony/Component/Serializer/Encoder/DecoderInterface.php
+++ b/src/Symfony/Component/Serializer/Encoder/DecoderInterface.php
@@ -35,5 +35,5 @@ interface DecoderInterface
      * @throws UnexpectedValueException
      */
-    public function decode(string $data, string $format, array $context = []);
+    public function decode(string $data, string $format, array $context = []): mixed;
 
     /**
@@ -44,4 +44,4 @@ interface DecoderInterface
      * @return bool
      */
-    public function supportsDecoding(string $format);
+    public function supportsDecoding(string $format): bool;
 }
diff --git a/src/Symfony/Component/Serializer/Exception/PartialDenormalizationException.php b/src/Symfony/Component/Serializer/Exception/PartialDenormalizationException.php
index b684fddb2f..ade2242791 100644
--- a/src/Symfony/Component/Serializer/Exception/PartialDenormalizationException.php
+++ b/src/Symfony/Component/Serializer/Exception/PartialDenormalizationException.php
@@ -29,5 +29,5 @@ class PartialDenormalizationException extends UnexpectedValueException
      * @return mixed
      */
-    public function getData()
+    public function getData(): mixed
     {
         return $this->data;
diff --git a/src/Symfony/Component/Serializer/Normalizer/AbstractNormalizer.php b/src/Symfony/Component/Serializer/Normalizer/AbstractNormalizer.php
index 079b1e7a9e..e3cfe43e67 100644
--- a/src/Symfony/Component/Serializer/Normalizer/AbstractNormalizer.php
+++ b/src/Symfony/Component/Serializer/Normalizer/AbstractNormalizer.php
@@ -221,5 +221,5 @@ abstract class AbstractNormalizer implements NormalizerInterface, DenormalizerIn
      * @throws LogicException if the 'allow_extra_attributes' context variable is false and no class metadata factory is provided
      */
-    protected function getAllowedAttributes(string|object $classOrObject, array $context, bool $attributesAsString = false)
+    protected function getAllowedAttributes(string|object $classOrObject, array $context, bool $attributesAsString = false): array|bool
     {
         $allowExtraAttributes = $context[self::ALLOW_EXTRA_ATTRIBUTES] ?? $this->defaultContext[self::ALLOW_EXTRA_ATTRIBUTES];
@@ -271,5 +271,5 @@ abstract class AbstractNormalizer implements NormalizerInterface, DenormalizerIn
      * @return bool
      */
-    protected function isAllowedAttribute(object|string $classOrObject, string $attribute, string $format = null, array $context = [])
+    protected function isAllowedAttribute(object|string $classOrObject, string $attribute, string $format = null, array $context = []): bool
     {
         $ignoredAttributes = $context[self::IGNORED_ATTRIBUTES] ?? $this->defaultContext[self::IGNORED_ATTRIBUTES];
@@ -322,5 +322,5 @@ abstract class AbstractNormalizer implements NormalizerInterface, DenormalizerIn
      * @throws MissingConstructorArgumentsException
      */
-    protected function instantiateObject(array &$data, string $class, array &$context, \ReflectionClass $reflectionClass, array|bool $allowedAttributes, string $format = null)
+    protected function instantiateObject(array &$data, string $class, array &$context, \ReflectionClass $reflectionClass, array|bool $allowedAttributes, string $format = null): object
     {
         if (null !== $object = $this->extractObjectToPopulate($class, $context, self::OBJECT_TO_POPULATE)) {
diff --git a/src/Symfony/Component/Serializer/Normalizer/AbstractObjectNormalizer.php b/src/Symfony/Component/Serializer/Normalizer/AbstractObjectNormalizer.php
index a741bd3d9f..2896ccaef3 100644
--- a/src/Symfony/Component/Serializer/Normalizer/AbstractObjectNormalizer.php
+++ b/src/Symfony/Component/Serializer/Normalizer/AbstractObjectNormalizer.php
@@ -143,5 +143,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return bool
      */
-    public function supportsNormalization(mixed $data, string $format = null /* , array $context = [] */)
+    public function supportsNormalization(mixed $data, string $format = null /* , array $context = [] */): bool
     {
         return \is_object($data) && !$data instanceof \Traversable;
@@ -151,5 +151,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return array|string|int|float|bool|\ArrayObject|null
      */
-    public function normalize(mixed $object, string $format = null, array $context = [])
+    public function normalize(mixed $object, string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
     {
         if (!isset($context['cache_key'])) {
@@ -235,5 +235,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return object
      */
-    protected function instantiateObject(array &$data, string $class, array &$context, \ReflectionClass $reflectionClass, array|bool $allowedAttributes, string $format = null)
+    protected function instantiateObject(array &$data, string $class, array &$context, \ReflectionClass $reflectionClass, array|bool $allowedAttributes, string $format = null): object
     {
         if ($class !== $mappedClass = $this->getMappedClass($data, $class, $context)) {
@@ -286,5 +286,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return string[]
      */
-    abstract protected function extractAttributes(object $object, string $format = null, array $context = []);
+    abstract protected function extractAttributes(object $object, string $format = null, array $context = []): array;
 
     /**
@@ -293,5 +293,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return mixed
      */
-    abstract protected function getAttributeValue(object $object, string $attribute, string $format = null, array $context = []);
+    abstract protected function getAttributeValue(object $object, string $attribute, string $format = null, array $context = []): mixed;
 
     /**
@@ -300,5 +300,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return bool
      */
-    public function supportsDenormalization(mixed $data, string $type, string $format = null /* , array $context = [] */)
+    public function supportsDenormalization(mixed $data, string $type, string $format = null /* , array $context = [] */): bool
     {
         return class_exists($type) || (interface_exists($type, false) && null !== $this->classDiscriminatorResolver?->getMappingForClass($type));
@@ -308,5 +308,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return mixed
      */
-    public function denormalize(mixed $data, string $type, string $format = null, array $context = [])
+    public function denormalize(mixed $data, string $type, string $format = null, array $context = []): mixed
     {
         if (!isset($context['cache_key'])) {
@@ -414,5 +414,5 @@ abstract class AbstractObjectNormalizer extends AbstractNormalizer
      * @return void
      */
-    abstract protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = []);
+    abstract protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = []): void;
 
     /**
diff --git a/src/Symfony/Component/Serializer/Normalizer/DenormalizableInterface.php b/src/Symfony/Component/Serializer/Normalizer/DenormalizableInterface.php
index 503f3cb518..78f48e086d 100644
--- a/src/Symfony/Component/Serializer/Normalizer/DenormalizableInterface.php
+++ b/src/Symfony/Component/Serializer/Normalizer/DenormalizableInterface.php
@@ -37,4 +37,4 @@ interface DenormalizableInterface
      * @return void
      */
-    public function denormalize(DenormalizerInterface $denormalizer, array|string|int|float|bool $data, string $format = null, array $context = []);
+    public function denormalize(DenormalizerInterface $denormalizer, array|string|int|float|bool $data, string $format = null, array $context = []): void;
 }
diff --git a/src/Symfony/Component/Serializer/Normalizer/DenormalizerAwareInterface.php b/src/Symfony/Component/Serializer/Normalizer/DenormalizerAwareInterface.php
index 48e8c3fb54..a71c3ea476 100644
--- a/src/Symfony/Component/Serializer/Normalizer/DenormalizerAwareInterface.php
+++ b/src/Symfony/Component/Serializer/Normalizer/DenormalizerAwareInterface.php
@@ -22,4 +22,4 @@ interface DenormalizerAwareInterface
      * @return void
      */
-    public function setDenormalizer(DenormalizerInterface $denormalizer);
+    public function setDenormalizer(DenormalizerInterface $denormalizer): void;
 }
diff --git a/src/Symfony/Component/Serializer/Normalizer/DenormalizerInterface.php b/src/Symfony/Component/Serializer/Normalizer/DenormalizerInterface.php
index 4edb70096d..8c844785db 100644
--- a/src/Symfony/Component/Serializer/Normalizer/DenormalizerInterface.php
+++ b/src/Symfony/Component/Serializer/Normalizer/DenormalizerInterface.php
@@ -47,5 +47,5 @@ interface DenormalizerInterface
      * @throws ExceptionInterface       Occurs for all the other cases of errors
      */
-    public function denormalize(mixed $data, string $type, string $format = null, array $context = []);
+    public function denormalize(mixed $data, string $type, string $format = null, array $context = []): mixed;
 
     /**
@@ -59,5 +59,5 @@ interface DenormalizerInterface
      * @return bool
      */
-    public function supportsDenormalization(mixed $data, string $type, string $format = null /* , array $context = [] */);
+    public function supportsDenormalization(mixed $data, string $type, string $format = null /* , array $context = [] */): bool;
 
     /**
diff --git a/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php b/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php
index 063d34ea59..fb10337d35 100644
--- a/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php
+++ b/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php
@@ -147,5 +147,5 @@ class GetSetMethodNormalizer extends AbstractObjectNormalizer
      * @return void
      */
-    protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = [])
+    protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = []): void
     {
         $setter = 'set'.ucfirst($attribute);
diff --git a/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareInterface.php b/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareInterface.php
index 5f3deaa018..99de716dfb 100644
--- a/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareInterface.php
+++ b/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareInterface.php
@@ -22,4 +22,4 @@ interface NormalizerAwareInterface
      * @return void
      */
-    public function setNormalizer(NormalizerInterface $normalizer);
+    public function setNormalizer(NormalizerInterface $normalizer): void;
 }
diff --git a/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareTrait.php b/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareTrait.php
index 40a4fa0e8c..a1e2749aae 100644
--- a/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareTrait.php
+++ b/src/Symfony/Component/Serializer/Normalizer/NormalizerAwareTrait.php
@@ -25,5 +25,5 @@ trait NormalizerAwareTrait
      * @return void
      */
-    public function setNormalizer(NormalizerInterface $normalizer)
+    public function setNormalizer(NormalizerInterface $normalizer): void
     {
         $this->normalizer = $normalizer;
diff --git a/src/Symfony/Component/Serializer/Normalizer/NormalizerInterface.php b/src/Symfony/Component/Serializer/Normalizer/NormalizerInterface.php
index 40779de316..105cf99b06 100644
--- a/src/Symfony/Component/Serializer/Normalizer/NormalizerInterface.php
+++ b/src/Symfony/Component/Serializer/Normalizer/NormalizerInterface.php
@@ -39,5 +39,5 @@ interface NormalizerInterface
      * @throws ExceptionInterface         Occurs for all the other cases of errors
      */
-    public function normalize(mixed $object, string $format = null, array $context = []);
+    public function normalize(mixed $object, string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null;
 
     /**
@@ -50,5 +50,5 @@ interface NormalizerInterface
      * @return bool
      */
-    public function supportsNormalization(mixed $data, string $format = null /* , array $context = [] */);
+    public function supportsNormalization(mixed $data, string $format = null /* , array $context = [] */): bool;
 
     /**
diff --git a/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php b/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php
index 357c36426e..f4423f47f4 100644
--- a/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php
+++ b/src/Symfony/Component/Serializer/Normalizer/ObjectNormalizer.php
@@ -146,5 +146,5 @@ class ObjectNormalizer extends AbstractObjectNormalizer
      * @return void
      */
-    protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = [])
+    protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = []): void
     {
         try {
diff --git a/src/Symfony/Component/Serializer/Normalizer/PropertyNormalizer.php b/src/Symfony/Component/Serializer/Normalizer/PropertyNormalizer.php
index ec12db9bb2..d3b7f036a8 100644
--- a/src/Symfony/Component/Serializer/Normalizer/PropertyNormalizer.php
+++ b/src/Symfony/Component/Serializer/Normalizer/PropertyNormalizer.php
@@ -187,5 +187,5 @@ class PropertyNormalizer extends AbstractObjectNormalizer
      * @return void
      */
-    protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = [])
+    protected function setAttributeValue(object $object, string $attribute, mixed $value, string $format = null, array $context = []): void
     {
         try {
diff --git a/src/Symfony/Component/Serializer/SerializerAwareInterface.php b/src/Symfony/Component/Serializer/SerializerAwareInterface.php
index 4919436d94..24ff404aa4 100644
--- a/src/Symfony/Component/Serializer/SerializerAwareInterface.php
+++ b/src/Symfony/Component/Serializer/SerializerAwareInterface.php
@@ -22,4 +22,4 @@ interface SerializerAwareInterface
      * @return void
      */
-    public function setSerializer(SerializerInterface $serializer);
+    public function setSerializer(SerializerInterface $serializer): void;
 }
diff --git a/src/Symfony/Component/Serializer/SerializerAwareTrait.php b/src/Symfony/Component/Serializer/SerializerAwareTrait.php
index 1835568745..2b98fc11d6 100644
--- a/src/Symfony/Component/Serializer/SerializerAwareTrait.php
+++ b/src/Symfony/Component/Serializer/SerializerAwareTrait.php
@@ -25,5 +25,5 @@ trait SerializerAwareTrait
      * @return void
      */
-    public function setSerializer(SerializerInterface $serializer)
+    public function setSerializer(SerializerInterface $serializer): void
     {
         $this->serializer = $serializer;
diff --git a/src/Symfony/Component/Serializer/Tests/Normalizer/AbstractObjectNormalizerTest.php b/src/Symfony/Component/Serializer/Tests/Normalizer/AbstractObjectNormalizerTest.php
index ed5dcb97dd..7e0b71cd3b 100644
--- a/src/Symfony/Component/Serializer/Tests/Normalizer/AbstractObjectNormalizerTest.php
+++ b/src/Symfony/Component/Serializer/Tests/Normalizer/AbstractObjectNormalizerTest.php
@@ -686,5 +686,5 @@ class AbstractObjectNormalizerDummy extends AbstractObjectNormalizer
     }
 
-    protected function setAttributeValue(object $object, string $attribute, $value, string $format = null, array $context = [])
+    protected function setAttributeValue(object $object, string $attribute, $value, string $format = null, array $context = []): void
     {
         $object->$attribute = $value;
@@ -886,5 +886,5 @@ class AbstractObjectNormalizerWithMetadata extends AbstractObjectNormalizer
     }
 
-    protected function setAttributeValue(object $object, string $attribute, $value, string $format = null, array $context = [])
+    protected function setAttributeValue(object $object, string $attribute, $value, string $format = null, array $context = []): void
     {
         if (property_exists($object, $attribute)) {
@@ -1007,5 +1007,5 @@ class AbstractObjectNormalizerCollectionDummy extends AbstractObjectNormalizer
     }
 
-    protected function setAttributeValue(object $object, string $attribute, $value, string $format = null, array $context = [])
+    protected function setAttributeValue(object $object, string $attribute, $value, string $format = null, array $context = []): void
     {
         $object->$attribute = $value;
@@ -1064,5 +1064,5 @@ class ArrayDenormalizerDummy implements DenormalizerInterface, SerializerAwareIn
     }
 
-    public function setSerializer(SerializerInterface $serializer)
+    public function setSerializer(SerializerInterface $serializer): void
     {
         $this->serializer = $serializer;
diff --git a/src/Symfony/Component/Stopwatch/Stopwatch.php b/src/Symfony/Component/Stopwatch/Stopwatch.php
index 139d6651d5..603e9bb980 100644
--- a/src/Symfony/Component/Stopwatch/Stopwatch.php
+++ b/src/Symfony/Component/Stopwatch/Stopwatch.php
@@ -62,5 +62,5 @@ class Stopwatch implements ResetInterface
      * @throws \LogicException When the section to re-open is not reachable
      */
-    public function openSection(string $id = null)
+    public function openSection(string $id = null): void
     {
         $current = end($this->activeSections);
@@ -86,5 +86,5 @@ class Stopwatch implements ResetInterface
      * @throws \LogicException When there's no started section to be stopped
      */
-    public function stopSection(string $id)
+    public function stopSection(string $id): void
     {
         $this->stop('__section__');
@@ -153,5 +153,5 @@ class Stopwatch implements ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->sections = $this->activeSections = ['__root__' => new Section(null, $this->morePrecision)];
diff --git a/src/Symfony/Component/Stopwatch/StopwatchEvent.php b/src/Symfony/Component/Stopwatch/StopwatchEvent.php
index 3bca2fd610..ff014a33b2 100644
--- a/src/Symfony/Component/Stopwatch/StopwatchEvent.php
+++ b/src/Symfony/Component/Stopwatch/StopwatchEvent.php
@@ -120,5 +120,5 @@ class StopwatchEvent
      * @return void
      */
-    public function ensureStopped()
+    public function ensureStopped(): void
     {
         while (\count($this->started)) {
diff --git a/src/Symfony/Component/String/Slugger/AsciiSlugger.php b/src/Symfony/Component/String/Slugger/AsciiSlugger.php
index 6e550c61cf..5cb704fae0 100644
--- a/src/Symfony/Component/String/Slugger/AsciiSlugger.php
+++ b/src/Symfony/Component/String/Slugger/AsciiSlugger.php
@@ -78,5 +78,5 @@ class AsciiSlugger implements SluggerInterface, LocaleAwareInterface
      * @return void
      */
-    public function setLocale(string $locale)
+    public function setLocale(string $locale): void
     {
         $this->defaultLocale = $locale;
diff --git a/src/Symfony/Component/Templating/DelegatingEngine.php b/src/Symfony/Component/Templating/DelegatingEngine.php
index bbe500549a..a1cce0e692 100644
--- a/src/Symfony/Component/Templating/DelegatingEngine.php
+++ b/src/Symfony/Component/Templating/DelegatingEngine.php
@@ -42,5 +42,5 @@ class DelegatingEngine implements EngineInterface, StreamingEngineInterface
      * @return void
      */
-    public function stream(string|TemplateReferenceInterface $name, array $parameters = [])
+    public function stream(string|TemplateReferenceInterface $name, array $parameters = []): void
     {
         $engine = $this->getEngine($name);
@@ -60,5 +60,5 @@ class DelegatingEngine implements EngineInterface, StreamingEngineInterface
      * @return void
      */
-    public function addEngine(EngineInterface $engine)
+    public function addEngine(EngineInterface $engine): void
     {
         $this->engines[] = $engine;
diff --git a/src/Symfony/Component/Templating/Helper/Helper.php b/src/Symfony/Component/Templating/Helper/Helper.php
index 537e8e584c..bf5c5aea70 100644
--- a/src/Symfony/Component/Templating/Helper/Helper.php
+++ b/src/Symfony/Component/Templating/Helper/Helper.php
@@ -29,5 +29,5 @@ abstract class Helper implements HelperInterface
      * @return void
      */
-    public function setCharset(string $charset)
+    public function setCharset(string $charset): void
     {
         $this->charset = $charset;
diff --git a/src/Symfony/Component/Templating/Helper/HelperInterface.php b/src/Symfony/Component/Templating/Helper/HelperInterface.php
index 8377f14467..f40e02ae77 100644
--- a/src/Symfony/Component/Templating/Helper/HelperInterface.php
+++ b/src/Symfony/Component/Templating/Helper/HelperInterface.php
@@ -24,5 +24,5 @@ interface HelperInterface
      * @return string
      */
-    public function getName();
+    public function getName(): string;
 
     /**
@@ -31,5 +31,5 @@ interface HelperInterface
      * @return void
      */
-    public function setCharset(string $charset);
+    public function setCharset(string $charset): void;
 
     /**
diff --git a/src/Symfony/Component/Templating/Helper/SlotsHelper.php b/src/Symfony/Component/Templating/Helper/SlotsHelper.php
index 358e5fc071..2a716108d2 100644
--- a/src/Symfony/Component/Templating/Helper/SlotsHelper.php
+++ b/src/Symfony/Component/Templating/Helper/SlotsHelper.php
@@ -32,5 +32,5 @@ class SlotsHelper extends Helper
      * @throws \InvalidArgumentException if a slot with the same name is already started
      */
-    public function start(string $name)
+    public function start(string $name): void
     {
         if (\in_array($name, $this->openSlots)) {
@@ -52,5 +52,5 @@ class SlotsHelper extends Helper
      * @throws \LogicException if no slot has been started
      */
-    public function stop()
+    public function stop(): void
     {
         if (!$this->openSlots) {
@@ -84,5 +84,5 @@ class SlotsHelper extends Helper
      * @return void
      */
-    public function set(string $name, string $content)
+    public function set(string $name, string $content): void
     {
         $this->slots[$name] = $content;
diff --git a/src/Symfony/Component/Templating/Loader/ChainLoader.php b/src/Symfony/Component/Templating/Loader/ChainLoader.php
index 936a75630b..784f3aa1c8 100644
--- a/src/Symfony/Component/Templating/Loader/ChainLoader.php
+++ b/src/Symfony/Component/Templating/Loader/ChainLoader.php
@@ -37,5 +37,5 @@ class ChainLoader extends Loader
      * @return void
      */
-    public function addLoader(LoaderInterface $loader)
+    public function addLoader(LoaderInterface $loader): void
     {
         $this->loaders[] = $loader;
diff --git a/src/Symfony/Component/Templating/Loader/Loader.php b/src/Symfony/Component/Templating/Loader/Loader.php
index 6df5cf2124..0adb2c9d44 100644
--- a/src/Symfony/Component/Templating/Loader/Loader.php
+++ b/src/Symfony/Component/Templating/Loader/Loader.php
@@ -31,5 +31,5 @@ abstract class Loader implements LoaderInterface
      * @return void
      */
-    public function setLogger(LoggerInterface $logger)
+    public function setLogger(LoggerInterface $logger): void
     {
         $this->logger = $logger;
diff --git a/src/Symfony/Component/Templating/PhpEngine.php b/src/Symfony/Component/Templating/PhpEngine.php
index 0b158be9f2..cc3209cc9e 100644
--- a/src/Symfony/Component/Templating/PhpEngine.php
+++ b/src/Symfony/Component/Templating/PhpEngine.php
@@ -198,5 +198,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function addHelpers(array $helpers)
+    public function addHelpers(array $helpers): void
     {
         foreach ($helpers as $alias => $helper) {
@@ -212,5 +212,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function setHelpers(array $helpers)
+    public function setHelpers(array $helpers): void
     {
         $this->helpers = [];
@@ -221,5 +221,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function set(HelperInterface $helper, string $alias = null)
+    public function set(HelperInterface $helper, string $alias = null): void
     {
         $this->helpers[$helper->getName()] = $helper;
@@ -258,5 +258,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function extend(string $template)
+    public function extend(string $template): void
     {
         $this->parents[$this->current] = $template;
@@ -290,5 +290,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function setCharset(string $charset)
+    public function setCharset(string $charset): void
     {
         if ('UTF8' === $charset = strtoupper($charset)) {
@@ -315,5 +315,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function setEscaper(string $context, callable $escaper)
+    public function setEscaper(string $context, callable $escaper): void
     {
         $this->escapers[$context] = $escaper;
@@ -338,5 +338,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    public function addGlobal(string $name, mixed $value)
+    public function addGlobal(string $name, mixed $value): void
     {
         $this->globals[$name] = $value;
@@ -370,5 +370,5 @@ class PhpEngine implements EngineInterface, \ArrayAccess
      * @return void
      */
-    protected function initializeEscapers()
+    protected function initializeEscapers(): void
     {
         $flags = \ENT_QUOTES | \ENT_SUBSTITUTE;
diff --git a/src/Symfony/Component/Templating/StreamingEngineInterface.php b/src/Symfony/Component/Templating/StreamingEngineInterface.php
index 539bcbce14..a172cd2ed4 100644
--- a/src/Symfony/Component/Templating/StreamingEngineInterface.php
+++ b/src/Symfony/Component/Templating/StreamingEngineInterface.php
@@ -29,4 +29,4 @@ interface StreamingEngineInterface
      * @return void
      */
-    public function stream(string|TemplateReferenceInterface $name, array $parameters = []);
+    public function stream(string|TemplateReferenceInterface $name, array $parameters = []): void;
 }
diff --git a/src/Symfony/Component/Translation/Catalogue/AbstractOperation.php b/src/Symfony/Component/Translation/Catalogue/AbstractOperation.php
index 65eea0bb9b..12e30f4cf5 100644
--- a/src/Symfony/Component/Translation/Catalogue/AbstractOperation.php
+++ b/src/Symfony/Component/Translation/Catalogue/AbstractOperation.php
@@ -187,4 +187,4 @@ abstract class AbstractOperation implements OperationInterface
      * @return void
      */
-    abstract protected function processDomain(string $domain);
+    abstract protected function processDomain(string $domain): void;
 }
diff --git a/src/Symfony/Component/Translation/Catalogue/MergeOperation.php b/src/Symfony/Component/Translation/Catalogue/MergeOperation.php
index 1b777a8435..804cc138fc 100644
--- a/src/Symfony/Component/Translation/Catalogue/MergeOperation.php
+++ b/src/Symfony/Component/Translation/Catalogue/MergeOperation.php
@@ -28,5 +28,5 @@ class MergeOperation extends AbstractOperation
      * @return void
      */
-    protected function processDomain(string $domain)
+    protected function processDomain(string $domain): void
     {
         $this->messages[$domain] = [
diff --git a/src/Symfony/Component/Translation/Catalogue/TargetOperation.php b/src/Symfony/Component/Translation/Catalogue/TargetOperation.php
index 2c0ec722ee..ff3a7c7c85 100644
--- a/src/Symfony/Component/Translation/Catalogue/TargetOperation.php
+++ b/src/Symfony/Component/Translation/Catalogue/TargetOperation.php
@@ -29,5 +29,5 @@ class TargetOperation extends AbstractOperation
      * @return void
      */
-    protected function processDomain(string $domain)
+    protected function processDomain(string $domain): void
     {
         $this->messages[$domain] = [
diff --git a/src/Symfony/Component/Translation/CatalogueMetadataAwareInterface.php b/src/Symfony/Component/Translation/CatalogueMetadataAwareInterface.php
index c845959f1a..faa5b0b34e 100644
--- a/src/Symfony/Component/Translation/CatalogueMetadataAwareInterface.php
+++ b/src/Symfony/Component/Translation/CatalogueMetadataAwareInterface.php
@@ -35,5 +35,5 @@ interface CatalogueMetadataAwareInterface
      * @return void
      */
-    public function setCatalogueMetadata(string $key, mixed $value, string $domain = 'messages');
+    public function setCatalogueMetadata(string $key, mixed $value, string $domain = 'messages'): void;
 
     /**
@@ -45,4 +45,4 @@ interface CatalogueMetadataAwareInterface
      * @return void
      */
-    public function deleteCatalogueMetadata(string $key = '', string $domain = 'messages');
+    public function deleteCatalogueMetadata(string $key = '', string $domain = 'messages'): void;
 }
diff --git a/src/Symfony/Component/Translation/Command/XliffLintCommand.php b/src/Symfony/Component/Translation/Command/XliffLintCommand.php
index ba68635db7..fd3b32a02a 100644
--- a/src/Symfony/Component/Translation/Command/XliffLintCommand.php
+++ b/src/Symfony/Component/Translation/Command/XliffLintCommand.php
@@ -54,5 +54,5 @@ class XliffLintCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Translation/DataCollectorTranslator.php b/src/Symfony/Component/Translation/DataCollectorTranslator.php
index 0e584daad1..b7bb0c070d 100644
--- a/src/Symfony/Component/Translation/DataCollectorTranslator.php
+++ b/src/Symfony/Component/Translation/DataCollectorTranslator.php
@@ -52,5 +52,5 @@ class DataCollectorTranslator implements TranslatorInterface, TranslatorBagInter
      * @return void
      */
-    public function setLocale(string $locale)
+    public function setLocale(string $locale): void
     {
         $this->translator->setLocale($locale);
diff --git a/src/Symfony/Component/Translation/DependencyInjection/TranslationDumperPass.php b/src/Symfony/Component/Translation/DependencyInjection/TranslationDumperPass.php
index 2ece6ac7b3..1bac9cfb3e 100644
--- a/src/Symfony/Component/Translation/DependencyInjection/TranslationDumperPass.php
+++ b/src/Symfony/Component/Translation/DependencyInjection/TranslationDumperPass.php
@@ -24,5 +24,5 @@ class TranslationDumperPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('translation.writer')) {
diff --git a/src/Symfony/Component/Translation/DependencyInjection/TranslationExtractorPass.php b/src/Symfony/Component/Translation/DependencyInjection/TranslationExtractorPass.php
index 1baf9341e4..2e6d94b696 100644
--- a/src/Symfony/Component/Translation/DependencyInjection/TranslationExtractorPass.php
+++ b/src/Symfony/Component/Translation/DependencyInjection/TranslationExtractorPass.php
@@ -25,5 +25,5 @@ class TranslationExtractorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('translation.extractor')) {
diff --git a/src/Symfony/Component/Translation/DependencyInjection/TranslatorPass.php b/src/Symfony/Component/Translation/DependencyInjection/TranslatorPass.php
index dd6ea3c831..faa71809ec 100644
--- a/src/Symfony/Component/Translation/DependencyInjection/TranslatorPass.php
+++ b/src/Symfony/Component/Translation/DependencyInjection/TranslatorPass.php
@@ -22,5 +22,5 @@ class TranslatorPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('translator.default')) {
diff --git a/src/Symfony/Component/Translation/DependencyInjection/TranslatorPathsPass.php b/src/Symfony/Component/Translation/DependencyInjection/TranslatorPathsPass.php
index f7f954eea1..b93248a69a 100644
--- a/src/Symfony/Component/Translation/DependencyInjection/TranslatorPathsPass.php
+++ b/src/Symfony/Component/Translation/DependencyInjection/TranslatorPathsPass.php
@@ -44,5 +44,5 @@ class TranslatorPathsPass extends AbstractRecursivePass
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('translator')) {
diff --git a/src/Symfony/Component/Translation/Dumper/CsvFileDumper.php b/src/Symfony/Component/Translation/Dumper/CsvFileDumper.php
index 8f54752590..cefb1e1b80 100644
--- a/src/Symfony/Component/Translation/Dumper/CsvFileDumper.php
+++ b/src/Symfony/Component/Translation/Dumper/CsvFileDumper.php
@@ -44,5 +44,5 @@ class CsvFileDumper extends FileDumper
      * @return void
      */
-    public function setCsvControl(string $delimiter = ';', string $enclosure = '"')
+    public function setCsvControl(string $delimiter = ';', string $enclosure = '"'): void
     {
         $this->delimiter = $delimiter;
diff --git a/src/Symfony/Component/Translation/Dumper/DumperInterface.php b/src/Symfony/Component/Translation/Dumper/DumperInterface.php
index 6bf42931ef..60f12bcda3 100644
--- a/src/Symfony/Component/Translation/Dumper/DumperInterface.php
+++ b/src/Symfony/Component/Translation/Dumper/DumperInterface.php
@@ -29,4 +29,4 @@ interface DumperInterface
      * @return void
      */
-    public function dump(MessageCatalogue $messages, array $options = []);
+    public function dump(MessageCatalogue $messages, array $options = []): void;
 }
diff --git a/src/Symfony/Component/Translation/Dumper/FileDumper.php b/src/Symfony/Component/Translation/Dumper/FileDumper.php
index ed2c278aaf..0722e1c160 100644
--- a/src/Symfony/Component/Translation/Dumper/FileDumper.php
+++ b/src/Symfony/Component/Translation/Dumper/FileDumper.php
@@ -40,5 +40,5 @@ abstract class FileDumper implements DumperInterface
      * @return void
      */
-    public function setRelativePathTemplate(string $relativePathTemplate)
+    public function setRelativePathTemplate(string $relativePathTemplate): void
     {
         $this->relativePathTemplate = $relativePathTemplate;
@@ -48,5 +48,5 @@ abstract class FileDumper implements DumperInterface
      * @return void
      */
-    public function dump(MessageCatalogue $messages, array $options = [])
+    public function dump(MessageCatalogue $messages, array $options = []): void
     {
         if (!\array_key_exists('path', $options)) {
diff --git a/src/Symfony/Component/Translation/Extractor/AbstractFileExtractor.php b/src/Symfony/Component/Translation/Extractor/AbstractFileExtractor.php
index 4c088b94f9..86107a636d 100644
--- a/src/Symfony/Component/Translation/Extractor/AbstractFileExtractor.php
+++ b/src/Symfony/Component/Translation/Extractor/AbstractFileExtractor.php
@@ -59,9 +59,9 @@ abstract class AbstractFileExtractor
      * @return bool
      */
-    abstract protected function canBeExtracted(string $file);
+    abstract protected function canBeExtracted(string $file): bool;
 
     /**
      * @return iterable
      */
-    abstract protected function extractFromDirectory(string|array $resource);
+    abstract protected function extractFromDirectory(string|array $resource): iterable;
 }
diff --git a/src/Symfony/Component/Translation/Extractor/ChainExtractor.php b/src/Symfony/Component/Translation/Extractor/ChainExtractor.php
index d36f7f385a..dbaeceee09 100644
--- a/src/Symfony/Component/Translation/Extractor/ChainExtractor.php
+++ b/src/Symfony/Component/Translation/Extractor/ChainExtractor.php
@@ -33,5 +33,5 @@ class ChainExtractor implements ExtractorInterface
      * @return void
      */
-    public function addExtractor(string $format, ExtractorInterface $extractor)
+    public function addExtractor(string $format, ExtractorInterface $extractor): void
     {
         $this->extractors[$format] = $extractor;
@@ -41,5 +41,5 @@ class ChainExtractor implements ExtractorInterface
      * @return void
      */
-    public function setPrefix(string $prefix)
+    public function setPrefix(string $prefix): void
     {
         foreach ($this->extractors as $extractor) {
@@ -51,5 +51,5 @@ class ChainExtractor implements ExtractorInterface
      * @return void
      */
-    public function extract(string|iterable $directory, MessageCatalogue $catalogue)
+    public function extract(string|iterable $directory, MessageCatalogue $catalogue): void
     {
         foreach ($this->extractors as $extractor) {
diff --git a/src/Symfony/Component/Translation/Extractor/ExtractorInterface.php b/src/Symfony/Component/Translation/Extractor/ExtractorInterface.php
index 642130af75..c9ae2693a4 100644
--- a/src/Symfony/Component/Translation/Extractor/ExtractorInterface.php
+++ b/src/Symfony/Component/Translation/Extractor/ExtractorInterface.php
@@ -29,5 +29,5 @@ interface ExtractorInterface
      * @return void
      */
-    public function extract(string|iterable $resource, MessageCatalogue $catalogue);
+    public function extract(string|iterable $resource, MessageCatalogue $catalogue): void;
 
     /**
@@ -36,4 +36,4 @@ interface ExtractorInterface
      * @return void
      */
-    public function setPrefix(string $prefix);
+    public function setPrefix(string $prefix): void;
 }
diff --git a/src/Symfony/Component/Translation/Extractor/PhpExtractor.php b/src/Symfony/Component/Translation/Extractor/PhpExtractor.php
index 7ff27f7c80..495067ed2e 100644
--- a/src/Symfony/Component/Translation/Extractor/PhpExtractor.php
+++ b/src/Symfony/Component/Translation/Extractor/PhpExtractor.php
@@ -136,5 +136,5 @@ class PhpExtractor extends AbstractFileExtractor implements ExtractorInterface
      * @return void
      */
-    public function extract(string|iterable $resource, MessageCatalogue $catalog)
+    public function extract(string|iterable $resource, MessageCatalogue $catalog): void
     {
         $files = $this->extractFiles($resource);
@@ -149,5 +149,5 @@ class PhpExtractor extends AbstractFileExtractor implements ExtractorInterface
      * @return void
      */
-    public function setPrefix(string $prefix)
+    public function setPrefix(string $prefix): void
     {
         $this->prefix = $prefix;
@@ -265,5 +265,5 @@ class PhpExtractor extends AbstractFileExtractor implements ExtractorInterface
      * @return void
      */
-    protected function parseTokens(array $tokens, MessageCatalogue $catalog, string $filename)
+    protected function parseTokens(array $tokens, MessageCatalogue $catalog, string $filename): void
     {
         $tokenIterator = new \ArrayIterator($tokens);
diff --git a/src/Symfony/Component/Translation/Loader/CsvFileLoader.php b/src/Symfony/Component/Translation/Loader/CsvFileLoader.php
index 7f2f96be64..266c7f48c9 100644
--- a/src/Symfony/Component/Translation/Loader/CsvFileLoader.php
+++ b/src/Symfony/Component/Translation/Loader/CsvFileLoader.php
@@ -56,5 +56,5 @@ class CsvFileLoader extends FileLoader
      * @return void
      */
-    public function setCsvControl(string $delimiter = ';', string $enclosure = '"', string $escape = '\\')
+    public function setCsvControl(string $delimiter = ';', string $enclosure = '"', string $escape = '\\'): void
     {
         $this->delimiter = $delimiter;
diff --git a/src/Symfony/Component/Translation/LoggingTranslator.php b/src/Symfony/Component/Translation/LoggingTranslator.php
index e107bf223c..817940a626 100644
--- a/src/Symfony/Component/Translation/LoggingTranslator.php
+++ b/src/Symfony/Component/Translation/LoggingTranslator.php
@@ -49,5 +49,5 @@ class LoggingTranslator implements TranslatorInterface, TranslatorBagInterface,
      * @return void
      */
-    public function setLocale(string $locale)
+    public function setLocale(string $locale): void
     {
         $prev = $this->translator->getLocale();
diff --git a/src/Symfony/Component/Translation/MessageCatalogue.php b/src/Symfony/Component/Translation/MessageCatalogue.php
index 379d947ce7..effc8dab3d 100644
--- a/src/Symfony/Component/Translation/MessageCatalogue.php
+++ b/src/Symfony/Component/Translation/MessageCatalogue.php
@@ -84,5 +84,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function set(string $id, string $translation, string $domain = 'messages')
+    public function set(string $id, string $translation, string $domain = 'messages'): void
     {
         $this->add([$id => $translation], $domain);
@@ -127,5 +127,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function replace(array $messages, string $domain = 'messages')
+    public function replace(array $messages, string $domain = 'messages'): void
     {
         unset($this->messages[$domain], $this->messages[$domain.self::INTL_DOMAIN_SUFFIX]);
@@ -137,5 +137,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function add(array $messages, string $domain = 'messages')
+    public function add(array $messages, string $domain = 'messages'): void
     {
         $altDomain = str_ends_with($domain, self::INTL_DOMAIN_SUFFIX) ? substr($domain, 0, -\strlen(self::INTL_DOMAIN_SUFFIX)) : $domain.self::INTL_DOMAIN_SUFFIX;
@@ -153,5 +153,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function addCatalogue(MessageCatalogueInterface $catalogue)
+    public function addCatalogue(MessageCatalogueInterface $catalogue): void
     {
         if ($catalogue->getLocale() !== $this->locale) {
@@ -185,5 +185,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function addFallbackCatalogue(MessageCatalogueInterface $catalogue)
+    public function addFallbackCatalogue(MessageCatalogueInterface $catalogue): void
     {
         // detect circular references
@@ -227,5 +227,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function addResource(ResourceInterface $resource)
+    public function addResource(ResourceInterface $resource): void
     {
         $this->resources[$resource->__toString()] = $resource;
@@ -254,5 +254,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function setMetadata(string $key, mixed $value, string $domain = 'messages')
+    public function setMetadata(string $key, mixed $value, string $domain = 'messages'): void
     {
         $this->metadata[$domain][$key] = $value;
@@ -262,5 +262,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function deleteMetadata(string $key = '', string $domain = 'messages')
+    public function deleteMetadata(string $key = '', string $domain = 'messages'): void
     {
         if ('' == $domain) {
@@ -295,5 +295,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function setCatalogueMetadata(string $key, mixed $value, string $domain = 'messages')
+    public function setCatalogueMetadata(string $key, mixed $value, string $domain = 'messages'): void
     {
         $this->catalogueMetadata[$domain][$key] = $value;
@@ -303,5 +303,5 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf
      * @return void
      */
-    public function deleteCatalogueMetadata(string $key = '', string $domain = 'messages')
+    public function deleteCatalogueMetadata(string $key = '', string $domain = 'messages'): void
     {
         if (!$domain) {
diff --git a/src/Symfony/Component/Translation/MessageCatalogueInterface.php b/src/Symfony/Component/Translation/MessageCatalogueInterface.php
index ed819f1554..27c279768a 100644
--- a/src/Symfony/Component/Translation/MessageCatalogueInterface.php
+++ b/src/Symfony/Component/Translation/MessageCatalogueInterface.php
@@ -49,5 +49,5 @@ interface MessageCatalogueInterface
      * @return void
      */
-    public function set(string $id, string $translation, string $domain = 'messages');
+    public function set(string $id, string $translation, string $domain = 'messages'): void;
 
     /**
@@ -83,5 +83,5 @@ interface MessageCatalogueInterface
      * @return void
      */
-    public function replace(array $messages, string $domain = 'messages');
+    public function replace(array $messages, string $domain = 'messages'): void;
 
     /**
@@ -93,5 +93,5 @@ interface MessageCatalogueInterface
      * @return void
      */
-    public function add(array $messages, string $domain = 'messages');
+    public function add(array $messages, string $domain = 'messages'): void;
 
     /**
@@ -102,5 +102,5 @@ interface MessageCatalogueInterface
      * @return void
      */
-    public function addCatalogue(self $catalogue);
+    public function addCatalogue(self $catalogue): void;
 
     /**
@@ -112,5 +112,5 @@ interface MessageCatalogueInterface
      * @return void
      */
-    public function addFallbackCatalogue(self $catalogue);
+    public function addFallbackCatalogue(self $catalogue): void;
 
     /**
@@ -131,4 +131,4 @@ interface MessageCatalogueInterface
      * @return void
      */
-    public function addResource(ResourceInterface $resource);
+    public function addResource(ResourceInterface $resource): void;
 }
diff --git a/src/Symfony/Component/Translation/MetadataAwareInterface.php b/src/Symfony/Component/Translation/MetadataAwareInterface.php
index 39e5326c37..5775c04ed5 100644
--- a/src/Symfony/Component/Translation/MetadataAwareInterface.php
+++ b/src/Symfony/Component/Translation/MetadataAwareInterface.php
@@ -35,5 +35,5 @@ interface MetadataAwareInterface
      * @return void
      */
-    public function setMetadata(string $key, mixed $value, string $domain = 'messages');
+    public function setMetadata(string $key, mixed $value, string $domain = 'messages'): void;
 
     /**
@@ -45,4 +45,4 @@ interface MetadataAwareInterface
      * @return void
      */
-    public function deleteMetadata(string $key = '', string $domain = 'messages');
+    public function deleteMetadata(string $key = '', string $domain = 'messages'): void;
 }
diff --git a/src/Symfony/Component/Translation/Reader/TranslationReader.php b/src/Symfony/Component/Translation/Reader/TranslationReader.php
index 01408d4dcd..cd49c7a920 100644
--- a/src/Symfony/Component/Translation/Reader/TranslationReader.php
+++ b/src/Symfony/Component/Translation/Reader/TranslationReader.php
@@ -37,5 +37,5 @@ class TranslationReader implements TranslationReaderInterface
      * @return void
      */
-    public function addLoader(string $format, LoaderInterface $loader)
+    public function addLoader(string $format, LoaderInterface $loader): void
     {
         $this->loaders[$format] = $loader;
@@ -45,5 +45,5 @@ class TranslationReader implements TranslationReaderInterface
      * @return void
      */
-    public function read(string $directory, MessageCatalogue $catalogue)
+    public function read(string $directory, MessageCatalogue $catalogue): void
     {
         if (!is_dir($directory)) {
diff --git a/src/Symfony/Component/Translation/Reader/TranslationReaderInterface.php b/src/Symfony/Component/Translation/Reader/TranslationReaderInterface.php
index ea74dc23ff..29888cdafc 100644
--- a/src/Symfony/Component/Translation/Reader/TranslationReaderInterface.php
+++ b/src/Symfony/Component/Translation/Reader/TranslationReaderInterface.php
@@ -26,4 +26,4 @@ interface TranslationReaderInterface
      * @return void
      */
-    public function read(string $directory, MessageCatalogue $catalogue);
+    public function read(string $directory, MessageCatalogue $catalogue): void;
 }
diff --git a/src/Symfony/Component/Translation/Translator.php b/src/Symfony/Component/Translation/Translator.php
index 132138e922..22f4a060a1 100644
--- a/src/Symfony/Component/Translation/Translator.php
+++ b/src/Symfony/Component/Translation/Translator.php
@@ -84,5 +84,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @return void
      */
-    public function setConfigCacheFactory(ConfigCacheFactoryInterface $configCacheFactory)
+    public function setConfigCacheFactory(ConfigCacheFactoryInterface $configCacheFactory): void
     {
         $this->configCacheFactory = $configCacheFactory;
@@ -96,5 +96,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @return void
      */
-    public function addLoader(string $format, LoaderInterface $loader)
+    public function addLoader(string $format, LoaderInterface $loader): void
     {
         $this->loaders[$format] = $loader;
@@ -111,5 +111,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @throws InvalidArgumentException If the locale contains invalid characters
      */
-    public function addResource(string $format, mixed $resource, string $locale, string $domain = null)
+    public function addResource(string $format, mixed $resource, string $locale, string $domain = null): void
     {
         $domain ??= 'messages';
@@ -130,5 +130,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @return void
      */
-    public function setLocale(string $locale)
+    public function setLocale(string $locale): void
     {
         $this->assertValidLocale($locale);
@@ -150,5 +150,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @throws InvalidArgumentException If a locale contains invalid characters
      */
-    public function setFallbackLocales(array $locales)
+    public function setFallbackLocales(array $locales): void
     {
         // needed as the fallback locales are linked to the already loaded catalogues
@@ -237,5 +237,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @return void
      */
-    protected function loadCatalogue(string $locale)
+    protected function loadCatalogue(string $locale): void
     {
         if (null === $this->cacheDir) {
@@ -249,5 +249,5 @@ class Translator implements TranslatorInterface, TranslatorBagInterface, LocaleA
      * @return void
      */
-    protected function initializeCatalogue(string $locale)
+    protected function initializeCatalogue(string $locale): void
     {
         $this->assertValidLocale($locale);
@@ -388,5 +388,5 @@ EOF
      * @return array
      */
-    protected function computeFallbackLocales(string $locale)
+    protected function computeFallbackLocales(string $locale): array
     {
         $this->parentLocales ??= json_decode(file_get_contents(__DIR__.'/Resources/data/parents.json'), true);
@@ -436,5 +436,5 @@ EOF
      * @throws InvalidArgumentException If the locale contains invalid characters
      */
-    protected function assertValidLocale(string $locale)
+    protected function assertValidLocale(string $locale): void
     {
         if (!preg_match('/^[a-z0-9@_\\.\\-]*$/i', $locale)) {
diff --git a/src/Symfony/Component/Translation/Writer/TranslationWriter.php b/src/Symfony/Component/Translation/Writer/TranslationWriter.php
index 61e03cb0ea..46dc804662 100644
--- a/src/Symfony/Component/Translation/Writer/TranslationWriter.php
+++ b/src/Symfony/Component/Translation/Writer/TranslationWriter.php
@@ -34,5 +34,5 @@ class TranslationWriter implements TranslationWriterInterface
      * @return void
      */
-    public function addDumper(string $format, DumperInterface $dumper)
+    public function addDumper(string $format, DumperInterface $dumper): void
     {
         $this->dumpers[$format] = $dumper;
@@ -57,5 +57,5 @@ class TranslationWriter implements TranslationWriterInterface
      * @throws InvalidArgumentException
      */
-    public function write(MessageCatalogue $catalogue, string $format, array $options = [])
+    public function write(MessageCatalogue $catalogue, string $format, array $options = []): void
     {
         if (!isset($this->dumpers[$format])) {
diff --git a/src/Symfony/Component/Translation/Writer/TranslationWriterInterface.php b/src/Symfony/Component/Translation/Writer/TranslationWriterInterface.php
index 5ebb9794a6..aef89e88e7 100644
--- a/src/Symfony/Component/Translation/Writer/TranslationWriterInterface.php
+++ b/src/Symfony/Component/Translation/Writer/TranslationWriterInterface.php
@@ -32,4 +32,4 @@ interface TranslationWriterInterface
      * @throws InvalidArgumentException
      */
-    public function write(MessageCatalogue $catalogue, string $format, array $options = []);
+    public function write(MessageCatalogue $catalogue, string $format, array $options = []): void;
 }
diff --git a/src/Symfony/Component/Validator/Command/DebugCommand.php b/src/Symfony/Component/Validator/Command/DebugCommand.php
index acb00d7242..37cc40a06f 100644
--- a/src/Symfony/Component/Validator/Command/DebugCommand.php
+++ b/src/Symfony/Component/Validator/Command/DebugCommand.php
@@ -47,5 +47,5 @@ class DebugCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Validator/Constraint.php b/src/Symfony/Component/Validator/Constraint.php
index d53bbb196f..4eecf85f8e 100644
--- a/src/Symfony/Component/Validator/Constraint.php
+++ b/src/Symfony/Component/Validator/Constraint.php
@@ -236,5 +236,5 @@ abstract class Constraint
      * @return void
      */
-    public function addImplicitGroupName(string $group)
+    public function addImplicitGroupName(string $group): void
     {
         if (null === $this->groups && \array_key_exists('groups', (array) $this)) {
@@ -256,5 +256,5 @@ abstract class Constraint
      * @see __construct()
      */
-    public function getDefaultOption()
+    public function getDefaultOption(): ?string
     {
         return null;
@@ -270,5 +270,5 @@ abstract class Constraint
      * @see __construct()
      */
-    public function getRequiredOptions()
+    public function getRequiredOptions(): array
     {
         return [];
@@ -284,5 +284,5 @@ abstract class Constraint
      * @return string
      */
-    public function validatedBy()
+    public function validatedBy(): string
     {
         return static::class.'Validator';
@@ -298,5 +298,5 @@ abstract class Constraint
      * @return string|string[] One or more constant values
      */
-    public function getTargets()
+    public function getTargets(): string|array
     {
         return self::PROPERTY_CONSTRAINT;
diff --git a/src/Symfony/Component/Validator/ConstraintValidator.php b/src/Symfony/Component/Validator/ConstraintValidator.php
index 8fa522314f..a4c0c5ec64 100644
--- a/src/Symfony/Component/Validator/ConstraintValidator.php
+++ b/src/Symfony/Component/Validator/ConstraintValidator.php
@@ -40,5 +40,5 @@ abstract class ConstraintValidator implements ConstraintValidatorInterface
      * @return void
      */
-    public function initialize(ExecutionContextInterface $context)
+    public function initialize(ExecutionContextInterface $context): void
     {
         $this->context = $context;
diff --git a/src/Symfony/Component/Validator/ConstraintValidatorInterface.php b/src/Symfony/Component/Validator/ConstraintValidatorInterface.php
index fe7da2e8f7..61d3632e2a 100644
--- a/src/Symfony/Component/Validator/ConstraintValidatorInterface.php
+++ b/src/Symfony/Component/Validator/ConstraintValidatorInterface.php
@@ -24,5 +24,5 @@ interface ConstraintValidatorInterface
      * @return void
      */
-    public function initialize(ExecutionContextInterface $context);
+    public function initialize(ExecutionContextInterface $context): void;
 
     /**
@@ -31,4 +31,4 @@ interface ConstraintValidatorInterface
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint);
+    public function validate(mixed $value, Constraint $constraint): void;
 }
diff --git a/src/Symfony/Component/Validator/ConstraintViolationList.php b/src/Symfony/Component/Validator/ConstraintViolationList.php
index 88f90a0cdb..fd6deb6eb1 100644
--- a/src/Symfony/Component/Validator/ConstraintViolationList.php
+++ b/src/Symfony/Component/Validator/ConstraintViolationList.php
@@ -62,5 +62,5 @@ class ConstraintViolationList implements \IteratorAggregate, ConstraintViolation
      * @return void
      */
-    public function add(ConstraintViolationInterface $violation)
+    public function add(ConstraintViolationInterface $violation): void
     {
         $this->violations[] = $violation;
@@ -70,5 +70,5 @@ class ConstraintViolationList implements \IteratorAggregate, ConstraintViolation
      * @return void
      */
-    public function addAll(ConstraintViolationListInterface $otherList)
+    public function addAll(ConstraintViolationListInterface $otherList): void
     {
         foreach ($otherList as $violation) {
@@ -94,5 +94,5 @@ class ConstraintViolationList implements \IteratorAggregate, ConstraintViolation
      * @return void
      */
-    public function set(int $offset, ConstraintViolationInterface $violation)
+    public function set(int $offset, ConstraintViolationInterface $violation): void
     {
         $this->violations[$offset] = $violation;
@@ -102,5 +102,5 @@ class ConstraintViolationList implements \IteratorAggregate, ConstraintViolation
      * @return void
      */
-    public function remove(int $offset)
+    public function remove(int $offset): void
     {
         unset($this->violations[$offset]);
diff --git a/src/Symfony/Component/Validator/ConstraintViolationListInterface.php b/src/Symfony/Component/Validator/ConstraintViolationListInterface.php
index 1fdbf0bc3f..aad702453b 100644
--- a/src/Symfony/Component/Validator/ConstraintViolationListInterface.php
+++ b/src/Symfony/Component/Validator/ConstraintViolationListInterface.php
@@ -31,5 +31,5 @@ interface ConstraintViolationListInterface extends \Traversable, \Countable, \Ar
      * @return void
      */
-    public function add(ConstraintViolationInterface $violation);
+    public function add(ConstraintViolationInterface $violation): void;
 
     /**
@@ -38,5 +38,5 @@ interface ConstraintViolationListInterface extends \Traversable, \Countable, \Ar
      * @return void
      */
-    public function addAll(self $otherList);
+    public function addAll(self $otherList): void;
 
     /**
@@ -63,5 +63,5 @@ interface ConstraintViolationListInterface extends \Traversable, \Countable, \Ar
      * @return void
      */
-    public function set(int $offset, ConstraintViolationInterface $violation);
+    public function set(int $offset, ConstraintViolationInterface $violation): void;
 
     /**
@@ -72,4 +72,4 @@ interface ConstraintViolationListInterface extends \Traversable, \Countable, \Ar
      * @return void
      */
-    public function remove(int $offset);
+    public function remove(int $offset): void;
 }
diff --git a/src/Symfony/Component/Validator/Constraints/AbstractComparisonValidator.php b/src/Symfony/Component/Validator/Constraints/AbstractComparisonValidator.php
index 29fd4daa8a..c358e6cc6f 100644
--- a/src/Symfony/Component/Validator/Constraints/AbstractComparisonValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/AbstractComparisonValidator.php
@@ -38,5 +38,5 @@ abstract class AbstractComparisonValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof AbstractComparison) {
diff --git a/src/Symfony/Component/Validator/Constraints/AllValidator.php b/src/Symfony/Component/Validator/Constraints/AllValidator.php
index 15896f29da..22e24e34f9 100644
--- a/src/Symfony/Component/Validator/Constraints/AllValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/AllValidator.php
@@ -25,5 +25,5 @@ class AllValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof All) {
diff --git a/src/Symfony/Component/Validator/Constraints/AtLeastOneOfValidator.php b/src/Symfony/Component/Validator/Constraints/AtLeastOneOfValidator.php
index 94ad5eacab..7873a33c2b 100644
--- a/src/Symfony/Component/Validator/Constraints/AtLeastOneOfValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/AtLeastOneOfValidator.php
@@ -24,5 +24,5 @@ class AtLeastOneOfValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof AtLeastOneOf) {
diff --git a/src/Symfony/Component/Validator/Constraints/BicValidator.php b/src/Symfony/Component/Validator/Constraints/BicValidator.php
index ca0ed331c1..32fc2f28c1 100644
--- a/src/Symfony/Component/Validator/Constraints/BicValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/BicValidator.php
@@ -67,5 +67,5 @@ class BicValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Bic) {
diff --git a/src/Symfony/Component/Validator/Constraints/BlankValidator.php b/src/Symfony/Component/Validator/Constraints/BlankValidator.php
index 2551d5e244..0e5ae317e6 100644
--- a/src/Symfony/Component/Validator/Constraints/BlankValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/BlankValidator.php
@@ -24,5 +24,5 @@ class BlankValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Blank) {
diff --git a/src/Symfony/Component/Validator/Constraints/CallbackValidator.php b/src/Symfony/Component/Validator/Constraints/CallbackValidator.php
index ea62a5c821..bbcdd4c7f6 100644
--- a/src/Symfony/Component/Validator/Constraints/CallbackValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CallbackValidator.php
@@ -27,5 +27,5 @@ class CallbackValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $object, Constraint $constraint)
+    public function validate(mixed $object, Constraint $constraint): void
     {
         if (!$constraint instanceof Callback) {
diff --git a/src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php b/src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php
index 3e51050158..16946072e8 100644
--- a/src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CardSchemeValidator.php
@@ -97,5 +97,5 @@ class CardSchemeValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof CardScheme) {
diff --git a/src/Symfony/Component/Validator/Constraints/ChoiceValidator.php b/src/Symfony/Component/Validator/Constraints/ChoiceValidator.php
index 5528252c52..de7c2c1257 100644
--- a/src/Symfony/Component/Validator/Constraints/ChoiceValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/ChoiceValidator.php
@@ -31,5 +31,5 @@ class ChoiceValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Choice) {
diff --git a/src/Symfony/Component/Validator/Constraints/Collection.php b/src/Symfony/Component/Validator/Constraints/Collection.php
index ee50fca169..62effcb311 100644
--- a/src/Symfony/Component/Validator/Constraints/Collection.php
+++ b/src/Symfony/Component/Validator/Constraints/Collection.php
@@ -61,5 +61,5 @@ class Collection extends Composite
      * @return void
      */
-    protected function initializeNestedConstraints()
+    protected function initializeNestedConstraints(): void
     {
         parent::initializeNestedConstraints();
diff --git a/src/Symfony/Component/Validator/Constraints/CollectionValidator.php b/src/Symfony/Component/Validator/Constraints/CollectionValidator.php
index 7bb63e7ded..7ed823e822 100644
--- a/src/Symfony/Component/Validator/Constraints/CollectionValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CollectionValidator.php
@@ -25,5 +25,5 @@ class CollectionValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Collection) {
diff --git a/src/Symfony/Component/Validator/Constraints/Composite.php b/src/Symfony/Component/Validator/Constraints/Composite.php
index df13315380..bcb59060f2 100644
--- a/src/Symfony/Component/Validator/Constraints/Composite.php
+++ b/src/Symfony/Component/Validator/Constraints/Composite.php
@@ -114,5 +114,5 @@ abstract class Composite extends Constraint
      * @return void
      */
-    public function addImplicitGroupName(string $group)
+    public function addImplicitGroupName(string $group): void
     {
         parent::addImplicitGroupName($group);
@@ -152,5 +152,5 @@ abstract class Composite extends Constraint
      * @return void
      */
-    protected function initializeNestedConstraints()
+    protected function initializeNestedConstraints(): void
     {
     }
diff --git a/src/Symfony/Component/Validator/Constraints/CompoundValidator.php b/src/Symfony/Component/Validator/Constraints/CompoundValidator.php
index 8f9c713c79..12ebf9b5c9 100644
--- a/src/Symfony/Component/Validator/Constraints/CompoundValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CompoundValidator.php
@@ -24,5 +24,5 @@ class CompoundValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Compound) {
diff --git a/src/Symfony/Component/Validator/Constraints/CountValidator.php b/src/Symfony/Component/Validator/Constraints/CountValidator.php
index 3c56023538..597e2b568c 100644
--- a/src/Symfony/Component/Validator/Constraints/CountValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CountValidator.php
@@ -25,5 +25,5 @@ class CountValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Count) {
diff --git a/src/Symfony/Component/Validator/Constraints/CountryValidator.php b/src/Symfony/Component/Validator/Constraints/CountryValidator.php
index 54c8da0f9e..97061c3936 100644
--- a/src/Symfony/Component/Validator/Constraints/CountryValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CountryValidator.php
@@ -28,5 +28,5 @@ class CountryValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Country) {
diff --git a/src/Symfony/Component/Validator/Constraints/CurrencyValidator.php b/src/Symfony/Component/Validator/Constraints/CurrencyValidator.php
index a50ea62ab6..5f5b5b4e5a 100644
--- a/src/Symfony/Component/Validator/Constraints/CurrencyValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/CurrencyValidator.php
@@ -29,5 +29,5 @@ class CurrencyValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Currency) {
diff --git a/src/Symfony/Component/Validator/Constraints/DateTimeValidator.php b/src/Symfony/Component/Validator/Constraints/DateTimeValidator.php
index f02ba54daf..e89c616ec8 100644
--- a/src/Symfony/Component/Validator/Constraints/DateTimeValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/DateTimeValidator.php
@@ -25,5 +25,5 @@ class DateTimeValidator extends DateValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof DateTime) {
diff --git a/src/Symfony/Component/Validator/Constraints/DateValidator.php b/src/Symfony/Component/Validator/Constraints/DateValidator.php
index 0e3d848430..b4a6755388 100644
--- a/src/Symfony/Component/Validator/Constraints/DateValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/DateValidator.php
@@ -37,5 +37,5 @@ class DateValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Date) {
diff --git a/src/Symfony/Component/Validator/Constraints/EmailValidator.php b/src/Symfony/Component/Validator/Constraints/EmailValidator.php
index 8c0ff77308..ca64a5fe88 100644
--- a/src/Symfony/Component/Validator/Constraints/EmailValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/EmailValidator.php
@@ -55,5 +55,5 @@ class EmailValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Email) {
diff --git a/src/Symfony/Component/Validator/Constraints/ExpressionValidator.php b/src/Symfony/Component/Validator/Constraints/ExpressionValidator.php
index d1fe60a791..3d602f5e7b 100644
--- a/src/Symfony/Component/Validator/Constraints/ExpressionValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/ExpressionValidator.php
@@ -33,5 +33,5 @@ class ExpressionValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Expression) {
diff --git a/src/Symfony/Component/Validator/Constraints/FileValidator.php b/src/Symfony/Component/Validator/Constraints/FileValidator.php
index 6346ad098f..ae4d95ed62 100644
--- a/src/Symfony/Component/Validator/Constraints/FileValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/FileValidator.php
@@ -42,5 +42,5 @@ class FileValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof File) {
diff --git a/src/Symfony/Component/Validator/Constraints/HostnameValidator.php b/src/Symfony/Component/Validator/Constraints/HostnameValidator.php
index 8b0fa60e20..25e2837f5c 100644
--- a/src/Symfony/Component/Validator/Constraints/HostnameValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/HostnameValidator.php
@@ -35,5 +35,5 @@ class HostnameValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Hostname) {
diff --git a/src/Symfony/Component/Validator/Constraints/IbanValidator.php b/src/Symfony/Component/Validator/Constraints/IbanValidator.php
index b4744b4b57..d289374f56 100644
--- a/src/Symfony/Component/Validator/Constraints/IbanValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IbanValidator.php
@@ -167,5 +167,5 @@ class IbanValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Iban) {
diff --git a/src/Symfony/Component/Validator/Constraints/ImageValidator.php b/src/Symfony/Component/Validator/Constraints/ImageValidator.php
index 93386e6f88..bc6b9e6501 100644
--- a/src/Symfony/Component/Validator/Constraints/ImageValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/ImageValidator.php
@@ -29,5 +29,5 @@ class ImageValidator extends FileValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Image) {
diff --git a/src/Symfony/Component/Validator/Constraints/IpValidator.php b/src/Symfony/Component/Validator/Constraints/IpValidator.php
index 2f71a88045..3bc469e392 100644
--- a/src/Symfony/Component/Validator/Constraints/IpValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IpValidator.php
@@ -28,5 +28,5 @@ class IpValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Ip) {
diff --git a/src/Symfony/Component/Validator/Constraints/IsFalseValidator.php b/src/Symfony/Component/Validator/Constraints/IsFalseValidator.php
index 76a24ad789..7e161c265c 100644
--- a/src/Symfony/Component/Validator/Constraints/IsFalseValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IsFalseValidator.php
@@ -24,5 +24,5 @@ class IsFalseValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof IsFalse) {
diff --git a/src/Symfony/Component/Validator/Constraints/IsNullValidator.php b/src/Symfony/Component/Validator/Constraints/IsNullValidator.php
index 628aacf267..d45d075094 100644
--- a/src/Symfony/Component/Validator/Constraints/IsNullValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IsNullValidator.php
@@ -24,5 +24,5 @@ class IsNullValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof IsNull) {
diff --git a/src/Symfony/Component/Validator/Constraints/IsTrueValidator.php b/src/Symfony/Component/Validator/Constraints/IsTrueValidator.php
index 644bbf70cb..4a1336e78b 100644
--- a/src/Symfony/Component/Validator/Constraints/IsTrueValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IsTrueValidator.php
@@ -24,5 +24,5 @@ class IsTrueValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof IsTrue) {
diff --git a/src/Symfony/Component/Validator/Constraints/IsbnValidator.php b/src/Symfony/Component/Validator/Constraints/IsbnValidator.php
index 3a64f11cf6..b271a2e1df 100644
--- a/src/Symfony/Component/Validator/Constraints/IsbnValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IsbnValidator.php
@@ -31,5 +31,5 @@ class IsbnValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Isbn) {
@@ -99,5 +99,5 @@ class IsbnValidator extends ConstraintValidator
      * @return string|bool
      */
-    protected function validateIsbn10(string $isbn)
+    protected function validateIsbn10(string $isbn): string|bool
     {
         // Choose an algorithm so that ERROR_INVALID_CHARACTERS is preferred
@@ -142,5 +142,5 @@ class IsbnValidator extends ConstraintValidator
      * @return string|bool
      */
-    protected function validateIsbn13(string $isbn)
+    protected function validateIsbn13(string $isbn): string|bool
     {
         // Error priority:
@@ -179,5 +179,5 @@ class IsbnValidator extends ConstraintValidator
      * @return string
      */
-    protected function getMessage(Isbn $constraint, string $type = null)
+    protected function getMessage(Isbn $constraint, string $type = null): string
     {
         if (null !== $constraint->message) {
diff --git a/src/Symfony/Component/Validator/Constraints/IsinValidator.php b/src/Symfony/Component/Validator/Constraints/IsinValidator.php
index 21539cbcb7..86d85efe95 100644
--- a/src/Symfony/Component/Validator/Constraints/IsinValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IsinValidator.php
@@ -27,5 +27,5 @@ class IsinValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Isin) {
diff --git a/src/Symfony/Component/Validator/Constraints/IssnValidator.php b/src/Symfony/Component/Validator/Constraints/IssnValidator.php
index 1962322b49..d934922b00 100644
--- a/src/Symfony/Component/Validator/Constraints/IssnValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/IssnValidator.php
@@ -30,5 +30,5 @@ class IssnValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Issn) {
diff --git a/src/Symfony/Component/Validator/Constraints/JsonValidator.php b/src/Symfony/Component/Validator/Constraints/JsonValidator.php
index f12424ae8b..bbec56c3bd 100644
--- a/src/Symfony/Component/Validator/Constraints/JsonValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/JsonValidator.php
@@ -24,5 +24,5 @@ class JsonValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Json) {
diff --git a/src/Symfony/Component/Validator/Constraints/LanguageValidator.php b/src/Symfony/Component/Validator/Constraints/LanguageValidator.php
index 4706c33569..909308a8b8 100644
--- a/src/Symfony/Component/Validator/Constraints/LanguageValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/LanguageValidator.php
@@ -28,5 +28,5 @@ class LanguageValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Language) {
diff --git a/src/Symfony/Component/Validator/Constraints/LengthValidator.php b/src/Symfony/Component/Validator/Constraints/LengthValidator.php
index c92fca0d59..3f6c7e3997 100644
--- a/src/Symfony/Component/Validator/Constraints/LengthValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/LengthValidator.php
@@ -25,5 +25,5 @@ class LengthValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Length) {
diff --git a/src/Symfony/Component/Validator/Constraints/LocaleValidator.php b/src/Symfony/Component/Validator/Constraints/LocaleValidator.php
index 4cd0b120b4..e918b84513 100644
--- a/src/Symfony/Component/Validator/Constraints/LocaleValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/LocaleValidator.php
@@ -28,5 +28,5 @@ class LocaleValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Locale) {
diff --git a/src/Symfony/Component/Validator/Constraints/LuhnValidator.php b/src/Symfony/Component/Validator/Constraints/LuhnValidator.php
index a3f871e339..c6064e8b30 100644
--- a/src/Symfony/Component/Validator/Constraints/LuhnValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/LuhnValidator.php
@@ -34,5 +34,5 @@ class LuhnValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Luhn) {
diff --git a/src/Symfony/Component/Validator/Constraints/NoSuspiciousCharactersValidator.php b/src/Symfony/Component/Validator/Constraints/NoSuspiciousCharactersValidator.php
index 659de93f9e..44b23e1205 100644
--- a/src/Symfony/Component/Validator/Constraints/NoSuspiciousCharactersValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/NoSuspiciousCharactersValidator.php
@@ -60,5 +60,5 @@ class NoSuspiciousCharactersValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof NoSuspiciousCharacters) {
diff --git a/src/Symfony/Component/Validator/Constraints/NotBlankValidator.php b/src/Symfony/Component/Validator/Constraints/NotBlankValidator.php
index fa6c794c02..f46f38845e 100644
--- a/src/Symfony/Component/Validator/Constraints/NotBlankValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/NotBlankValidator.php
@@ -25,5 +25,5 @@ class NotBlankValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof NotBlank) {
diff --git a/src/Symfony/Component/Validator/Constraints/NotCompromisedPasswordValidator.php b/src/Symfony/Component/Validator/Constraints/NotCompromisedPasswordValidator.php
index 477e98fab0..daa9a684d1 100644
--- a/src/Symfony/Component/Validator/Constraints/NotCompromisedPasswordValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/NotCompromisedPasswordValidator.php
@@ -55,5 +55,5 @@ class NotCompromisedPasswordValidator extends ConstraintValidator
      * @throws ExceptionInterface
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof NotCompromisedPassword) {
diff --git a/src/Symfony/Component/Validator/Constraints/NotNullValidator.php b/src/Symfony/Component/Validator/Constraints/NotNullValidator.php
index 3f8f951280..503e779244 100644
--- a/src/Symfony/Component/Validator/Constraints/NotNullValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/NotNullValidator.php
@@ -24,5 +24,5 @@ class NotNullValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof NotNull) {
diff --git a/src/Symfony/Component/Validator/Constraints/RangeValidator.php b/src/Symfony/Component/Validator/Constraints/RangeValidator.php
index 18c399cd08..c98312a9aa 100644
--- a/src/Symfony/Component/Validator/Constraints/RangeValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/RangeValidator.php
@@ -35,5 +35,5 @@ class RangeValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Range) {
diff --git a/src/Symfony/Component/Validator/Constraints/RegexValidator.php b/src/Symfony/Component/Validator/Constraints/RegexValidator.php
index 4e9ae9039f..29e48a452d 100644
--- a/src/Symfony/Component/Validator/Constraints/RegexValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/RegexValidator.php
@@ -28,5 +28,5 @@ class RegexValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Regex) {
diff --git a/src/Symfony/Component/Validator/Constraints/SequentiallyValidator.php b/src/Symfony/Component/Validator/Constraints/SequentiallyValidator.php
index d076f3cfdd..cc54421652 100644
--- a/src/Symfony/Component/Validator/Constraints/SequentiallyValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/SequentiallyValidator.php
@@ -24,5 +24,5 @@ class SequentiallyValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Sequentially) {
diff --git a/src/Symfony/Component/Validator/Constraints/TimeValidator.php b/src/Symfony/Component/Validator/Constraints/TimeValidator.php
index c6d111cfe3..fed053db79 100644
--- a/src/Symfony/Component/Validator/Constraints/TimeValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/TimeValidator.php
@@ -37,5 +37,5 @@ class TimeValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Time) {
diff --git a/src/Symfony/Component/Validator/Constraints/TimezoneValidator.php b/src/Symfony/Component/Validator/Constraints/TimezoneValidator.php
index 21481a5afd..2d1cc4f5eb 100644
--- a/src/Symfony/Component/Validator/Constraints/TimezoneValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/TimezoneValidator.php
@@ -30,5 +30,5 @@ class TimezoneValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Timezone) {
diff --git a/src/Symfony/Component/Validator/Constraints/TypeValidator.php b/src/Symfony/Component/Validator/Constraints/TypeValidator.php
index ad9e314572..f172b41a47 100644
--- a/src/Symfony/Component/Validator/Constraints/TypeValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/TypeValidator.php
@@ -56,5 +56,5 @@ class TypeValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Type) {
diff --git a/src/Symfony/Component/Validator/Constraints/UlidValidator.php b/src/Symfony/Component/Validator/Constraints/UlidValidator.php
index ad47f66d4f..f382dea0db 100644
--- a/src/Symfony/Component/Validator/Constraints/UlidValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/UlidValidator.php
@@ -28,5 +28,5 @@ class UlidValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Ulid) {
diff --git a/src/Symfony/Component/Validator/Constraints/UniqueValidator.php b/src/Symfony/Component/Validator/Constraints/UniqueValidator.php
index 1e692fe682..ae1c23fd44 100644
--- a/src/Symfony/Component/Validator/Constraints/UniqueValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/UniqueValidator.php
@@ -25,5 +25,5 @@ class UniqueValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Unique) {
diff --git a/src/Symfony/Component/Validator/Constraints/UrlValidator.php b/src/Symfony/Component/Validator/Constraints/UrlValidator.php
index 4a73040a24..e29da3bf1d 100644
--- a/src/Symfony/Component/Validator/Constraints/UrlValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/UrlValidator.php
@@ -49,5 +49,5 @@ class UrlValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Url) {
diff --git a/src/Symfony/Component/Validator/Constraints/UuidValidator.php b/src/Symfony/Component/Validator/Constraints/UuidValidator.php
index 1fc8791237..85f253c99c 100644
--- a/src/Symfony/Component/Validator/Constraints/UuidValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/UuidValidator.php
@@ -63,5 +63,5 @@ class UuidValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Uuid) {
diff --git a/src/Symfony/Component/Validator/Constraints/Valid.php b/src/Symfony/Component/Validator/Constraints/Valid.php
index 46c5ee355b..e68e2cfa26 100644
--- a/src/Symfony/Component/Validator/Constraints/Valid.php
+++ b/src/Symfony/Component/Validator/Constraints/Valid.php
@@ -45,5 +45,5 @@ class Valid extends Constraint
      * @return void
      */
-    public function addImplicitGroupName(string $group)
+    public function addImplicitGroupName(string $group): void
     {
         if (null !== $this->groups) {
diff --git a/src/Symfony/Component/Validator/Constraints/ValidValidator.php b/src/Symfony/Component/Validator/Constraints/ValidValidator.php
index 7c960ffee1..3952a146b0 100644
--- a/src/Symfony/Component/Validator/Constraints/ValidValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/ValidValidator.php
@@ -24,5 +24,5 @@ class ValidValidator extends ConstraintValidator
      * @return void
      */
-    public function validate(mixed $value, Constraint $constraint)
+    public function validate(mixed $value, Constraint $constraint): void
     {
         if (!$constraint instanceof Valid) {
diff --git a/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php b/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php
index 305a597665..3b14b2d078 100644
--- a/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php
+++ b/src/Symfony/Component/Validator/Context/ExecutionContextInterface.php
@@ -70,5 +70,5 @@ interface ExecutionContextInterface
      * @return void
      */
-    public function addViolation(string $message, array $params = []);
+    public function addViolation(string $message, array $params = []): void;
 
     /**
diff --git a/src/Symfony/Component/Validator/DependencyInjection/AddAutoMappingConfigurationPass.php b/src/Symfony/Component/Validator/DependencyInjection/AddAutoMappingConfigurationPass.php
index b1680b7cd4..805d093001 100644
--- a/src/Symfony/Component/Validator/DependencyInjection/AddAutoMappingConfigurationPass.php
+++ b/src/Symfony/Component/Validator/DependencyInjection/AddAutoMappingConfigurationPass.php
@@ -26,5 +26,5 @@ class AddAutoMappingConfigurationPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasParameter('validator.auto_mapping') || !$container->hasDefinition('validator.builder')) {
diff --git a/src/Symfony/Component/Validator/DependencyInjection/AddConstraintValidatorsPass.php b/src/Symfony/Component/Validator/DependencyInjection/AddConstraintValidatorsPass.php
index 4bcae00efa..1c6c15c42e 100644
--- a/src/Symfony/Component/Validator/DependencyInjection/AddConstraintValidatorsPass.php
+++ b/src/Symfony/Component/Validator/DependencyInjection/AddConstraintValidatorsPass.php
@@ -26,5 +26,5 @@ class AddConstraintValidatorsPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('validator.validator_factory')) {
diff --git a/src/Symfony/Component/Validator/DependencyInjection/AddValidatorInitializersPass.php b/src/Symfony/Component/Validator/DependencyInjection/AddValidatorInitializersPass.php
index d53e3c85e7..5fe192215e 100644
--- a/src/Symfony/Component/Validator/DependencyInjection/AddValidatorInitializersPass.php
+++ b/src/Symfony/Component/Validator/DependencyInjection/AddValidatorInitializersPass.php
@@ -25,5 +25,5 @@ class AddValidatorInitializersPass implements CompilerPassInterface
      * @return void
      */
-    public function process(ContainerBuilder $container)
+    public function process(ContainerBuilder $container): void
     {
         if (!$container->hasDefinition('validator.builder')) {
diff --git a/src/Symfony/Component/Validator/Exception/InvalidOptionsException.php b/src/Symfony/Component/Validator/Exception/InvalidOptionsException.php
index 8a4fba25d0..6165250ee3 100644
--- a/src/Symfony/Component/Validator/Exception/InvalidOptionsException.php
+++ b/src/Symfony/Component/Validator/Exception/InvalidOptionsException.php
@@ -26,5 +26,5 @@ class InvalidOptionsException extends ValidatorException
      * @return array
      */
-    public function getOptions()
+    public function getOptions(): array
     {
         return $this->options;
diff --git a/src/Symfony/Component/Validator/Exception/MissingOptionsException.php b/src/Symfony/Component/Validator/Exception/MissingOptionsException.php
index a7eda1457d..28630f205f 100644
--- a/src/Symfony/Component/Validator/Exception/MissingOptionsException.php
+++ b/src/Symfony/Component/Validator/Exception/MissingOptionsException.php
@@ -26,5 +26,5 @@ class MissingOptionsException extends ValidatorException
      * @return array
      */
-    public function getOptions()
+    public function getOptions(): array
     {
         return $this->options;
diff --git a/src/Symfony/Component/Validator/Exception/ValidationFailedException.php b/src/Symfony/Component/Validator/Exception/ValidationFailedException.php
index 2106e0a0ba..0b64f07c89 100644
--- a/src/Symfony/Component/Validator/Exception/ValidationFailedException.php
+++ b/src/Symfony/Component/Validator/Exception/ValidationFailedException.php
@@ -32,5 +32,5 @@ class ValidationFailedException extends RuntimeException
      * @return mixed
      */
-    public function getValue()
+    public function getValue(): mixed
     {
         return $this->value;
diff --git a/src/Symfony/Component/Validator/Mapping/ClassMetadata.php b/src/Symfony/Component/Validator/Mapping/ClassMetadata.php
index f5f084f2ed..b0f6545ab0 100644
--- a/src/Symfony/Component/Validator/Mapping/ClassMetadata.php
+++ b/src/Symfony/Component/Validator/Mapping/ClassMetadata.php
@@ -325,5 +325,5 @@ class ClassMetadata extends GenericMetadata implements ClassMetadataInterface
      * @return void
      */
-    public function mergeConstraints(self $source)
+    public function mergeConstraints(self $source): void
     {
         if ($source->isGroupSequenceProvider()) {
@@ -434,5 +434,5 @@ class ClassMetadata extends GenericMetadata implements ClassMetadataInterface
      * @throws GroupDefinitionException
      */
-    public function setGroupSequenceProvider(bool $active)
+    public function setGroupSequenceProvider(bool $active): void
     {
         if ($this->hasGroupSequence()) {
diff --git a/src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php b/src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php
index 3f0c0aa46f..3cdd05ac09 100644
--- a/src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php
+++ b/src/Symfony/Component/Validator/Mapping/Loader/AbstractLoader.php
@@ -53,5 +53,5 @@ abstract class AbstractLoader implements LoaderInterface
      * @return void
      */
-    protected function addNamespaceAlias(string $alias, string $namespace)
+    protected function addNamespaceAlias(string $alias, string $namespace): void
     {
         $this->namespaces[$alias] = $namespace;
diff --git a/src/Symfony/Component/Validator/Mapping/MemberMetadata.php b/src/Symfony/Component/Validator/Mapping/MemberMetadata.php
index e7389f7b8e..3c07cdc9f7 100644
--- a/src/Symfony/Component/Validator/Mapping/MemberMetadata.php
+++ b/src/Symfony/Component/Validator/Mapping/MemberMetadata.php
@@ -97,5 +97,5 @@ abstract class MemberMetadata extends GenericMetadata implements PropertyMetadat
      * @return string
      */
-    public function getClassName()
+    public function getClassName(): string
     {
         return $this->class;
diff --git a/src/Symfony/Component/Validator/ObjectInitializerInterface.php b/src/Symfony/Component/Validator/ObjectInitializerInterface.php
index 629a214a04..10e60dafac 100644
--- a/src/Symfony/Component/Validator/ObjectInitializerInterface.php
+++ b/src/Symfony/Component/Validator/ObjectInitializerInterface.php
@@ -26,4 +26,4 @@ interface ObjectInitializerInterface
      * @return void
      */
-    public function initialize(object $object);
+    public function initialize(object $object): void;
 }
diff --git a/src/Symfony/Component/Validator/Test/ConstraintValidatorTestCase.php b/src/Symfony/Component/Validator/Test/ConstraintValidatorTestCase.php
index 9712d35ac1..2a0b248897 100644
--- a/src/Symfony/Component/Validator/Test/ConstraintValidatorTestCase.php
+++ b/src/Symfony/Component/Validator/Test/ConstraintValidatorTestCase.php
@@ -291,5 +291,5 @@ abstract class ConstraintValidatorTestCase extends TestCase
      * @psalm-return T
      */
-    abstract protected function createValidator();
+    abstract protected function createValidator(): ConstraintValidatorInterface;
 }
 
diff --git a/src/Symfony/Component/Validator/Validator/TraceableValidator.php b/src/Symfony/Component/Validator/Validator/TraceableValidator.php
index 241ce901b5..bde6394ec3 100644
--- a/src/Symfony/Component/Validator/Validator/TraceableValidator.php
+++ b/src/Symfony/Component/Validator/Validator/TraceableValidator.php
@@ -42,5 +42,5 @@ class TraceableValidator implements ValidatorInterface, ResetInterface
      * @return void
      */
-    public function reset()
+    public function reset(): void
     {
         $this->collectedData = [];
diff --git a/src/Symfony/Component/Validator/Violation/ConstraintViolationBuilderInterface.php b/src/Symfony/Component/Validator/Violation/ConstraintViolationBuilderInterface.php
index 02fbeb797c..79964d5ce2 100644
--- a/src/Symfony/Component/Validator/Violation/ConstraintViolationBuilderInterface.php
+++ b/src/Symfony/Component/Validator/Violation/ConstraintViolationBuilderInterface.php
@@ -113,4 +113,4 @@ interface ConstraintViolationBuilderInterface
      * @return void
      */
-    public function addViolation();
+    public function addViolation(): void;
 }
diff --git a/src/Symfony/Component/VarDumper/Caster/AmqpCaster.php b/src/Symfony/Component/VarDumper/Caster/AmqpCaster.php
index 22026f46a7..52b1ef696b 100644
--- a/src/Symfony/Component/VarDumper/Caster/AmqpCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/AmqpCaster.php
@@ -50,5 +50,5 @@ class AmqpCaster
      * @return array
      */
-    public static function castConnection(\AMQPConnection $c, array $a, Stub $stub, bool $isNested)
+    public static function castConnection(\AMQPConnection $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -86,5 +86,5 @@ class AmqpCaster
      * @return array
      */
-    public static function castChannel(\AMQPChannel $c, array $a, Stub $stub, bool $isNested)
+    public static function castChannel(\AMQPChannel $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -112,5 +112,5 @@ class AmqpCaster
      * @return array
      */
-    public static function castQueue(\AMQPQueue $c, array $a, Stub $stub, bool $isNested)
+    public static function castQueue(\AMQPQueue $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -138,5 +138,5 @@ class AmqpCaster
      * @return array
      */
-    public static function castExchange(\AMQPExchange $c, array $a, Stub $stub, bool $isNested)
+    public static function castExchange(\AMQPExchange $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -169,5 +169,5 @@ class AmqpCaster
      * @return array
      */
-    public static function castEnvelope(\AMQPEnvelope $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castEnvelope(\AMQPEnvelope $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
diff --git a/src/Symfony/Component/VarDumper/Caster/ClassStub.php b/src/Symfony/Component/VarDumper/Caster/ClassStub.php
index 86b44dd2ab..4df5e7c284 100644
--- a/src/Symfony/Component/VarDumper/Caster/ClassStub.php
+++ b/src/Symfony/Component/VarDumper/Caster/ClassStub.php
@@ -89,5 +89,5 @@ class ClassStub extends ConstStub
      * @return mixed
      */
-    public static function wrapCallable(mixed $callable)
+    public static function wrapCallable(mixed $callable): mixed
     {
         if (\is_object($callable) || !\is_callable($callable)) {
diff --git a/src/Symfony/Component/VarDumper/Caster/DOMCaster.php b/src/Symfony/Component/VarDumper/Caster/DOMCaster.php
index d2d3fc1294..c28829f4e2 100644
--- a/src/Symfony/Component/VarDumper/Caster/DOMCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/DOMCaster.php
@@ -67,5 +67,5 @@ class DOMCaster
      * @return array
      */
-    public static function castException(\DOMException $e, array $a, Stub $stub, bool $isNested)
+    public static function castException(\DOMException $e, array $a, Stub $stub, bool $isNested): array
     {
         $k = Caster::PREFIX_PROTECTED.'code';
@@ -80,5 +80,5 @@ class DOMCaster
      * @return array
      */
-    public static function castLength($dom, array $a, Stub $stub, bool $isNested)
+    public static function castLength($dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -92,5 +92,5 @@ class DOMCaster
      * @return array
      */
-    public static function castImplementation(\DOMImplementation $dom, array $a, Stub $stub, bool $isNested)
+    public static function castImplementation(\DOMImplementation $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -105,5 +105,5 @@ class DOMCaster
      * @return array
      */
-    public static function castNode(\DOMNode $dom, array $a, Stub $stub, bool $isNested)
+    public static function castNode(\DOMNode $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -132,5 +132,5 @@ class DOMCaster
      * @return array
      */
-    public static function castNameSpaceNode(\DOMNameSpaceNode $dom, array $a, Stub $stub, bool $isNested)
+    public static function castNameSpaceNode(\DOMNameSpaceNode $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -151,5 +151,5 @@ class DOMCaster
      * @return array
      */
-    public static function castDocument(\DOMDocument $dom, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castDocument(\DOMDocument $dom, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $a += [
@@ -188,5 +188,5 @@ class DOMCaster
      * @return array
      */
-    public static function castCharacterData(\DOMCharacterData $dom, array $a, Stub $stub, bool $isNested)
+    public static function castCharacterData(\DOMCharacterData $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -201,5 +201,5 @@ class DOMCaster
      * @return array
      */
-    public static function castAttr(\DOMAttr $dom, array $a, Stub $stub, bool $isNested)
+    public static function castAttr(\DOMAttr $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -217,5 +217,5 @@ class DOMCaster
      * @return array
      */
-    public static function castElement(\DOMElement $dom, array $a, Stub $stub, bool $isNested)
+    public static function castElement(\DOMElement $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -230,5 +230,5 @@ class DOMCaster
      * @return array
      */
-    public static function castText(\DOMText $dom, array $a, Stub $stub, bool $isNested)
+    public static function castText(\DOMText $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -242,5 +242,5 @@ class DOMCaster
      * @return array
      */
-    public static function castDocumentType(\DOMDocumentType $dom, array $a, Stub $stub, bool $isNested)
+    public static function castDocumentType(\DOMDocumentType $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -259,5 +259,5 @@ class DOMCaster
      * @return array
      */
-    public static function castNotation(\DOMNotation $dom, array $a, Stub $stub, bool $isNested)
+    public static function castNotation(\DOMNotation $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -272,5 +272,5 @@ class DOMCaster
      * @return array
      */
-    public static function castEntity(\DOMEntity $dom, array $a, Stub $stub, bool $isNested)
+    public static function castEntity(\DOMEntity $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -289,5 +289,5 @@ class DOMCaster
      * @return array
      */
-    public static function castProcessingInstruction(\DOMProcessingInstruction $dom, array $a, Stub $stub, bool $isNested)
+    public static function castProcessingInstruction(\DOMProcessingInstruction $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -302,5 +302,5 @@ class DOMCaster
      * @return array
      */
-    public static function castXPath(\DOMXPath $dom, array $a, Stub $stub, bool $isNested)
+    public static function castXPath(\DOMXPath $dom, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
diff --git a/src/Symfony/Component/VarDumper/Caster/DateCaster.php b/src/Symfony/Component/VarDumper/Caster/DateCaster.php
index 1394a78132..ee8471c88f 100644
--- a/src/Symfony/Component/VarDumper/Caster/DateCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/DateCaster.php
@@ -28,5 +28,5 @@ class DateCaster
      * @return array
      */
-    public static function castDateTime(\DateTimeInterface $d, array $a, Stub $stub, bool $isNested, int $filter)
+    public static function castDateTime(\DateTimeInterface $d, array $a, Stub $stub, bool $isNested, int $filter): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -54,5 +54,5 @@ class DateCaster
      * @return array
      */
-    public static function castInterval(\DateInterval $interval, array $a, Stub $stub, bool $isNested, int $filter)
+    public static function castInterval(\DateInterval $interval, array $a, Stub $stub, bool $isNested, int $filter): array
     {
         $now = new \DateTimeImmutable('@0', new \DateTimeZone('UTC'));
@@ -86,5 +86,5 @@ class DateCaster
      * @return array
      */
-    public static function castTimeZone(\DateTimeZone $timeZone, array $a, Stub $stub, bool $isNested, int $filter)
+    public static function castTimeZone(\DateTimeZone $timeZone, array $a, Stub $stub, bool $isNested, int $filter): array
     {
         $location = $timeZone->getLocation();
@@ -100,5 +100,5 @@ class DateCaster
      * @return array
      */
-    public static function castPeriod(\DatePeriod $p, array $a, Stub $stub, bool $isNested, int $filter)
+    public static function castPeriod(\DatePeriod $p, array $a, Stub $stub, bool $isNested, int $filter): array
     {
         $dates = [];
diff --git a/src/Symfony/Component/VarDumper/Caster/DoctrineCaster.php b/src/Symfony/Component/VarDumper/Caster/DoctrineCaster.php
index 3120c3d919..0ac928f2ca 100644
--- a/src/Symfony/Component/VarDumper/Caster/DoctrineCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/DoctrineCaster.php
@@ -29,5 +29,5 @@ class DoctrineCaster
      * @return array
      */
-    public static function castCommonProxy(CommonProxy $proxy, array $a, Stub $stub, bool $isNested)
+    public static function castCommonProxy(CommonProxy $proxy, array $a, Stub $stub, bool $isNested): array
     {
         foreach (['__cloner__', '__initializer__'] as $k) {
@@ -44,5 +44,5 @@ class DoctrineCaster
      * @return array
      */
-    public static function castOrmProxy(OrmProxy $proxy, array $a, Stub $stub, bool $isNested)
+    public static function castOrmProxy(OrmProxy $proxy, array $a, Stub $stub, bool $isNested): array
     {
         foreach (['_entityPersister', '_identifier'] as $k) {
@@ -59,5 +59,5 @@ class DoctrineCaster
      * @return array
      */
-    public static function castPersistentCollection(PersistentCollection $coll, array $a, Stub $stub, bool $isNested)
+    public static function castPersistentCollection(PersistentCollection $coll, array $a, Stub $stub, bool $isNested): array
     {
         foreach (['snapshot', 'association', 'typeClass'] as $k) {
diff --git a/src/Symfony/Component/VarDumper/Caster/ExceptionCaster.php b/src/Symfony/Component/VarDumper/Caster/ExceptionCaster.php
index 02efb1b023..1634f14b80 100644
--- a/src/Symfony/Component/VarDumper/Caster/ExceptionCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/ExceptionCaster.php
@@ -51,5 +51,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castError(\Error $e, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castError(\Error $e, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         return self::filterExceptionArray($stub->class, $a, "\0Error\0", $filter);
@@ -59,5 +59,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castException(\Exception $e, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castException(\Exception $e, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         return self::filterExceptionArray($stub->class, $a, "\0Exception\0", $filter);
@@ -67,5 +67,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castErrorException(\ErrorException $e, array $a, Stub $stub, bool $isNested)
+    public static function castErrorException(\ErrorException $e, array $a, Stub $stub, bool $isNested): array
     {
         if (isset($a[$s = Caster::PREFIX_PROTECTED.'severity'], self::$errorTypes[$a[$s]])) {
@@ -79,5 +79,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castThrowingCasterException(ThrowingCasterException $e, array $a, Stub $stub, bool $isNested)
+    public static function castThrowingCasterException(ThrowingCasterException $e, array $a, Stub $stub, bool $isNested): array
     {
         $trace = Caster::PREFIX_VIRTUAL.'trace';
@@ -100,5 +100,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castSilencedErrorContext(SilencedErrorContext $e, array $a, Stub $stub, bool $isNested)
+    public static function castSilencedErrorContext(SilencedErrorContext $e, array $a, Stub $stub, bool $isNested): array
     {
         $sPrefix = "\0".SilencedErrorContext::class."\0";
@@ -130,5 +130,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castTraceStub(TraceStub $trace, array $a, Stub $stub, bool $isNested)
+    public static function castTraceStub(TraceStub $trace, array $a, Stub $stub, bool $isNested): array
     {
         if (!$isNested) {
@@ -207,5 +207,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castFrameStub(FrameStub $frame, array $a, Stub $stub, bool $isNested)
+    public static function castFrameStub(FrameStub $frame, array $a, Stub $stub, bool $isNested): array
     {
         if (!$isNested) {
@@ -293,5 +293,5 @@ class ExceptionCaster
      * @return array
      */
-    public static function castFlattenException(FlattenException $e, array $a, Stub $stub, bool $isNested)
+    public static function castFlattenException(FlattenException $e, array $a, Stub $stub, bool $isNested): array
     {
         if ($isNested) {
diff --git a/src/Symfony/Component/VarDumper/Caster/FiberCaster.php b/src/Symfony/Component/VarDumper/Caster/FiberCaster.php
index b797dbd634..ce8deb48d5 100644
--- a/src/Symfony/Component/VarDumper/Caster/FiberCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/FiberCaster.php
@@ -24,5 +24,5 @@ final class FiberCaster
      * @return array
      */
-    public static function castFiber(\Fiber $fiber, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castFiber(\Fiber $fiber, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
diff --git a/src/Symfony/Component/VarDumper/Caster/IntlCaster.php b/src/Symfony/Component/VarDumper/Caster/IntlCaster.php
index a4590f4b5a..d2a22bfe38 100644
--- a/src/Symfony/Component/VarDumper/Caster/IntlCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/IntlCaster.php
@@ -25,5 +25,5 @@ class IntlCaster
      * @return array
      */
-    public static function castMessageFormatter(\MessageFormatter $c, array $a, Stub $stub, bool $isNested)
+    public static function castMessageFormatter(\MessageFormatter $c, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -38,5 +38,5 @@ class IntlCaster
      * @return array
      */
-    public static function castNumberFormatter(\NumberFormatter $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castNumberFormatter(\NumberFormatter $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $a += [
@@ -118,5 +118,5 @@ class IntlCaster
      * @return array
      */
-    public static function castIntlTimeZone(\IntlTimeZone $c, array $a, Stub $stub, bool $isNested)
+    public static function castIntlTimeZone(\IntlTimeZone $c, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -138,5 +138,5 @@ class IntlCaster
      * @return array
      */
-    public static function castIntlCalendar(\IntlCalendar $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castIntlCalendar(\IntlCalendar $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $a += [
@@ -158,5 +158,5 @@ class IntlCaster
      * @return array
      */
-    public static function castIntlDateFormatter(\IntlDateFormatter $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castIntlDateFormatter(\IntlDateFormatter $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $a += [
diff --git a/src/Symfony/Component/VarDumper/Caster/MemcachedCaster.php b/src/Symfony/Component/VarDumper/Caster/MemcachedCaster.php
index 2f161e8cb3..cc99a62e95 100644
--- a/src/Symfony/Component/VarDumper/Caster/MemcachedCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/MemcachedCaster.php
@@ -27,5 +27,5 @@ class MemcachedCaster
      * @return array
      */
-    public static function castMemcached(\Memcached $c, array $a, Stub $stub, bool $isNested)
+    public static function castMemcached(\Memcached $c, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
diff --git a/src/Symfony/Component/VarDumper/Caster/PdoCaster.php b/src/Symfony/Component/VarDumper/Caster/PdoCaster.php
index d68eae2166..fab45ad4d8 100644
--- a/src/Symfony/Component/VarDumper/Caster/PdoCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/PdoCaster.php
@@ -63,5 +63,5 @@ class PdoCaster
      * @return array
      */
-    public static function castPdo(\PDO $c, array $a, Stub $stub, bool $isNested)
+    public static function castPdo(\PDO $c, array $a, Stub $stub, bool $isNested): array
     {
         $attr = [];
@@ -115,5 +115,5 @@ class PdoCaster
      * @return array
      */
-    public static function castPdoStatement(\PDOStatement $c, array $a, Stub $stub, bool $isNested)
+    public static function castPdoStatement(\PDOStatement $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
diff --git a/src/Symfony/Component/VarDumper/Caster/PgSqlCaster.php b/src/Symfony/Component/VarDumper/Caster/PgSqlCaster.php
index 0d8b3d919b..0e5627631d 100644
--- a/src/Symfony/Component/VarDumper/Caster/PgSqlCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/PgSqlCaster.php
@@ -73,5 +73,5 @@ class PgSqlCaster
      * @return array
      */
-    public static function castLargeObject($lo, array $a, Stub $stub, bool $isNested)
+    public static function castLargeObject($lo, array $a, Stub $stub, bool $isNested): array
     {
         $a['seek position'] = pg_lo_tell($lo);
@@ -83,5 +83,5 @@ class PgSqlCaster
      * @return array
      */
-    public static function castLink($link, array $a, Stub $stub, bool $isNested)
+    public static function castLink($link, array $a, Stub $stub, bool $isNested): array
     {
         $a['status'] = pg_connection_status($link);
@@ -118,5 +118,5 @@ class PgSqlCaster
      * @return array
      */
-    public static function castResult($result, array $a, Stub $stub, bool $isNested)
+    public static function castResult($result, array $a, Stub $stub, bool $isNested): array
     {
         $a['num rows'] = pg_num_rows($result);
diff --git a/src/Symfony/Component/VarDumper/Caster/ProxyManagerCaster.php b/src/Symfony/Component/VarDumper/Caster/ProxyManagerCaster.php
index eb6c88db6a..df608c2714 100644
--- a/src/Symfony/Component/VarDumper/Caster/ProxyManagerCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/ProxyManagerCaster.php
@@ -25,5 +25,5 @@ class ProxyManagerCaster
      * @return array
      */
-    public static function castProxy(ProxyInterface $c, array $a, Stub $stub, bool $isNested)
+    public static function castProxy(ProxyInterface $c, array $a, Stub $stub, bool $isNested): array
     {
         if ($parent = get_parent_class($c)) {
diff --git a/src/Symfony/Component/VarDumper/Caster/RdKafkaCaster.php b/src/Symfony/Component/VarDumper/Caster/RdKafkaCaster.php
index fcaa1b768a..53d991103c 100644
--- a/src/Symfony/Component/VarDumper/Caster/RdKafkaCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/RdKafkaCaster.php
@@ -35,5 +35,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castKafkaConsumer(KafkaConsumer $c, array $a, Stub $stub, bool $isNested)
+    public static function castKafkaConsumer(KafkaConsumer $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -58,5 +58,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castTopic(Topic $c, array $a, Stub $stub, bool $isNested)
+    public static function castTopic(Topic $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -72,5 +72,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castTopicPartition(TopicPartition $c, array $a)
+    public static function castTopicPartition(TopicPartition $c, array $a): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -88,5 +88,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castMessage(Message $c, array $a, Stub $stub, bool $isNested)
+    public static function castMessage(Message $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -102,5 +102,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castConf(Conf $c, array $a, Stub $stub, bool $isNested)
+    public static function castConf(Conf $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -116,5 +116,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castTopicConf(TopicConf $c, array $a, Stub $stub, bool $isNested)
+    public static function castTopicConf(TopicConf $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -130,5 +130,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castRdKafka(\RdKafka $c, array $a, Stub $stub, bool $isNested)
+    public static function castRdKafka(\RdKafka $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -146,5 +146,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castCollectionMetadata(CollectionMetadata $c, array $a, Stub $stub, bool $isNested)
+    public static function castCollectionMetadata(CollectionMetadata $c, array $a, Stub $stub, bool $isNested): array
     {
         $a += iterator_to_array($c);
@@ -156,5 +156,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castTopicMetadata(TopicMetadata $c, array $a, Stub $stub, bool $isNested)
+    public static function castTopicMetadata(TopicMetadata $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -171,5 +171,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castPartitionMetadata(PartitionMetadata $c, array $a, Stub $stub, bool $isNested)
+    public static function castPartitionMetadata(PartitionMetadata $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -187,5 +187,5 @@ class RdKafkaCaster
      * @return array
      */
-    public static function castBrokerMetadata(BrokerMetadata $c, array $a, Stub $stub, bool $isNested)
+    public static function castBrokerMetadata(BrokerMetadata $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -203,5 +203,5 @@ class RdKafkaCaster
      * @return array
      */
-    private static function extractMetadata(KafkaConsumer|\RdKafka $c)
+    private static function extractMetadata(KafkaConsumer|\RdKafka $c): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
diff --git a/src/Symfony/Component/VarDumper/Caster/RedisCaster.php b/src/Symfony/Component/VarDumper/Caster/RedisCaster.php
index 6ff046754d..2b9382f1a7 100644
--- a/src/Symfony/Component/VarDumper/Caster/RedisCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/RedisCaster.php
@@ -51,5 +51,5 @@ class RedisCaster
      * @return array
      */
-    public static function castRedis(\Redis|Relay $c, array $a, Stub $stub, bool $isNested)
+    public static function castRedis(\Redis|Relay $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -80,5 +80,5 @@ class RedisCaster
      * @return array
      */
-    public static function castRedisArray(\RedisArray $c, array $a, Stub $stub, bool $isNested)
+    public static function castRedisArray(\RedisArray $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -95,5 +95,5 @@ class RedisCaster
      * @return array
      */
-    public static function castRedisCluster(\RedisCluster $c, array $a, Stub $stub, bool $isNested)
+    public static function castRedisCluster(\RedisCluster $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
diff --git a/src/Symfony/Component/VarDumper/Caster/ReflectionCaster.php b/src/Symfony/Component/VarDumper/Caster/ReflectionCaster.php
index 4adb9bc9fe..bc151bb2a2 100644
--- a/src/Symfony/Component/VarDumper/Caster/ReflectionCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/ReflectionCaster.php
@@ -39,5 +39,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castClosure(\Closure $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castClosure(\Closure $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -78,5 +78,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function unsetClosureFileInfo(\Closure $c, array $a)
+    public static function unsetClosureFileInfo(\Closure $c, array $a): array
     {
         unset($a[Caster::PREFIX_VIRTUAL.'file'], $a[Caster::PREFIX_VIRTUAL.'line']);
@@ -102,5 +102,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castType(\ReflectionType $c, array $a, Stub $stub, bool $isNested)
+    public static function castType(\ReflectionType $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -127,5 +127,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castAttribute(\ReflectionAttribute $c, array $a, Stub $stub, bool $isNested)
+    public static function castAttribute(\ReflectionAttribute $c, array $a, Stub $stub, bool $isNested): array
     {
         self::addMap($a, $c, [
@@ -140,5 +140,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castReflectionGenerator(\ReflectionGenerator $c, array $a, Stub $stub, bool $isNested)
+    public static function castReflectionGenerator(\ReflectionGenerator $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -178,5 +178,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castClass(\ReflectionClass $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castClass(\ReflectionClass $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -212,5 +212,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castFunctionAbstract(\ReflectionFunctionAbstract $c, array $a, Stub $stub, bool $isNested, int $filter = 0)
+    public static function castFunctionAbstract(\ReflectionFunctionAbstract $c, array $a, Stub $stub, bool $isNested, int $filter = 0): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -273,5 +273,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castClassConstant(\ReflectionClassConstant $c, array $a, Stub $stub, bool $isNested)
+    public static function castClassConstant(\ReflectionClassConstant $c, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'modifiers'] = implode(' ', \Reflection::getModifierNames($c->getModifiers()));
@@ -286,5 +286,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castMethod(\ReflectionMethod $c, array $a, Stub $stub, bool $isNested)
+    public static function castMethod(\ReflectionMethod $c, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'modifiers'] = implode(' ', \Reflection::getModifierNames($c->getModifiers()));
@@ -296,5 +296,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castParameter(\ReflectionParameter $c, array $a, Stub $stub, bool $isNested)
+    public static function castParameter(\ReflectionParameter $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -339,5 +339,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castProperty(\ReflectionProperty $c, array $a, Stub $stub, bool $isNested)
+    public static function castProperty(\ReflectionProperty $c, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'modifiers'] = implode(' ', \Reflection::getModifierNames($c->getModifiers()));
@@ -352,5 +352,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castReference(\ReflectionReference $c, array $a, Stub $stub, bool $isNested)
+    public static function castReference(\ReflectionReference $c, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'id'] = $c->getId();
@@ -362,5 +362,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castExtension(\ReflectionExtension $c, array $a, Stub $stub, bool $isNested)
+    public static function castExtension(\ReflectionExtension $c, array $a, Stub $stub, bool $isNested): array
     {
         self::addMap($a, $c, [
@@ -381,5 +381,5 @@ class ReflectionCaster
      * @return array
      */
-    public static function castZendExtension(\ReflectionZendExtension $c, array $a, Stub $stub, bool $isNested)
+    public static function castZendExtension(\ReflectionZendExtension $c, array $a, Stub $stub, bool $isNested): array
     {
         self::addMap($a, $c, [
@@ -396,5 +396,5 @@ class ReflectionCaster
      * @return string
      */
-    public static function getSignature(array $a)
+    public static function getSignature(array $a): string
     {
         $prefix = Caster::PREFIX_VIRTUAL;
diff --git a/src/Symfony/Component/VarDumper/Caster/ResourceCaster.php b/src/Symfony/Component/VarDumper/Caster/ResourceCaster.php
index f3bbf3be4f..4941d9cd41 100644
--- a/src/Symfony/Component/VarDumper/Caster/ResourceCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/ResourceCaster.php
@@ -31,5 +31,5 @@ class ResourceCaster
      * @return array
      */
-    public static function castDba($dba, array $a, Stub $stub, bool $isNested)
+    public static function castDba($dba, array $a, Stub $stub, bool $isNested): array
     {
         $list = dba_list();
@@ -42,5 +42,5 @@ class ResourceCaster
      * @return array
      */
-    public static function castProcess($process, array $a, Stub $stub, bool $isNested)
+    public static function castProcess($process, array $a, Stub $stub, bool $isNested): array
     {
         return proc_get_status($process);
@@ -60,5 +60,5 @@ class ResourceCaster
      * @return array
      */
-    public static function castStreamContext($stream, array $a, Stub $stub, bool $isNested)
+    public static function castStreamContext($stream, array $a, Stub $stub, bool $isNested): array
     {
         return @stream_context_get_params($stream) ?: $a;
@@ -68,5 +68,5 @@ class ResourceCaster
      * @return array
      */
-    public static function castGd($gd, array $a, Stub $stub, bool $isNested)
+    public static function castGd($gd, array $a, Stub $stub, bool $isNested): array
     {
         $a['size'] = imagesx($gd).'x'.imagesy($gd);
@@ -79,5 +79,5 @@ class ResourceCaster
      * @return array
      */
-    public static function castOpensslX509($h, array $a, Stub $stub, bool $isNested)
+    public static function castOpensslX509($h, array $a, Stub $stub, bool $isNested): array
     {
         $stub->cut = -1;
diff --git a/src/Symfony/Component/VarDumper/Caster/SplCaster.php b/src/Symfony/Component/VarDumper/Caster/SplCaster.php
index ea86cb4988..9b84f08439 100644
--- a/src/Symfony/Component/VarDumper/Caster/SplCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/SplCaster.php
@@ -33,5 +33,5 @@ class SplCaster
      * @return array
      */
-    public static function castArrayObject(\ArrayObject $c, array $a, Stub $stub, bool $isNested)
+    public static function castArrayObject(\ArrayObject $c, array $a, Stub $stub, bool $isNested): array
     {
         return self::castSplArray($c, $a, $stub, $isNested);
@@ -41,5 +41,5 @@ class SplCaster
      * @return array
      */
-    public static function castArrayIterator(\ArrayIterator $c, array $a, Stub $stub, bool $isNested)
+    public static function castArrayIterator(\ArrayIterator $c, array $a, Stub $stub, bool $isNested): array
     {
         return self::castSplArray($c, $a, $stub, $isNested);
@@ -49,5 +49,5 @@ class SplCaster
      * @return array
      */
-    public static function castHeap(\Iterator $c, array $a, Stub $stub, bool $isNested)
+    public static function castHeap(\Iterator $c, array $a, Stub $stub, bool $isNested): array
     {
         $a += [
@@ -61,5 +61,5 @@ class SplCaster
      * @return array
      */
-    public static function castDoublyLinkedList(\SplDoublyLinkedList $c, array $a, Stub $stub, bool $isNested)
+    public static function castDoublyLinkedList(\SplDoublyLinkedList $c, array $a, Stub $stub, bool $isNested): array
     {
         $prefix = Caster::PREFIX_VIRTUAL;
@@ -79,5 +79,5 @@ class SplCaster
      * @return array
      */
-    public static function castFileInfo(\SplFileInfo $c, array $a, Stub $stub, bool $isNested)
+    public static function castFileInfo(\SplFileInfo $c, array $a, Stub $stub, bool $isNested): array
     {
         static $map = [
@@ -158,5 +158,5 @@ class SplCaster
      * @return array
      */
-    public static function castFileObject(\SplFileObject $c, array $a, Stub $stub, bool $isNested)
+    public static function castFileObject(\SplFileObject $c, array $a, Stub $stub, bool $isNested): array
     {
         static $map = [
@@ -198,5 +198,5 @@ class SplCaster
      * @return array
      */
-    public static function castObjectStorage(\SplObjectStorage $c, array $a, Stub $stub, bool $isNested)
+    public static function castObjectStorage(\SplObjectStorage $c, array $a, Stub $stub, bool $isNested): array
     {
         $storage = [];
@@ -222,5 +222,5 @@ class SplCaster
      * @return array
      */
-    public static function castOuterIterator(\OuterIterator $c, array $a, Stub $stub, bool $isNested)
+    public static function castOuterIterator(\OuterIterator $c, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'innerIterator'] = $c->getInnerIterator();
@@ -232,5 +232,5 @@ class SplCaster
      * @return array
      */
-    public static function castWeakReference(\WeakReference $c, array $a, Stub $stub, bool $isNested)
+    public static function castWeakReference(\WeakReference $c, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'object'] = $c->get();
@@ -242,5 +242,5 @@ class SplCaster
      * @return array
      */
-    public static function castWeakMap(\WeakMap $c, array $a, Stub $stub, bool $isNested)
+    public static function castWeakMap(\WeakMap $c, array $a, Stub $stub, bool $isNested): array
     {
         $map = [];
diff --git a/src/Symfony/Component/VarDumper/Caster/StubCaster.php b/src/Symfony/Component/VarDumper/Caster/StubCaster.php
index 4b93ff76f6..f65026281e 100644
--- a/src/Symfony/Component/VarDumper/Caster/StubCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/StubCaster.php
@@ -26,5 +26,5 @@ class StubCaster
      * @return array
      */
-    public static function castStub(Stub $c, array $a, Stub $stub, bool $isNested)
+    public static function castStub(Stub $c, array $a, Stub $stub, bool $isNested): array
     {
         if ($isNested) {
@@ -50,5 +50,5 @@ class StubCaster
      * @return array
      */
-    public static function castCutArray(CutArrayStub $c, array $a, Stub $stub, bool $isNested)
+    public static function castCutArray(CutArrayStub $c, array $a, Stub $stub, bool $isNested): array
     {
         return $isNested ? $c->preservedSubset : $a;
@@ -58,5 +58,5 @@ class StubCaster
      * @return array
      */
-    public static function cutInternals($obj, array $a, Stub $stub, bool $isNested)
+    public static function cutInternals($obj, array $a, Stub $stub, bool $isNested): array
     {
         if ($isNested) {
@@ -72,5 +72,5 @@ class StubCaster
      * @return array
      */
-    public static function castEnum(EnumStub $c, array $a, Stub $stub, bool $isNested)
+    public static function castEnum(EnumStub $c, array $a, Stub $stub, bool $isNested): array
     {
         if ($isNested) {
@@ -98,5 +98,5 @@ class StubCaster
      * @return array
      */
-    public static function castScalar(ScalarStub $scalarStub, array $a, Stub $stub)
+    public static function castScalar(ScalarStub $scalarStub, array $a, Stub $stub): array
     {
         $stub->type = Stub::TYPE_SCALAR;
diff --git a/src/Symfony/Component/VarDumper/Caster/SymfonyCaster.php b/src/Symfony/Component/VarDumper/Caster/SymfonyCaster.php
index ebc00f90ec..f8ba45a7f0 100644
--- a/src/Symfony/Component/VarDumper/Caster/SymfonyCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/SymfonyCaster.php
@@ -35,5 +35,5 @@ class SymfonyCaster
      * @return array
      */
-    public static function castRequest(Request $request, array $a, Stub $stub, bool $isNested)
+    public static function castRequest(Request $request, array $a, Stub $stub, bool $isNested): array
     {
         $clone = null;
@@ -53,5 +53,5 @@ class SymfonyCaster
      * @return array
      */
-    public static function castHttpClient($client, array $a, Stub $stub, bool $isNested)
+    public static function castHttpClient($client, array $a, Stub $stub, bool $isNested): array
     {
         $multiKey = sprintf("\0%s\0multi", $client::class);
@@ -66,5 +66,5 @@ class SymfonyCaster
      * @return array
      */
-    public static function castHttpClientResponse($response, array $a, Stub $stub, bool $isNested)
+    public static function castHttpClientResponse($response, array $a, Stub $stub, bool $isNested): array
     {
         $stub->cut += \count($a);
@@ -81,5 +81,5 @@ class SymfonyCaster
      * @return array
      */
-    public static function castLazyObjectState($state, array $a, Stub $stub, bool $isNested)
+    public static function castLazyObjectState($state, array $a, Stub $stub, bool $isNested): array
     {
         if (!$isNested) {
@@ -109,5 +109,5 @@ class SymfonyCaster
      * @return array
      */
-    public static function castUuid(Uuid $uuid, array $a, Stub $stub, bool $isNested)
+    public static function castUuid(Uuid $uuid, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'toBase58'] = $uuid->toBase58();
@@ -125,5 +125,5 @@ class SymfonyCaster
      * @return array
      */
-    public static function castUlid(Ulid $ulid, array $a, Stub $stub, bool $isNested)
+    public static function castUlid(Ulid $ulid, array $a, Stub $stub, bool $isNested): array
     {
         $a[Caster::PREFIX_VIRTUAL.'toBase58'] = $ulid->toBase58();
diff --git a/src/Symfony/Component/VarDumper/Caster/XmlReaderCaster.php b/src/Symfony/Component/VarDumper/Caster/XmlReaderCaster.php
index d802bbf2a1..cdf0cc7474 100644
--- a/src/Symfony/Component/VarDumper/Caster/XmlReaderCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/XmlReaderCaster.php
@@ -47,5 +47,5 @@ class XmlReaderCaster
      * @return array
      */
-    public static function castXmlReader(\XMLReader $reader, array $a, Stub $stub, bool $isNested)
+    public static function castXmlReader(\XMLReader $reader, array $a, Stub $stub, bool $isNested): array
     {
         try {
diff --git a/src/Symfony/Component/VarDumper/Caster/XmlResourceCaster.php b/src/Symfony/Component/VarDumper/Caster/XmlResourceCaster.php
index 0cf42584a0..e2807c7001 100644
--- a/src/Symfony/Component/VarDumper/Caster/XmlResourceCaster.php
+++ b/src/Symfony/Component/VarDumper/Caster/XmlResourceCaster.php
@@ -51,5 +51,5 @@ class XmlResourceCaster
      * @return array
      */
-    public static function castXml($h, array $a, Stub $stub, bool $isNested)
+    public static function castXml($h, array $a, Stub $stub, bool $isNested): array
     {
         $a['current_byte_index'] = xml_get_current_byte_index($h);
diff --git a/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php b/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php
index 6a746b88e3..4c0940bd31 100644
--- a/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php
+++ b/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php
@@ -237,5 +237,5 @@ abstract class AbstractCloner implements ClonerInterface
      * @return void
      */
-    public function addCasters(array $casters)
+    public function addCasters(array $casters): void
     {
         foreach ($casters as $type => $callback) {
@@ -249,5 +249,5 @@ abstract class AbstractCloner implements ClonerInterface
      * @return void
      */
-    public function setMaxItems(int $maxItems)
+    public function setMaxItems(int $maxItems): void
     {
         $this->maxItems = $maxItems;
@@ -259,5 +259,5 @@ abstract class AbstractCloner implements ClonerInterface
      * @return void
      */
-    public function setMaxString(int $maxString)
+    public function setMaxString(int $maxString): void
     {
         $this->maxString = $maxString;
@@ -270,5 +270,5 @@ abstract class AbstractCloner implements ClonerInterface
      * @return void
      */
-    public function setMinDepth(int $minDepth)
+    public function setMinDepth(int $minDepth): void
     {
         $this->minDepth = $minDepth;
diff --git a/src/Symfony/Component/VarDumper/Cloner/Data.php b/src/Symfony/Component/VarDumper/Cloner/Data.php
index 3bf0a09cb5..8273ab227d 100644
--- a/src/Symfony/Component/VarDumper/Cloner/Data.php
+++ b/src/Symfony/Component/VarDumper/Cloner/Data.php
@@ -266,5 +266,5 @@ class Data implements \ArrayAccess, \Countable, \IteratorAggregate
      * @return void
      */
-    public function dump(DumperInterface $dumper)
+    public function dump(DumperInterface $dumper): void
     {
         $refs = [0];
diff --git a/src/Symfony/Component/VarDumper/Cloner/DumperInterface.php b/src/Symfony/Component/VarDumper/Cloner/DumperInterface.php
index 4c5b315b60..a737e71755 100644
--- a/src/Symfony/Component/VarDumper/Cloner/DumperInterface.php
+++ b/src/Symfony/Component/VarDumper/Cloner/DumperInterface.php
@@ -24,5 +24,5 @@ interface DumperInterface
      * @return void
      */
-    public function dumpScalar(Cursor $cursor, string $type, string|int|float|bool|null $value);
+    public function dumpScalar(Cursor $cursor, string $type, string|int|float|bool|null $value): void;
 
     /**
@@ -35,5 +35,5 @@ interface DumperInterface
      * @return void
      */
-    public function dumpString(Cursor $cursor, string $str, bool $bin, int $cut);
+    public function dumpString(Cursor $cursor, string $str, bool $bin, int $cut): void;
 
     /**
@@ -46,5 +46,5 @@ interface DumperInterface
      * @return void
      */
-    public function enterHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild);
+    public function enterHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild): void;
 
     /**
@@ -58,4 +58,4 @@ interface DumperInterface
      * @return void
      */
-    public function leaveHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild, int $cut);
+    public function leaveHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild, int $cut): void;
 }
diff --git a/src/Symfony/Component/VarDumper/Dumper/AbstractDumper.php b/src/Symfony/Component/VarDumper/Dumper/AbstractDumper.php
index 053a90972b..5876b02373 100644
--- a/src/Symfony/Component/VarDumper/Dumper/AbstractDumper.php
+++ b/src/Symfony/Component/VarDumper/Dumper/AbstractDumper.php
@@ -159,5 +159,5 @@ abstract class AbstractDumper implements DataDumperInterface, DumperInterface
      * @return void
      */
-    protected function dumpLine(int $depth)
+    protected function dumpLine(int $depth): void
     {
         ($this->lineDumper)($this->line, $depth, $this->indentPad);
@@ -170,5 +170,5 @@ abstract class AbstractDumper implements DataDumperInterface, DumperInterface
      * @return void
      */
-    protected function echoLine(string $line, int $depth, string $indentPad)
+    protected function echoLine(string $line, int $depth, string $indentPad): void
     {
         if (-1 !== $depth) {
diff --git a/src/Symfony/Component/VarDumper/Dumper/CliDumper.php b/src/Symfony/Component/VarDumper/Dumper/CliDumper.php
index d9ce7ae4ed..ab6b70a682 100644
--- a/src/Symfony/Component/VarDumper/Dumper/CliDumper.php
+++ b/src/Symfony/Component/VarDumper/Dumper/CliDumper.php
@@ -90,5 +90,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function setColors(bool $colors)
+    public function setColors(bool $colors): void
     {
         $this->colors = $colors;
@@ -100,5 +100,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function setMaxStringWidth(int $maxStringWidth)
+    public function setMaxStringWidth(int $maxStringWidth): void
     {
         $this->maxStringWidth = $maxStringWidth;
@@ -112,5 +112,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function setStyles(array $styles)
+    public function setStyles(array $styles): void
     {
         $this->styles = $styles + $this->styles;
@@ -124,5 +124,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function setDisplayOptions(array $displayOptions)
+    public function setDisplayOptions(array $displayOptions): void
     {
         $this->displayOptions = $displayOptions + $this->displayOptions;
@@ -132,5 +132,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function dumpScalar(Cursor $cursor, string $type, string|int|float|bool|null $value)
+    public function dumpScalar(Cursor $cursor, string $type, string|int|float|bool|null $value): void
     {
         $this->dumpKey($cursor);
@@ -189,5 +189,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function dumpString(Cursor $cursor, string $str, bool $bin, int $cut)
+    public function dumpString(Cursor $cursor, string $str, bool $bin, int $cut): void
     {
         $this->dumpKey($cursor);
@@ -280,5 +280,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function enterHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild)
+    public function enterHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild): void
     {
         $this->colors ??= $this->supportsColors();
@@ -319,5 +319,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    public function leaveHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild, int $cut)
+    public function leaveHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild, int $cut): void
     {
         if (empty($cursor->attr['cut_hash'])) {
@@ -337,5 +337,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    protected function dumpEllipsis(Cursor $cursor, bool $hasChild, int $cut)
+    protected function dumpEllipsis(Cursor $cursor, bool $hasChild, int $cut): void
     {
         if ($cut) {
@@ -355,5 +355,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    protected function dumpKey(Cursor $cursor)
+    protected function dumpKey(Cursor $cursor): void
     {
         if (null !== $key = $cursor->hashKey) {
@@ -566,5 +566,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    protected function dumpLine(int $depth, bool $endOfValue = false)
+    protected function dumpLine(int $depth, bool $endOfValue = false): void
     {
         if ($this->colors) {
@@ -577,5 +577,5 @@ class CliDumper extends AbstractDumper
      * @return void
      */
-    protected function endValue(Cursor $cursor)
+    protected function endValue(Cursor $cursor): void
     {
         if (-1 === $cursor->hashType) {
diff --git a/src/Symfony/Component/VarDumper/Dumper/ContextualizedDumper.php b/src/Symfony/Component/VarDumper/Dumper/ContextualizedDumper.php
index 84cfb42595..06cb77d8cb 100644
--- a/src/Symfony/Component/VarDumper/Dumper/ContextualizedDumper.php
+++ b/src/Symfony/Component/VarDumper/Dumper/ContextualizedDumper.php
@@ -35,5 +35,5 @@ class ContextualizedDumper implements DataDumperInterface
      * @return string|null
      */
-    public function dump(Data $data)
+    public function dump(Data $data): ?string
     {
         $context = $data->getContext();
diff --git a/src/Symfony/Component/VarDumper/Dumper/DataDumperInterface.php b/src/Symfony/Component/VarDumper/Dumper/DataDumperInterface.php
index df05b6af57..024fb95d2f 100644
--- a/src/Symfony/Component/VarDumper/Dumper/DataDumperInterface.php
+++ b/src/Symfony/Component/VarDumper/Dumper/DataDumperInterface.php
@@ -24,4 +24,4 @@ interface DataDumperInterface
      * @return string|null
      */
-    public function dump(Data $data);
+    public function dump(Data $data): ?string;
 }
diff --git a/src/Symfony/Component/VarDumper/Dumper/HtmlDumper.php b/src/Symfony/Component/VarDumper/Dumper/HtmlDumper.php
index 34ef644ad0..f09c1fbb4e 100644
--- a/src/Symfony/Component/VarDumper/Dumper/HtmlDumper.php
+++ b/src/Symfony/Component/VarDumper/Dumper/HtmlDumper.php
@@ -86,5 +86,5 @@ class HtmlDumper extends CliDumper
      * @return void
      */
-    public function setStyles(array $styles)
+    public function setStyles(array $styles): void
     {
         $this->headerIsDumped = false;
@@ -95,5 +95,5 @@ class HtmlDumper extends CliDumper
      * @return void
      */
-    public function setTheme(string $themeName)
+    public function setTheme(string $themeName): void
     {
         if (!isset(static::$themes[$themeName])) {
@@ -111,5 +111,5 @@ class HtmlDumper extends CliDumper
      * @return void
      */
-    public function setDisplayOptions(array $displayOptions)
+    public function setDisplayOptions(array $displayOptions): void
     {
         $this->headerIsDumped = false;
@@ -122,5 +122,5 @@ class HtmlDumper extends CliDumper
      * @return void
      */
-    public function setDumpHeader(?string $header)
+    public function setDumpHeader(?string $header): void
     {
         $this->dumpHeader = $header;
@@ -132,5 +132,5 @@ class HtmlDumper extends CliDumper
      * @return void
      */
-    public function setDumpBoundaries(string $prefix, string $suffix)
+    public function setDumpBoundaries(string $prefix, string $suffix): void
     {
         $this->dumpPrefix = $prefix;
@@ -152,5 +152,5 @@ class HtmlDumper extends CliDumper
      * @return string
      */
-    protected function getDumpHeader()
+    protected function getDumpHeader(): string
     {
         $this->headerIsDumped = $this->outputStream ?? $this->lineDumper;
@@ -790,5 +790,5 @@ EOHTML
      * @return void
      */
-    public function dumpString(Cursor $cursor, string $str, bool $bin, int $cut)
+    public function dumpString(Cursor $cursor, string $str, bool $bin, int $cut): void
     {
         if ('' === $str && isset($cursor->attr['img-data'], $cursor->attr['content-type'])) {
@@ -808,5 +808,5 @@ EOHTML
      * @return void
      */
-    public function enterHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild)
+    public function enterHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild): void
     {
         if (Cursor::HASH_OBJECT === $type) {
@@ -839,5 +839,5 @@ EOHTML
      * @return void
      */
-    public function leaveHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild, int $cut)
+    public function leaveHash(Cursor $cursor, int $type, string|int|null $class, bool $hasChild, int $cut): void
     {
         $this->dumpEllipsis($cursor, $hasChild, $cut);
@@ -952,5 +952,5 @@ EOHTML
      * @return void
      */
-    protected function dumpLine(int $depth, bool $endOfValue = false)
+    protected function dumpLine(int $depth, bool $endOfValue = false): void
     {
         if (-1 === $this->lastDepth) {
diff --git a/src/Symfony/Component/VarDumper/Dumper/ServerDumper.php b/src/Symfony/Component/VarDumper/Dumper/ServerDumper.php
index 98c2149330..2e85547efb 100644
--- a/src/Symfony/Component/VarDumper/Dumper/ServerDumper.php
+++ b/src/Symfony/Component/VarDumper/Dumper/ServerDumper.php
@@ -45,5 +45,5 @@ class ServerDumper implements DataDumperInterface
      * @return string|null
      */
-    public function dump(Data $data)
+    public function dump(Data $data): ?string
     {
         if (!$this->connection->write($data) && $this->wrappedDumper) {
diff --git a/src/Symfony/Component/VarDumper/VarDumper.php b/src/Symfony/Component/VarDumper/VarDumper.php
index 2e1dad116c..abe2b0b229 100644
--- a/src/Symfony/Component/VarDumper/VarDumper.php
+++ b/src/Symfony/Component/VarDumper/VarDumper.php
@@ -43,5 +43,5 @@ class VarDumper
      * @return mixed
      */
-    public static function dump(mixed $var/* , string $label = null */)
+    public static function dump(mixed $var/* , string $label = null */): mixed
     {
         $label = 2 <= \func_num_args() ? func_get_arg(1) : null;
diff --git a/src/Symfony/Component/VarExporter/Internal/Hydrator.php b/src/Symfony/Component/VarExporter/Internal/Hydrator.php
index f665f6ee15..429db33d19 100644
--- a/src/Symfony/Component/VarExporter/Internal/Hydrator.php
+++ b/src/Symfony/Component/VarExporter/Internal/Hydrator.php
@@ -258,5 +258,5 @@ class Hydrator
      * @return array
      */
-    public static function getPropertyScopes($class)
+    public static function getPropertyScopes($class): array
     {
         $propertyScopes = [];
diff --git a/src/Symfony/Component/Workflow/Event/Event.php b/src/Symfony/Component/Workflow/Event/Event.php
index 5cd31e9154..2cd76d904b 100644
--- a/src/Symfony/Component/Workflow/Event/Event.php
+++ b/src/Symfony/Component/Workflow/Event/Event.php
@@ -42,5 +42,5 @@ class Event extends BaseEvent
      * @return Marking
      */
-    public function getMarking()
+    public function getMarking(): Marking
     {
         return $this->marking;
@@ -50,5 +50,5 @@ class Event extends BaseEvent
      * @return object
      */
-    public function getSubject()
+    public function getSubject(): object
     {
         return $this->subject;
@@ -58,5 +58,5 @@ class Event extends BaseEvent
      * @return Transition|null
      */
-    public function getTransition()
+    public function getTransition(): ?Transition
     {
         return $this->transition;
@@ -71,5 +71,5 @@ class Event extends BaseEvent
      * @return string
      */
-    public function getWorkflowName()
+    public function getWorkflowName(): string
     {
         return $this->workflow->getName();
@@ -79,5 +79,5 @@ class Event extends BaseEvent
      * @return mixed
      */
-    public function getMetadata(string $key, string|Transition|null $subject)
+    public function getMetadata(string $key, string|Transition|null $subject): mixed
     {
         return $this->workflow->getMetadataStore()->getMetadata($key, $subject);
diff --git a/src/Symfony/Component/Workflow/EventListener/AuditTrailListener.php b/src/Symfony/Component/Workflow/EventListener/AuditTrailListener.php
index 8d82824eb0..fab7b30160 100644
--- a/src/Symfony/Component/Workflow/EventListener/AuditTrailListener.php
+++ b/src/Symfony/Component/Workflow/EventListener/AuditTrailListener.php
@@ -31,5 +31,5 @@ class AuditTrailListener implements EventSubscriberInterface
      * @return void
      */
-    public function onLeave(Event $event)
+    public function onLeave(Event $event): void
     {
         foreach ($event->getTransition()->getFroms() as $place) {
@@ -41,5 +41,5 @@ class AuditTrailListener implements EventSubscriberInterface
      * @return void
      */
-    public function onTransition(Event $event)
+    public function onTransition(Event $event): void
     {
         $this->logger->info(sprintf('Transition "%s" for subject of class "%s" in workflow "%s".', $event->getTransition()->getName(), $event->getSubject()::class, $event->getWorkflowName()));
@@ -49,5 +49,5 @@ class AuditTrailListener implements EventSubscriberInterface
      * @return void
      */
-    public function onEnter(Event $event)
+    public function onEnter(Event $event): void
     {
         foreach ($event->getTransition()->getTos() as $place) {
diff --git a/src/Symfony/Component/Workflow/EventListener/ExpressionLanguage.php b/src/Symfony/Component/Workflow/EventListener/ExpressionLanguage.php
index 82fe165152..f62b2a09f0 100644
--- a/src/Symfony/Component/Workflow/EventListener/ExpressionLanguage.php
+++ b/src/Symfony/Component/Workflow/EventListener/ExpressionLanguage.php
@@ -26,5 +26,5 @@ class ExpressionLanguage extends BaseExpressionLanguage
      * @return void
      */
-    protected function registerFunctions()
+    protected function registerFunctions(): void
     {
         parent::registerFunctions();
diff --git a/src/Symfony/Component/Workflow/EventListener/GuardExpression.php b/src/Symfony/Component/Workflow/EventListener/GuardExpression.php
index 23e830cac4..2b119f2db8 100644
--- a/src/Symfony/Component/Workflow/EventListener/GuardExpression.php
+++ b/src/Symfony/Component/Workflow/EventListener/GuardExpression.php
@@ -28,5 +28,5 @@ class GuardExpression
      * @return Transition
      */
-    public function getTransition()
+    public function getTransition(): Transition
     {
         return $this->transition;
@@ -36,5 +36,5 @@ class GuardExpression
      * @return string
      */
-    public function getExpression()
+    public function getExpression(): string
     {
         return $this->expression;
diff --git a/src/Symfony/Component/Workflow/EventListener/GuardListener.php b/src/Symfony/Component/Workflow/EventListener/GuardListener.php
index c207b1a655..5285d3417f 100644
--- a/src/Symfony/Component/Workflow/EventListener/GuardListener.php
+++ b/src/Symfony/Component/Workflow/EventListener/GuardListener.php
@@ -47,5 +47,5 @@ class GuardListener
      * @return void
      */
-    public function onTransition(GuardEvent $event, string $eventName)
+    public function onTransition(GuardEvent $event, string $eventName): void
     {
         if (!isset($this->configuration[$eventName])) {
diff --git a/src/Symfony/Component/Workflow/Exception/TransitionException.php b/src/Symfony/Component/Workflow/Exception/TransitionException.php
index 890d8e244b..d074936253 100644
--- a/src/Symfony/Component/Workflow/Exception/TransitionException.php
+++ b/src/Symfony/Component/Workflow/Exception/TransitionException.php
@@ -38,5 +38,5 @@ class TransitionException extends LogicException
      * @return object
      */
-    public function getSubject()
+    public function getSubject(): object
     {
         return $this->subject;
diff --git a/src/Symfony/Component/Workflow/Marking.php b/src/Symfony/Component/Workflow/Marking.php
index 95a83f0cfd..84e568b939 100644
--- a/src/Symfony/Component/Workflow/Marking.php
+++ b/src/Symfony/Component/Workflow/Marking.php
@@ -35,5 +35,5 @@ class Marking
      * @return void
      */
-    public function mark(string $place)
+    public function mark(string $place): void
     {
         $this->places[$place] = 1;
@@ -43,5 +43,5 @@ class Marking
      * @return void
      */
-    public function unmark(string $place)
+    public function unmark(string $place): void
     {
         unset($this->places[$place]);
@@ -51,5 +51,5 @@ class Marking
      * @return bool
      */
-    public function has(string $place)
+    public function has(string $place): bool
     {
         return isset($this->places[$place]);
@@ -59,5 +59,5 @@ class Marking
      * @return array
      */
-    public function getPlaces()
+    public function getPlaces(): array
     {
         return $this->places;
diff --git a/src/Symfony/Component/Workflow/MarkingStore/MarkingStoreInterface.php b/src/Symfony/Component/Workflow/MarkingStore/MarkingStoreInterface.php
index 7547a7f43b..c6b23fdf8a 100644
--- a/src/Symfony/Component/Workflow/MarkingStore/MarkingStoreInterface.php
+++ b/src/Symfony/Component/Workflow/MarkingStore/MarkingStoreInterface.php
@@ -35,4 +35,4 @@ interface MarkingStoreInterface
      * @return void
      */
-    public function setMarking(object $subject, Marking $marking, array $context = []);
+    public function setMarking(object $subject, Marking $marking, array $context = []): void;
 }
diff --git a/src/Symfony/Component/Workflow/Metadata/GetMetadataTrait.php b/src/Symfony/Component/Workflow/Metadata/GetMetadataTrait.php
index 286e2f8605..50762970ed 100644
--- a/src/Symfony/Component/Workflow/Metadata/GetMetadataTrait.php
+++ b/src/Symfony/Component/Workflow/Metadata/GetMetadataTrait.php
@@ -22,5 +22,5 @@ trait GetMetadataTrait
      * @return mixed
      */
-    public function getMetadata(string $key, string|Transition $subject = null)
+    public function getMetadata(string $key, string|Transition $subject = null): mixed
     {
         if (null === $subject) {
diff --git a/src/Symfony/Component/Workflow/Metadata/MetadataStoreInterface.php b/src/Symfony/Component/Workflow/Metadata/MetadataStoreInterface.php
index 9acd540dcc..495573aec4 100644
--- a/src/Symfony/Component/Workflow/Metadata/MetadataStoreInterface.php
+++ b/src/Symfony/Component/Workflow/Metadata/MetadataStoreInterface.php
@@ -38,4 +38,4 @@ interface MetadataStoreInterface
      * @return mixed
      */
-    public function getMetadata(string $key, string|Transition $subject = null);
+    public function getMetadata(string $key, string|Transition $subject = null): mixed;
 }
diff --git a/src/Symfony/Component/Workflow/Registry.php b/src/Symfony/Component/Workflow/Registry.php
index 287d8b750f..9462747d84 100644
--- a/src/Symfony/Component/Workflow/Registry.php
+++ b/src/Symfony/Component/Workflow/Registry.php
@@ -28,5 +28,5 @@ class Registry
      * @return void
      */
-    public function addWorkflow(WorkflowInterface $workflow, WorkflowSupportStrategyInterface $supportStrategy)
+    public function addWorkflow(WorkflowInterface $workflow, WorkflowSupportStrategyInterface $supportStrategy): void
     {
         $this->workflows[] = [$workflow, $supportStrategy];
diff --git a/src/Symfony/Component/Workflow/Validator/DefinitionValidatorInterface.php b/src/Symfony/Component/Workflow/Validator/DefinitionValidatorInterface.php
index c9717b7beb..427e4d2ce9 100644
--- a/src/Symfony/Component/Workflow/Validator/DefinitionValidatorInterface.php
+++ b/src/Symfony/Component/Workflow/Validator/DefinitionValidatorInterface.php
@@ -26,4 +26,4 @@ interface DefinitionValidatorInterface
      * @throws InvalidDefinitionException on invalid definition
      */
-    public function validate(Definition $definition, string $name);
+    public function validate(Definition $definition, string $name): void;
 }
diff --git a/src/Symfony/Component/Workflow/Validator/StateMachineValidator.php b/src/Symfony/Component/Workflow/Validator/StateMachineValidator.php
index 20afc8d937..ef56c02882 100644
--- a/src/Symfony/Component/Workflow/Validator/StateMachineValidator.php
+++ b/src/Symfony/Component/Workflow/Validator/StateMachineValidator.php
@@ -23,5 +23,5 @@ class StateMachineValidator implements DefinitionValidatorInterface
      * @return void
      */
-    public function validate(Definition $definition, string $name)
+    public function validate(Definition $definition, string $name): void
     {
         $transitionFromNames = [];
diff --git a/src/Symfony/Component/Workflow/Validator/WorkflowValidator.php b/src/Symfony/Component/Workflow/Validator/WorkflowValidator.php
index c13c2814c3..782521afe1 100644
--- a/src/Symfony/Component/Workflow/Validator/WorkflowValidator.php
+++ b/src/Symfony/Component/Workflow/Validator/WorkflowValidator.php
@@ -31,5 +31,5 @@ class WorkflowValidator implements DefinitionValidatorInterface
      * @return void
      */
-    public function validate(Definition $definition, string $name)
+    public function validate(Definition $definition, string $name): void
     {
         // Make sure all transitions for one place has unique name.
diff --git a/src/Symfony/Component/Yaml/Command/LintCommand.php b/src/Symfony/Component/Yaml/Command/LintCommand.php
index 95352ac174..df34364002 100644
--- a/src/Symfony/Component/Yaml/Command/LintCommand.php
+++ b/src/Symfony/Component/Yaml/Command/LintCommand.php
@@ -54,5 +54,5 @@ class LintCommand extends Command
      * @return void
      */
-    protected function configure()
+    protected function configure(): void
     {
         $this
diff --git a/src/Symfony/Component/Yaml/Exception/ParseException.php b/src/Symfony/Component/Yaml/Exception/ParseException.php
index c1a77ad157..1e926dc83a 100644
--- a/src/Symfony/Component/Yaml/Exception/ParseException.php
+++ b/src/Symfony/Component/Yaml/Exception/ParseException.php
@@ -55,5 +55,5 @@ class ParseException extends RuntimeException
      * @return void
      */
-    public function setSnippet(string $snippet)
+    public function setSnippet(string $snippet): void
     {
         $this->snippet = $snippet;
@@ -77,5 +77,5 @@ class ParseException extends RuntimeException
      * @return void
      */
-    public function setParsedFile(string $parsedFile)
+    public function setParsedFile(string $parsedFile): void
     {
         $this->parsedFile = $parsedFile;
@@ -97,5 +97,5 @@ class ParseException extends RuntimeException
      * @return void
      */
-    public function setParsedLine(int $parsedLine)
+    public function setParsedLine(int $parsedLine): void
     {
         $this->parsedLine = $parsedLine;
diff --git a/src/Symfony/Contracts/Translation/LocaleAwareInterface.php b/src/Symfony/Contracts/Translation/LocaleAwareInterface.php
index db40ba13e0..48928ca959 100644
--- a/src/Symfony/Contracts/Translation/LocaleAwareInterface.php
+++ b/src/Symfony/Contracts/Translation/LocaleAwareInterface.php
@@ -21,5 +21,5 @@ interface LocaleAwareInterface
      * @throws \InvalidArgumentException If the locale contains invalid characters
      */
-    public function setLocale(string $locale);
+    public function setLocale(string $locale): void;
 
     /**
diff --git a/src/Symfony/Contracts/Translation/TranslatorTrait.php b/src/Symfony/Contracts/Translation/TranslatorTrait.php
index e3b0adff05..19d90162ab 100644
--- a/src/Symfony/Contracts/Translation/TranslatorTrait.php
+++ b/src/Symfony/Contracts/Translation/TranslatorTrait.php
@@ -26,5 +26,5 @@ trait TranslatorTrait
      * @return void
      */
-    public function setLocale(string $locale)
+    public function setLocale(string $locale): void
     {
         $this->locale = $locale;
